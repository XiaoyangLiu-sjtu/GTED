{"character": "i", "row": 0, "column": 0}
{"character": "m", "row": 0, "column": 1}
{"character": "p", "row": 0, "column": 2}
{"character": "o", "row": 0, "column": 3}
{"character": "r", "row": 0, "column": 4}
{"character": "t", "row": 0, "column": 5}
{"character": " ", "row": 0, "column": 6}
{"character": "M", "row": 0, "column": 7}
{"character": "a", "row": 0, "column": 8}
{"character": "t", "row": 0, "column": 9}
{"character": "h", "row": 0, "column": 10}
{"character": "l", "row": 0, "column": 11}
{"character": "i", "row": 0, "column": 12}
{"character": "b", "row": 0, "column": 13}
{"character": "o", "row": 1, "column": 0, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 8}}, "contents": {"value": "Makes names from other namespaces visible without writing the namespace prefix.\n\nNames that are made available with `open` are visible within the current `section` or `namespace`\nblock. This makes referring to (type) definitions and theorems easier, but note that it can also\nmake [scoped instances], notations, and attributes from a different namespace available.\n\nThe `open` command can be used in a few different ways:\n\n* `open Some.Namespace.Path1 Some.Namespace.Path2` makes all non-protected names in\n  `Some.Namespace.Path1` and `Some.Namespace.Path2` available without the prefix, so that\n  `Some.Namespace.Path1.x` and `Some.Namespace.Path2.y` can be referred to by writing only `x` and\n  `y`.\n\n* `open Some.Namespace.Path hiding def1 def2` opens all non-protected names in `Some.Namespace.Path`\n  except `def1` and `def2`.\n\n* `open Some.Namespace.Path (def1 def2)` only makes `Some.Namespace.Path.def1` and\n  `Some.Namespace.Path.def2` available without the full prefix, so `Some.Namespace.Path.def3` would\n  be unaffected.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open Some.Namespace.Path renaming def1 → def1', def2 → def2'` same as `open Some.Namespace.Path\n  (def1 def2)` but `def1`/`def2`'s names are changed to `def1'`/`def2'`.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open scoped Some.Namespace.Path1 Some.Namespace.Path2` **only** opens [scoped instances],\n  notations, and attributes from `Namespace1` and `Namespace2`; it does **not** make any other name\n  available.\n\n* `open <any of the open shapes above> in` makes the names `open`-ed visible only in the next\n  command or expression.\n\n[scoped instance]: https://lean-lang.org/theorem_proving_in_lean4/type_classes.html#scoped-instances\n(Scoped instances in Theorem Proving in Lean)\n\n\n## Examples\n\n```lean\n/-- SKI combinators https://en.wikipedia.org/wiki/SKI_combinator_calculus -/\nnamespace Combinator.Calculus\n  def I (a : α) : α := a\n  def K (a : α) : β → α := fun _ => a\n  def S (x : α → β → γ) (y : α → β) (z : α) : γ := x z (y z)\nend Combinator.Calculus\n\nsection\n  -- open everything under `Combinator.Calculus`, *i.e.* `I`, `K` and `S`,\n  -- until the section ends\n  open Combinator.Calculus\n\n  theorem SKx_eq_K : S K x = I := rfl\nend\n\n-- open everything under `Combinator.Calculus` only for the next command (the next `theorem`, here)\nopen Combinator.Calculus in\ntheorem SKx_eq_K' : S K x = I := rfl\n\nsection\n  -- open only `S` and `K` under `Combinator.Calculus`\n  open Combinator.Calculus (S K)\n\n  theorem SKxy_eq_y : S K x y = y := rfl\n\n  -- `I` is not in scope, we have to use its full path\n  theorem SKxy_eq_Iy : S K x y = Combinator.Calculus.I y := rfl\nend\n\nsection\n  open Combinator.Calculus\n    renaming\n      I → identity,\n      K → konstant\n\n  #check identity\n  #check konstant\nend\n\nsection\n  open Combinator.Calculus\n    hiding S\n\n  #check I\n  #check K\nend\n\nsection\n  namespace Demo\n    inductive MyType\n    | val\n\n    namespace N1\n      scoped infix:68 \" ≋ \" => BEq.beq\n\n      scoped instance : BEq MyType where\n        beq _ _ := true\n\n      def Alias := MyType\n    end N1\n  end Demo\n\n  -- bring `≋` and the instance in scope, but not `Alias`\n  open scoped Demo.N1\n\n  #check Demo.MyType.val == Demo.MyType.val\n  #check Demo.MyType.val ≋ Demo.MyType.val\n  -- #check Alias -- unknown identifier 'Alias'\nend\n```\n", "kind": "markdown"}}
{"character": "p", "row": 1, "column": 1, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 8}}, "contents": {"value": "Makes names from other namespaces visible without writing the namespace prefix.\n\nNames that are made available with `open` are visible within the current `section` or `namespace`\nblock. This makes referring to (type) definitions and theorems easier, but note that it can also\nmake [scoped instances], notations, and attributes from a different namespace available.\n\nThe `open` command can be used in a few different ways:\n\n* `open Some.Namespace.Path1 Some.Namespace.Path2` makes all non-protected names in\n  `Some.Namespace.Path1` and `Some.Namespace.Path2` available without the prefix, so that\n  `Some.Namespace.Path1.x` and `Some.Namespace.Path2.y` can be referred to by writing only `x` and\n  `y`.\n\n* `open Some.Namespace.Path hiding def1 def2` opens all non-protected names in `Some.Namespace.Path`\n  except `def1` and `def2`.\n\n* `open Some.Namespace.Path (def1 def2)` only makes `Some.Namespace.Path.def1` and\n  `Some.Namespace.Path.def2` available without the full prefix, so `Some.Namespace.Path.def3` would\n  be unaffected.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open Some.Namespace.Path renaming def1 → def1', def2 → def2'` same as `open Some.Namespace.Path\n  (def1 def2)` but `def1`/`def2`'s names are changed to `def1'`/`def2'`.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open scoped Some.Namespace.Path1 Some.Namespace.Path2` **only** opens [scoped instances],\n  notations, and attributes from `Namespace1` and `Namespace2`; it does **not** make any other name\n  available.\n\n* `open <any of the open shapes above> in` makes the names `open`-ed visible only in the next\n  command or expression.\n\n[scoped instance]: https://lean-lang.org/theorem_proving_in_lean4/type_classes.html#scoped-instances\n(Scoped instances in Theorem Proving in Lean)\n\n\n## Examples\n\n```lean\n/-- SKI combinators https://en.wikipedia.org/wiki/SKI_combinator_calculus -/\nnamespace Combinator.Calculus\n  def I (a : α) : α := a\n  def K (a : α) : β → α := fun _ => a\n  def S (x : α → β → γ) (y : α → β) (z : α) : γ := x z (y z)\nend Combinator.Calculus\n\nsection\n  -- open everything under `Combinator.Calculus`, *i.e.* `I`, `K` and `S`,\n  -- until the section ends\n  open Combinator.Calculus\n\n  theorem SKx_eq_K : S K x = I := rfl\nend\n\n-- open everything under `Combinator.Calculus` only for the next command (the next `theorem`, here)\nopen Combinator.Calculus in\ntheorem SKx_eq_K' : S K x = I := rfl\n\nsection\n  -- open only `S` and `K` under `Combinator.Calculus`\n  open Combinator.Calculus (S K)\n\n  theorem SKxy_eq_y : S K x y = y := rfl\n\n  -- `I` is not in scope, we have to use its full path\n  theorem SKxy_eq_Iy : S K x y = Combinator.Calculus.I y := rfl\nend\n\nsection\n  open Combinator.Calculus\n    renaming\n      I → identity,\n      K → konstant\n\n  #check identity\n  #check konstant\nend\n\nsection\n  open Combinator.Calculus\n    hiding S\n\n  #check I\n  #check K\nend\n\nsection\n  namespace Demo\n    inductive MyType\n    | val\n\n    namespace N1\n      scoped infix:68 \" ≋ \" => BEq.beq\n\n      scoped instance : BEq MyType where\n        beq _ _ := true\n\n      def Alias := MyType\n    end N1\n  end Demo\n\n  -- bring `≋` and the instance in scope, but not `Alias`\n  open scoped Demo.N1\n\n  #check Demo.MyType.val == Demo.MyType.val\n  #check Demo.MyType.val ≋ Demo.MyType.val\n  -- #check Alias -- unknown identifier 'Alias'\nend\n```\n", "kind": "markdown"}}
{"character": "e", "row": 1, "column": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 8}}, "contents": {"value": "Makes names from other namespaces visible without writing the namespace prefix.\n\nNames that are made available with `open` are visible within the current `section` or `namespace`\nblock. This makes referring to (type) definitions and theorems easier, but note that it can also\nmake [scoped instances], notations, and attributes from a different namespace available.\n\nThe `open` command can be used in a few different ways:\n\n* `open Some.Namespace.Path1 Some.Namespace.Path2` makes all non-protected names in\n  `Some.Namespace.Path1` and `Some.Namespace.Path2` available without the prefix, so that\n  `Some.Namespace.Path1.x` and `Some.Namespace.Path2.y` can be referred to by writing only `x` and\n  `y`.\n\n* `open Some.Namespace.Path hiding def1 def2` opens all non-protected names in `Some.Namespace.Path`\n  except `def1` and `def2`.\n\n* `open Some.Namespace.Path (def1 def2)` only makes `Some.Namespace.Path.def1` and\n  `Some.Namespace.Path.def2` available without the full prefix, so `Some.Namespace.Path.def3` would\n  be unaffected.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open Some.Namespace.Path renaming def1 → def1', def2 → def2'` same as `open Some.Namespace.Path\n  (def1 def2)` but `def1`/`def2`'s names are changed to `def1'`/`def2'`.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open scoped Some.Namespace.Path1 Some.Namespace.Path2` **only** opens [scoped instances],\n  notations, and attributes from `Namespace1` and `Namespace2`; it does **not** make any other name\n  available.\n\n* `open <any of the open shapes above> in` makes the names `open`-ed visible only in the next\n  command or expression.\n\n[scoped instance]: https://lean-lang.org/theorem_proving_in_lean4/type_classes.html#scoped-instances\n(Scoped instances in Theorem Proving in Lean)\n\n\n## Examples\n\n```lean\n/-- SKI combinators https://en.wikipedia.org/wiki/SKI_combinator_calculus -/\nnamespace Combinator.Calculus\n  def I (a : α) : α := a\n  def K (a : α) : β → α := fun _ => a\n  def S (x : α → β → γ) (y : α → β) (z : α) : γ := x z (y z)\nend Combinator.Calculus\n\nsection\n  -- open everything under `Combinator.Calculus`, *i.e.* `I`, `K` and `S`,\n  -- until the section ends\n  open Combinator.Calculus\n\n  theorem SKx_eq_K : S K x = I := rfl\nend\n\n-- open everything under `Combinator.Calculus` only for the next command (the next `theorem`, here)\nopen Combinator.Calculus in\ntheorem SKx_eq_K' : S K x = I := rfl\n\nsection\n  -- open only `S` and `K` under `Combinator.Calculus`\n  open Combinator.Calculus (S K)\n\n  theorem SKxy_eq_y : S K x y = y := rfl\n\n  -- `I` is not in scope, we have to use its full path\n  theorem SKxy_eq_Iy : S K x y = Combinator.Calculus.I y := rfl\nend\n\nsection\n  open Combinator.Calculus\n    renaming\n      I → identity,\n      K → konstant\n\n  #check identity\n  #check konstant\nend\n\nsection\n  open Combinator.Calculus\n    hiding S\n\n  #check I\n  #check K\nend\n\nsection\n  namespace Demo\n    inductive MyType\n    | val\n\n    namespace N1\n      scoped infix:68 \" ≋ \" => BEq.beq\n\n      scoped instance : BEq MyType where\n        beq _ _ := true\n\n      def Alias := MyType\n    end N1\n  end Demo\n\n  -- bring `≋` and the instance in scope, but not `Alias`\n  open scoped Demo.N1\n\n  #check Demo.MyType.val == Demo.MyType.val\n  #check Demo.MyType.val ≋ Demo.MyType.val\n  -- #check Alias -- unknown identifier 'Alias'\nend\n```\n", "kind": "markdown"}}
{"character": "n", "row": 1, "column": 3, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 8}}, "contents": {"value": "Makes names from other namespaces visible without writing the namespace prefix.\n\nNames that are made available with `open` are visible within the current `section` or `namespace`\nblock. This makes referring to (type) definitions and theorems easier, but note that it can also\nmake [scoped instances], notations, and attributes from a different namespace available.\n\nThe `open` command can be used in a few different ways:\n\n* `open Some.Namespace.Path1 Some.Namespace.Path2` makes all non-protected names in\n  `Some.Namespace.Path1` and `Some.Namespace.Path2` available without the prefix, so that\n  `Some.Namespace.Path1.x` and `Some.Namespace.Path2.y` can be referred to by writing only `x` and\n  `y`.\n\n* `open Some.Namespace.Path hiding def1 def2` opens all non-protected names in `Some.Namespace.Path`\n  except `def1` and `def2`.\n\n* `open Some.Namespace.Path (def1 def2)` only makes `Some.Namespace.Path.def1` and\n  `Some.Namespace.Path.def2` available without the full prefix, so `Some.Namespace.Path.def3` would\n  be unaffected.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open Some.Namespace.Path renaming def1 → def1', def2 → def2'` same as `open Some.Namespace.Path\n  (def1 def2)` but `def1`/`def2`'s names are changed to `def1'`/`def2'`.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open scoped Some.Namespace.Path1 Some.Namespace.Path2` **only** opens [scoped instances],\n  notations, and attributes from `Namespace1` and `Namespace2`; it does **not** make any other name\n  available.\n\n* `open <any of the open shapes above> in` makes the names `open`-ed visible only in the next\n  command or expression.\n\n[scoped instance]: https://lean-lang.org/theorem_proving_in_lean4/type_classes.html#scoped-instances\n(Scoped instances in Theorem Proving in Lean)\n\n\n## Examples\n\n```lean\n/-- SKI combinators https://en.wikipedia.org/wiki/SKI_combinator_calculus -/\nnamespace Combinator.Calculus\n  def I (a : α) : α := a\n  def K (a : α) : β → α := fun _ => a\n  def S (x : α → β → γ) (y : α → β) (z : α) : γ := x z (y z)\nend Combinator.Calculus\n\nsection\n  -- open everything under `Combinator.Calculus`, *i.e.* `I`, `K` and `S`,\n  -- until the section ends\n  open Combinator.Calculus\n\n  theorem SKx_eq_K : S K x = I := rfl\nend\n\n-- open everything under `Combinator.Calculus` only for the next command (the next `theorem`, here)\nopen Combinator.Calculus in\ntheorem SKx_eq_K' : S K x = I := rfl\n\nsection\n  -- open only `S` and `K` under `Combinator.Calculus`\n  open Combinator.Calculus (S K)\n\n  theorem SKxy_eq_y : S K x y = y := rfl\n\n  -- `I` is not in scope, we have to use its full path\n  theorem SKxy_eq_Iy : S K x y = Combinator.Calculus.I y := rfl\nend\n\nsection\n  open Combinator.Calculus\n    renaming\n      I → identity,\n      K → konstant\n\n  #check identity\n  #check konstant\nend\n\nsection\n  open Combinator.Calculus\n    hiding S\n\n  #check I\n  #check K\nend\n\nsection\n  namespace Demo\n    inductive MyType\n    | val\n\n    namespace N1\n      scoped infix:68 \" ≋ \" => BEq.beq\n\n      scoped instance : BEq MyType where\n        beq _ _ := true\n\n      def Alias := MyType\n    end N1\n  end Demo\n\n  -- bring `≋` and the instance in scope, but not `Alias`\n  open scoped Demo.N1\n\n  #check Demo.MyType.val == Demo.MyType.val\n  #check Demo.MyType.val ≋ Demo.MyType.val\n  -- #check Alias -- unknown identifier 'Alias'\nend\n```\n", "kind": "markdown"}}
{"character": " ", "row": 1, "column": 4, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 8}}, "contents": {"value": "Makes names from other namespaces visible without writing the namespace prefix.\n\nNames that are made available with `open` are visible within the current `section` or `namespace`\nblock. This makes referring to (type) definitions and theorems easier, but note that it can also\nmake [scoped instances], notations, and attributes from a different namespace available.\n\nThe `open` command can be used in a few different ways:\n\n* `open Some.Namespace.Path1 Some.Namespace.Path2` makes all non-protected names in\n  `Some.Namespace.Path1` and `Some.Namespace.Path2` available without the prefix, so that\n  `Some.Namespace.Path1.x` and `Some.Namespace.Path2.y` can be referred to by writing only `x` and\n  `y`.\n\n* `open Some.Namespace.Path hiding def1 def2` opens all non-protected names in `Some.Namespace.Path`\n  except `def1` and `def2`.\n\n* `open Some.Namespace.Path (def1 def2)` only makes `Some.Namespace.Path.def1` and\n  `Some.Namespace.Path.def2` available without the full prefix, so `Some.Namespace.Path.def3` would\n  be unaffected.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open Some.Namespace.Path renaming def1 → def1', def2 → def2'` same as `open Some.Namespace.Path\n  (def1 def2)` but `def1`/`def2`'s names are changed to `def1'`/`def2'`.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open scoped Some.Namespace.Path1 Some.Namespace.Path2` **only** opens [scoped instances],\n  notations, and attributes from `Namespace1` and `Namespace2`; it does **not** make any other name\n  available.\n\n* `open <any of the open shapes above> in` makes the names `open`-ed visible only in the next\n  command or expression.\n\n[scoped instance]: https://lean-lang.org/theorem_proving_in_lean4/type_classes.html#scoped-instances\n(Scoped instances in Theorem Proving in Lean)\n\n\n## Examples\n\n```lean\n/-- SKI combinators https://en.wikipedia.org/wiki/SKI_combinator_calculus -/\nnamespace Combinator.Calculus\n  def I (a : α) : α := a\n  def K (a : α) : β → α := fun _ => a\n  def S (x : α → β → γ) (y : α → β) (z : α) : γ := x z (y z)\nend Combinator.Calculus\n\nsection\n  -- open everything under `Combinator.Calculus`, *i.e.* `I`, `K` and `S`,\n  -- until the section ends\n  open Combinator.Calculus\n\n  theorem SKx_eq_K : S K x = I := rfl\nend\n\n-- open everything under `Combinator.Calculus` only for the next command (the next `theorem`, here)\nopen Combinator.Calculus in\ntheorem SKx_eq_K' : S K x = I := rfl\n\nsection\n  -- open only `S` and `K` under `Combinator.Calculus`\n  open Combinator.Calculus (S K)\n\n  theorem SKxy_eq_y : S K x y = y := rfl\n\n  -- `I` is not in scope, we have to use its full path\n  theorem SKxy_eq_Iy : S K x y = Combinator.Calculus.I y := rfl\nend\n\nsection\n  open Combinator.Calculus\n    renaming\n      I → identity,\n      K → konstant\n\n  #check identity\n  #check konstant\nend\n\nsection\n  open Combinator.Calculus\n    hiding S\n\n  #check I\n  #check K\nend\n\nsection\n  namespace Demo\n    inductive MyType\n    | val\n\n    namespace N1\n      scoped infix:68 \" ≋ \" => BEq.beq\n\n      scoped instance : BEq MyType where\n        beq _ _ := true\n\n      def Alias := MyType\n    end N1\n  end Demo\n\n  -- bring `≋` and the instance in scope, but not `Alias`\n  open scoped Demo.N1\n\n  #check Demo.MyType.val == Demo.MyType.val\n  #check Demo.MyType.val ≋ Demo.MyType.val\n  -- #check Alias -- unknown identifier 'Alias'\nend\n```\n", "kind": "markdown"}}
{"character": "N", "row": 1, "column": 5, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 8}}, "contents": {"value": "Makes names from other namespaces visible without writing the namespace prefix.\n\nNames that are made available with `open` are visible within the current `section` or `namespace`\nblock. This makes referring to (type) definitions and theorems easier, but note that it can also\nmake [scoped instances], notations, and attributes from a different namespace available.\n\nThe `open` command can be used in a few different ways:\n\n* `open Some.Namespace.Path1 Some.Namespace.Path2` makes all non-protected names in\n  `Some.Namespace.Path1` and `Some.Namespace.Path2` available without the prefix, so that\n  `Some.Namespace.Path1.x` and `Some.Namespace.Path2.y` can be referred to by writing only `x` and\n  `y`.\n\n* `open Some.Namespace.Path hiding def1 def2` opens all non-protected names in `Some.Namespace.Path`\n  except `def1` and `def2`.\n\n* `open Some.Namespace.Path (def1 def2)` only makes `Some.Namespace.Path.def1` and\n  `Some.Namespace.Path.def2` available without the full prefix, so `Some.Namespace.Path.def3` would\n  be unaffected.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open Some.Namespace.Path renaming def1 → def1', def2 → def2'` same as `open Some.Namespace.Path\n  (def1 def2)` but `def1`/`def2`'s names are changed to `def1'`/`def2'`.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open scoped Some.Namespace.Path1 Some.Namespace.Path2` **only** opens [scoped instances],\n  notations, and attributes from `Namespace1` and `Namespace2`; it does **not** make any other name\n  available.\n\n* `open <any of the open shapes above> in` makes the names `open`-ed visible only in the next\n  command or expression.\n\n[scoped instance]: https://lean-lang.org/theorem_proving_in_lean4/type_classes.html#scoped-instances\n(Scoped instances in Theorem Proving in Lean)\n\n\n## Examples\n\n```lean\n/-- SKI combinators https://en.wikipedia.org/wiki/SKI_combinator_calculus -/\nnamespace Combinator.Calculus\n  def I (a : α) : α := a\n  def K (a : α) : β → α := fun _ => a\n  def S (x : α → β → γ) (y : α → β) (z : α) : γ := x z (y z)\nend Combinator.Calculus\n\nsection\n  -- open everything under `Combinator.Calculus`, *i.e.* `I`, `K` and `S`,\n  -- until the section ends\n  open Combinator.Calculus\n\n  theorem SKx_eq_K : S K x = I := rfl\nend\n\n-- open everything under `Combinator.Calculus` only for the next command (the next `theorem`, here)\nopen Combinator.Calculus in\ntheorem SKx_eq_K' : S K x = I := rfl\n\nsection\n  -- open only `S` and `K` under `Combinator.Calculus`\n  open Combinator.Calculus (S K)\n\n  theorem SKxy_eq_y : S K x y = y := rfl\n\n  -- `I` is not in scope, we have to use its full path\n  theorem SKxy_eq_Iy : S K x y = Combinator.Calculus.I y := rfl\nend\n\nsection\n  open Combinator.Calculus\n    renaming\n      I → identity,\n      K → konstant\n\n  #check identity\n  #check konstant\nend\n\nsection\n  open Combinator.Calculus\n    hiding S\n\n  #check I\n  #check K\nend\n\nsection\n  namespace Demo\n    inductive MyType\n    | val\n\n    namespace N1\n      scoped infix:68 \" ≋ \" => BEq.beq\n\n      scoped instance : BEq MyType where\n        beq _ _ := true\n\n      def Alias := MyType\n    end N1\n  end Demo\n\n  -- bring `≋` and the instance in scope, but not `Alias`\n  open scoped Demo.N1\n\n  #check Demo.MyType.val == Demo.MyType.val\n  #check Demo.MyType.val ≋ Demo.MyType.val\n  -- #check Alias -- unknown identifier 'Alias'\nend\n```\n", "kind": "markdown"}}
{"character": "a", "row": 1, "column": 6, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 8}}, "contents": {"value": "Makes names from other namespaces visible without writing the namespace prefix.\n\nNames that are made available with `open` are visible within the current `section` or `namespace`\nblock. This makes referring to (type) definitions and theorems easier, but note that it can also\nmake [scoped instances], notations, and attributes from a different namespace available.\n\nThe `open` command can be used in a few different ways:\n\n* `open Some.Namespace.Path1 Some.Namespace.Path2` makes all non-protected names in\n  `Some.Namespace.Path1` and `Some.Namespace.Path2` available without the prefix, so that\n  `Some.Namespace.Path1.x` and `Some.Namespace.Path2.y` can be referred to by writing only `x` and\n  `y`.\n\n* `open Some.Namespace.Path hiding def1 def2` opens all non-protected names in `Some.Namespace.Path`\n  except `def1` and `def2`.\n\n* `open Some.Namespace.Path (def1 def2)` only makes `Some.Namespace.Path.def1` and\n  `Some.Namespace.Path.def2` available without the full prefix, so `Some.Namespace.Path.def3` would\n  be unaffected.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open Some.Namespace.Path renaming def1 → def1', def2 → def2'` same as `open Some.Namespace.Path\n  (def1 def2)` but `def1`/`def2`'s names are changed to `def1'`/`def2'`.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open scoped Some.Namespace.Path1 Some.Namespace.Path2` **only** opens [scoped instances],\n  notations, and attributes from `Namespace1` and `Namespace2`; it does **not** make any other name\n  available.\n\n* `open <any of the open shapes above> in` makes the names `open`-ed visible only in the next\n  command or expression.\n\n[scoped instance]: https://lean-lang.org/theorem_proving_in_lean4/type_classes.html#scoped-instances\n(Scoped instances in Theorem Proving in Lean)\n\n\n## Examples\n\n```lean\n/-- SKI combinators https://en.wikipedia.org/wiki/SKI_combinator_calculus -/\nnamespace Combinator.Calculus\n  def I (a : α) : α := a\n  def K (a : α) : β → α := fun _ => a\n  def S (x : α → β → γ) (y : α → β) (z : α) : γ := x z (y z)\nend Combinator.Calculus\n\nsection\n  -- open everything under `Combinator.Calculus`, *i.e.* `I`, `K` and `S`,\n  -- until the section ends\n  open Combinator.Calculus\n\n  theorem SKx_eq_K : S K x = I := rfl\nend\n\n-- open everything under `Combinator.Calculus` only for the next command (the next `theorem`, here)\nopen Combinator.Calculus in\ntheorem SKx_eq_K' : S K x = I := rfl\n\nsection\n  -- open only `S` and `K` under `Combinator.Calculus`\n  open Combinator.Calculus (S K)\n\n  theorem SKxy_eq_y : S K x y = y := rfl\n\n  -- `I` is not in scope, we have to use its full path\n  theorem SKxy_eq_Iy : S K x y = Combinator.Calculus.I y := rfl\nend\n\nsection\n  open Combinator.Calculus\n    renaming\n      I → identity,\n      K → konstant\n\n  #check identity\n  #check konstant\nend\n\nsection\n  open Combinator.Calculus\n    hiding S\n\n  #check I\n  #check K\nend\n\nsection\n  namespace Demo\n    inductive MyType\n    | val\n\n    namespace N1\n      scoped infix:68 \" ≋ \" => BEq.beq\n\n      scoped instance : BEq MyType where\n        beq _ _ := true\n\n      def Alias := MyType\n    end N1\n  end Demo\n\n  -- bring `≋` and the instance in scope, but not `Alias`\n  open scoped Demo.N1\n\n  #check Demo.MyType.val == Demo.MyType.val\n  #check Demo.MyType.val ≋ Demo.MyType.val\n  -- #check Alias -- unknown identifier 'Alias'\nend\n```\n", "kind": "markdown"}}
{"character": "t", "row": 1, "column": 7, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 8}}, "contents": {"value": "Makes names from other namespaces visible without writing the namespace prefix.\n\nNames that are made available with `open` are visible within the current `section` or `namespace`\nblock. This makes referring to (type) definitions and theorems easier, but note that it can also\nmake [scoped instances], notations, and attributes from a different namespace available.\n\nThe `open` command can be used in a few different ways:\n\n* `open Some.Namespace.Path1 Some.Namespace.Path2` makes all non-protected names in\n  `Some.Namespace.Path1` and `Some.Namespace.Path2` available without the prefix, so that\n  `Some.Namespace.Path1.x` and `Some.Namespace.Path2.y` can be referred to by writing only `x` and\n  `y`.\n\n* `open Some.Namespace.Path hiding def1 def2` opens all non-protected names in `Some.Namespace.Path`\n  except `def1` and `def2`.\n\n* `open Some.Namespace.Path (def1 def2)` only makes `Some.Namespace.Path.def1` and\n  `Some.Namespace.Path.def2` available without the full prefix, so `Some.Namespace.Path.def3` would\n  be unaffected.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open Some.Namespace.Path renaming def1 → def1', def2 → def2'` same as `open Some.Namespace.Path\n  (def1 def2)` but `def1`/`def2`'s names are changed to `def1'`/`def2'`.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open scoped Some.Namespace.Path1 Some.Namespace.Path2` **only** opens [scoped instances],\n  notations, and attributes from `Namespace1` and `Namespace2`; it does **not** make any other name\n  available.\n\n* `open <any of the open shapes above> in` makes the names `open`-ed visible only in the next\n  command or expression.\n\n[scoped instance]: https://lean-lang.org/theorem_proving_in_lean4/type_classes.html#scoped-instances\n(Scoped instances in Theorem Proving in Lean)\n\n\n## Examples\n\n```lean\n/-- SKI combinators https://en.wikipedia.org/wiki/SKI_combinator_calculus -/\nnamespace Combinator.Calculus\n  def I (a : α) : α := a\n  def K (a : α) : β → α := fun _ => a\n  def S (x : α → β → γ) (y : α → β) (z : α) : γ := x z (y z)\nend Combinator.Calculus\n\nsection\n  -- open everything under `Combinator.Calculus`, *i.e.* `I`, `K` and `S`,\n  -- until the section ends\n  open Combinator.Calculus\n\n  theorem SKx_eq_K : S K x = I := rfl\nend\n\n-- open everything under `Combinator.Calculus` only for the next command (the next `theorem`, here)\nopen Combinator.Calculus in\ntheorem SKx_eq_K' : S K x = I := rfl\n\nsection\n  -- open only `S` and `K` under `Combinator.Calculus`\n  open Combinator.Calculus (S K)\n\n  theorem SKxy_eq_y : S K x y = y := rfl\n\n  -- `I` is not in scope, we have to use its full path\n  theorem SKxy_eq_Iy : S K x y = Combinator.Calculus.I y := rfl\nend\n\nsection\n  open Combinator.Calculus\n    renaming\n      I → identity,\n      K → konstant\n\n  #check identity\n  #check konstant\nend\n\nsection\n  open Combinator.Calculus\n    hiding S\n\n  #check I\n  #check K\nend\n\nsection\n  namespace Demo\n    inductive MyType\n    | val\n\n    namespace N1\n      scoped infix:68 \" ≋ \" => BEq.beq\n\n      scoped instance : BEq MyType where\n        beq _ _ := true\n\n      def Alias := MyType\n    end N1\n  end Demo\n\n  -- bring `≋` and the instance in scope, but not `Alias`\n  open scoped Demo.N1\n\n  #check Demo.MyType.val == Demo.MyType.val\n  #check Demo.MyType.val ≋ Demo.MyType.val\n  -- #check Alias -- unknown identifier 'Alias'\nend\n```\n", "kind": "markdown"}}
{"character": "t", "row": 2, "column": 0}
{"character": "h", "row": 2, "column": 1}
{"character": "e", "row": 2, "column": 2}
{"character": "o", "row": 2, "column": 3}
{"character": "r", "row": 2, "column": 4}
{"character": "e", "row": 2, "column": 5}
{"character": "m", "row": 2, "column": 6}
{"character": " ", "row": 2, "column": 7}
{"character": "c", "row": 2, "column": 8, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 47}}, "contents": {"value": "```lean\ncoprime_two_pow_add_one_two_pow_add_one {a : ℤ} (ha : a ≠ 0) {m n : ℕ} (h : m < n) :\n  (a ^ 2 ^ n + 1).gcd (a ^ 2 ^ m + 1) = if Even a then 2 else 1\n```", "kind": "markdown"}}
{"character": "o", "row": 2, "column": 9, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 47}}, "contents": {"value": "```lean\ncoprime_two_pow_add_one_two_pow_add_one {a : ℤ} (ha : a ≠ 0) {m n : ℕ} (h : m < n) :\n  (a ^ 2 ^ n + 1).gcd (a ^ 2 ^ m + 1) = if Even a then 2 else 1\n```", "kind": "markdown"}}
{"character": "p", "row": 2, "column": 10, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 47}}, "contents": {"value": "```lean\ncoprime_two_pow_add_one_two_pow_add_one {a : ℤ} (ha : a ≠ 0) {m n : ℕ} (h : m < n) :\n  (a ^ 2 ^ n + 1).gcd (a ^ 2 ^ m + 1) = if Even a then 2 else 1\n```", "kind": "markdown"}}
{"character": "r", "row": 2, "column": 11, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 47}}, "contents": {"value": "```lean\ncoprime_two_pow_add_one_two_pow_add_one {a : ℤ} (ha : a ≠ 0) {m n : ℕ} (h : m < n) :\n  (a ^ 2 ^ n + 1).gcd (a ^ 2 ^ m + 1) = if Even a then 2 else 1\n```", "kind": "markdown"}}
{"character": "i", "row": 2, "column": 12, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 47}}, "contents": {"value": "```lean\ncoprime_two_pow_add_one_two_pow_add_one {a : ℤ} (ha : a ≠ 0) {m n : ℕ} (h : m < n) :\n  (a ^ 2 ^ n + 1).gcd (a ^ 2 ^ m + 1) = if Even a then 2 else 1\n```", "kind": "markdown"}}
{"character": "m", "row": 2, "column": 13, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 47}}, "contents": {"value": "```lean\ncoprime_two_pow_add_one_two_pow_add_one {a : ℤ} (ha : a ≠ 0) {m n : ℕ} (h : m < n) :\n  (a ^ 2 ^ n + 1).gcd (a ^ 2 ^ m + 1) = if Even a then 2 else 1\n```", "kind": "markdown"}}
{"character": "e", "row": 2, "column": 14, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 47}}, "contents": {"value": "```lean\ncoprime_two_pow_add_one_two_pow_add_one {a : ℤ} (ha : a ≠ 0) {m n : ℕ} (h : m < n) :\n  (a ^ 2 ^ n + 1).gcd (a ^ 2 ^ m + 1) = if Even a then 2 else 1\n```", "kind": "markdown"}}
{"character": "_", "row": 2, "column": 15, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 47}}, "contents": {"value": "```lean\ncoprime_two_pow_add_one_two_pow_add_one {a : ℤ} (ha : a ≠ 0) {m n : ℕ} (h : m < n) :\n  (a ^ 2 ^ n + 1).gcd (a ^ 2 ^ m + 1) = if Even a then 2 else 1\n```", "kind": "markdown"}}
{"character": "t", "row": 2, "column": 16, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 47}}, "contents": {"value": "```lean\ncoprime_two_pow_add_one_two_pow_add_one {a : ℤ} (ha : a ≠ 0) {m n : ℕ} (h : m < n) :\n  (a ^ 2 ^ n + 1).gcd (a ^ 2 ^ m + 1) = if Even a then 2 else 1\n```", "kind": "markdown"}}
{"character": "w", "row": 2, "column": 17, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 47}}, "contents": {"value": "```lean\ncoprime_two_pow_add_one_two_pow_add_one {a : ℤ} (ha : a ≠ 0) {m n : ℕ} (h : m < n) :\n  (a ^ 2 ^ n + 1).gcd (a ^ 2 ^ m + 1) = if Even a then 2 else 1\n```", "kind": "markdown"}}
{"character": "o", "row": 2, "column": 18, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 47}}, "contents": {"value": "```lean\ncoprime_two_pow_add_one_two_pow_add_one {a : ℤ} (ha : a ≠ 0) {m n : ℕ} (h : m < n) :\n  (a ^ 2 ^ n + 1).gcd (a ^ 2 ^ m + 1) = if Even a then 2 else 1\n```", "kind": "markdown"}}
{"character": "_", "row": 2, "column": 19, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 47}}, "contents": {"value": "```lean\ncoprime_two_pow_add_one_two_pow_add_one {a : ℤ} (ha : a ≠ 0) {m n : ℕ} (h : m < n) :\n  (a ^ 2 ^ n + 1).gcd (a ^ 2 ^ m + 1) = if Even a then 2 else 1\n```", "kind": "markdown"}}
{"character": "p", "row": 2, "column": 20, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 47}}, "contents": {"value": "```lean\ncoprime_two_pow_add_one_two_pow_add_one {a : ℤ} (ha : a ≠ 0) {m n : ℕ} (h : m < n) :\n  (a ^ 2 ^ n + 1).gcd (a ^ 2 ^ m + 1) = if Even a then 2 else 1\n```", "kind": "markdown"}}
{"character": "o", "row": 2, "column": 21, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 47}}, "contents": {"value": "```lean\ncoprime_two_pow_add_one_two_pow_add_one {a : ℤ} (ha : a ≠ 0) {m n : ℕ} (h : m < n) :\n  (a ^ 2 ^ n + 1).gcd (a ^ 2 ^ m + 1) = if Even a then 2 else 1\n```", "kind": "markdown"}}
{"character": "w", "row": 2, "column": 22, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 47}}, "contents": {"value": "```lean\ncoprime_two_pow_add_one_two_pow_add_one {a : ℤ} (ha : a ≠ 0) {m n : ℕ} (h : m < n) :\n  (a ^ 2 ^ n + 1).gcd (a ^ 2 ^ m + 1) = if Even a then 2 else 1\n```", "kind": "markdown"}}
{"character": "_", "row": 2, "column": 23, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 47}}, "contents": {"value": "```lean\ncoprime_two_pow_add_one_two_pow_add_one {a : ℤ} (ha : a ≠ 0) {m n : ℕ} (h : m < n) :\n  (a ^ 2 ^ n + 1).gcd (a ^ 2 ^ m + 1) = if Even a then 2 else 1\n```", "kind": "markdown"}}
{"character": "a", "row": 2, "column": 24, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 47}}, "contents": {"value": "```lean\ncoprime_two_pow_add_one_two_pow_add_one {a : ℤ} (ha : a ≠ 0) {m n : ℕ} (h : m < n) :\n  (a ^ 2 ^ n + 1).gcd (a ^ 2 ^ m + 1) = if Even a then 2 else 1\n```", "kind": "markdown"}}
{"character": "d", "row": 2, "column": 25, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 47}}, "contents": {"value": "```lean\ncoprime_two_pow_add_one_two_pow_add_one {a : ℤ} (ha : a ≠ 0) {m n : ℕ} (h : m < n) :\n  (a ^ 2 ^ n + 1).gcd (a ^ 2 ^ m + 1) = if Even a then 2 else 1\n```", "kind": "markdown"}}
{"character": "d", "row": 2, "column": 26, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 47}}, "contents": {"value": "```lean\ncoprime_two_pow_add_one_two_pow_add_one {a : ℤ} (ha : a ≠ 0) {m n : ℕ} (h : m < n) :\n  (a ^ 2 ^ n + 1).gcd (a ^ 2 ^ m + 1) = if Even a then 2 else 1\n```", "kind": "markdown"}}
{"character": "_", "row": 2, "column": 27, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 47}}, "contents": {"value": "```lean\ncoprime_two_pow_add_one_two_pow_add_one {a : ℤ} (ha : a ≠ 0) {m n : ℕ} (h : m < n) :\n  (a ^ 2 ^ n + 1).gcd (a ^ 2 ^ m + 1) = if Even a then 2 else 1\n```", "kind": "markdown"}}
{"character": "o", "row": 2, "column": 28, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 47}}, "contents": {"value": "```lean\ncoprime_two_pow_add_one_two_pow_add_one {a : ℤ} (ha : a ≠ 0) {m n : ℕ} (h : m < n) :\n  (a ^ 2 ^ n + 1).gcd (a ^ 2 ^ m + 1) = if Even a then 2 else 1\n```", "kind": "markdown"}}
{"character": "n", "row": 2, "column": 29, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 47}}, "contents": {"value": "```lean\ncoprime_two_pow_add_one_two_pow_add_one {a : ℤ} (ha : a ≠ 0) {m n : ℕ} (h : m < n) :\n  (a ^ 2 ^ n + 1).gcd (a ^ 2 ^ m + 1) = if Even a then 2 else 1\n```", "kind": "markdown"}}
{"character": "e", "row": 2, "column": 30, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 47}}, "contents": {"value": "```lean\ncoprime_two_pow_add_one_two_pow_add_one {a : ℤ} (ha : a ≠ 0) {m n : ℕ} (h : m < n) :\n  (a ^ 2 ^ n + 1).gcd (a ^ 2 ^ m + 1) = if Even a then 2 else 1\n```", "kind": "markdown"}}
{"character": "_", "row": 2, "column": 31, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 47}}, "contents": {"value": "```lean\ncoprime_two_pow_add_one_two_pow_add_one {a : ℤ} (ha : a ≠ 0) {m n : ℕ} (h : m < n) :\n  (a ^ 2 ^ n + 1).gcd (a ^ 2 ^ m + 1) = if Even a then 2 else 1\n```", "kind": "markdown"}}
{"character": "t", "row": 2, "column": 32, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 47}}, "contents": {"value": "```lean\ncoprime_two_pow_add_one_two_pow_add_one {a : ℤ} (ha : a ≠ 0) {m n : ℕ} (h : m < n) :\n  (a ^ 2 ^ n + 1).gcd (a ^ 2 ^ m + 1) = if Even a then 2 else 1\n```", "kind": "markdown"}}
{"character": "w", "row": 2, "column": 33, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 47}}, "contents": {"value": "```lean\ncoprime_two_pow_add_one_two_pow_add_one {a : ℤ} (ha : a ≠ 0) {m n : ℕ} (h : m < n) :\n  (a ^ 2 ^ n + 1).gcd (a ^ 2 ^ m + 1) = if Even a then 2 else 1\n```", "kind": "markdown"}}
{"character": "o", "row": 2, "column": 34, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 47}}, "contents": {"value": "```lean\ncoprime_two_pow_add_one_two_pow_add_one {a : ℤ} (ha : a ≠ 0) {m n : ℕ} (h : m < n) :\n  (a ^ 2 ^ n + 1).gcd (a ^ 2 ^ m + 1) = if Even a then 2 else 1\n```", "kind": "markdown"}}
{"character": "_", "row": 2, "column": 35, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 47}}, "contents": {"value": "```lean\ncoprime_two_pow_add_one_two_pow_add_one {a : ℤ} (ha : a ≠ 0) {m n : ℕ} (h : m < n) :\n  (a ^ 2 ^ n + 1).gcd (a ^ 2 ^ m + 1) = if Even a then 2 else 1\n```", "kind": "markdown"}}
{"character": "p", "row": 2, "column": 36, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 47}}, "contents": {"value": "```lean\ncoprime_two_pow_add_one_two_pow_add_one {a : ℤ} (ha : a ≠ 0) {m n : ℕ} (h : m < n) :\n  (a ^ 2 ^ n + 1).gcd (a ^ 2 ^ m + 1) = if Even a then 2 else 1\n```", "kind": "markdown"}}
{"character": "o", "row": 2, "column": 37, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 47}}, "contents": {"value": "```lean\ncoprime_two_pow_add_one_two_pow_add_one {a : ℤ} (ha : a ≠ 0) {m n : ℕ} (h : m < n) :\n  (a ^ 2 ^ n + 1).gcd (a ^ 2 ^ m + 1) = if Even a then 2 else 1\n```", "kind": "markdown"}}
{"character": "w", "row": 2, "column": 38, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 47}}, "contents": {"value": "```lean\ncoprime_two_pow_add_one_two_pow_add_one {a : ℤ} (ha : a ≠ 0) {m n : ℕ} (h : m < n) :\n  (a ^ 2 ^ n + 1).gcd (a ^ 2 ^ m + 1) = if Even a then 2 else 1\n```", "kind": "markdown"}}
{"character": "_", "row": 2, "column": 39, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 47}}, "contents": {"value": "```lean\ncoprime_two_pow_add_one_two_pow_add_one {a : ℤ} (ha : a ≠ 0) {m n : ℕ} (h : m < n) :\n  (a ^ 2 ^ n + 1).gcd (a ^ 2 ^ m + 1) = if Even a then 2 else 1\n```", "kind": "markdown"}}
{"character": "a", "row": 2, "column": 40, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 47}}, "contents": {"value": "```lean\ncoprime_two_pow_add_one_two_pow_add_one {a : ℤ} (ha : a ≠ 0) {m n : ℕ} (h : m < n) :\n  (a ^ 2 ^ n + 1).gcd (a ^ 2 ^ m + 1) = if Even a then 2 else 1\n```", "kind": "markdown"}}
{"character": "d", "row": 2, "column": 41, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 47}}, "contents": {"value": "```lean\ncoprime_two_pow_add_one_two_pow_add_one {a : ℤ} (ha : a ≠ 0) {m n : ℕ} (h : m < n) :\n  (a ^ 2 ^ n + 1).gcd (a ^ 2 ^ m + 1) = if Even a then 2 else 1\n```", "kind": "markdown"}}
{"character": "d", "row": 2, "column": 42, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 47}}, "contents": {"value": "```lean\ncoprime_two_pow_add_one_two_pow_add_one {a : ℤ} (ha : a ≠ 0) {m n : ℕ} (h : m < n) :\n  (a ^ 2 ^ n + 1).gcd (a ^ 2 ^ m + 1) = if Even a then 2 else 1\n```", "kind": "markdown"}}
{"character": "_", "row": 2, "column": 43, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 47}}, "contents": {"value": "```lean\ncoprime_two_pow_add_one_two_pow_add_one {a : ℤ} (ha : a ≠ 0) {m n : ℕ} (h : m < n) :\n  (a ^ 2 ^ n + 1).gcd (a ^ 2 ^ m + 1) = if Even a then 2 else 1\n```", "kind": "markdown"}}
{"character": "o", "row": 2, "column": 44, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 47}}, "contents": {"value": "```lean\ncoprime_two_pow_add_one_two_pow_add_one {a : ℤ} (ha : a ≠ 0) {m n : ℕ} (h : m < n) :\n  (a ^ 2 ^ n + 1).gcd (a ^ 2 ^ m + 1) = if Even a then 2 else 1\n```", "kind": "markdown"}}
{"character": "n", "row": 2, "column": 45, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 47}}, "contents": {"value": "```lean\ncoprime_two_pow_add_one_two_pow_add_one {a : ℤ} (ha : a ≠ 0) {m n : ℕ} (h : m < n) :\n  (a ^ 2 ^ n + 1).gcd (a ^ 2 ^ m + 1) = if Even a then 2 else 1\n```", "kind": "markdown"}}
{"character": "e", "row": 2, "column": 46, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 47}}, "contents": {"value": "```lean\ncoprime_two_pow_add_one_two_pow_add_one {a : ℤ} (ha : a ≠ 0) {m n : ℕ} (h : m < n) :\n  (a ^ 2 ^ n + 1).gcd (a ^ 2 ^ m + 1) = if Even a then 2 else 1\n```", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 47}
{"character": "{", "row": 2, "column": 48, "range": {"start": {"line": 2, "character": 48}, "end": {"line": 2, "character": 55}}, "contents": {"value": "Implicit binder, like `{x y : A}` or `{x y}`.\nIn regular applications, whenever all parameters before it have been specified,\nthen a `_` placeholder is automatically inserted for this parameter.\nImplicit parameters should be able to be determined from the other arguments and the return type\nby unification.\n\nIn `@` explicit mode, implicit binders behave like explicit binders.\n", "kind": "markdown"}}
{"character": "a", "row": 2, "column": 49, "range": {"start": {"line": 2, "character": 49}, "end": {"line": 2, "character": 50}}, "contents": {"value": "```lean\na : ℤ\n```", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 50}
{"character": ":", "row": 2, "column": 51, "range": {"start": {"line": 2, "character": 48}, "end": {"line": 2, "character": 55}}, "contents": {"value": "Implicit binder, like `{x y : A}` or `{x y}`.\nIn regular applications, whenever all parameters before it have been specified,\nthen a `_` placeholder is automatically inserted for this parameter.\nImplicit parameters should be able to be determined from the other arguments and the return type\nby unification.\n\nIn `@` explicit mode, implicit binders behave like explicit binders.\n", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 52}
{"character": "ℤ", "row": 2, "column": 53, "range": {"start": {"line": 2, "character": 53}, "end": {"line": 2, "character": 54}}, "contents": {"value": "```lean\nInt : Type\n```\n***\nThe integers.\n\nThis type is special-cased by the compiler and overridden with an efficient implementation. The\nruntime has a special representation for `Int` that stores “small” signed numbers directly, while\nlarger numbers use a fast arbitrary-precision arithmetic library (usually\n[GMP](https://gmplib.org/)). A “small number” is an integer that can be encoded with one fewer bits\nthan the platform's pointer size (i.e. 63 bits on 64-bit architectures and 31 bits on 32-bit\narchitectures).\n\n***\n*import Init.Data.Int.Basic*", "kind": "markdown"}}
{"character": "}", "row": 2, "column": 54, "range": {"start": {"line": 2, "character": 48}, "end": {"line": 2, "character": 55}}, "contents": {"value": "Implicit binder, like `{x y : A}` or `{x y}`.\nIn regular applications, whenever all parameters before it have been specified,\nthen a `_` placeholder is automatically inserted for this parameter.\nImplicit parameters should be able to be determined from the other arguments and the return type\nby unification.\n\nIn `@` explicit mode, implicit binders behave like explicit binders.\n", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 55}
{"character": "(", "row": 2, "column": 56, "range": {"start": {"line": 2, "character": 56}, "end": {"line": 2, "character": 68}}, "contents": {"value": "Explicit binder, like `(x y : A)` or `(x y)`.\nDefault values can be specified using `(x : A := v)` syntax, and tactics using `(x : A := by tac)`.\n", "kind": "markdown"}}
{"character": "h", "row": 2, "column": 57, "range": {"start": {"line": 2, "character": 57}, "end": {"line": 2, "character": 59}}, "contents": {"value": "```lean\nha : a ≠ 0\n```", "kind": "markdown"}}
{"character": "a", "row": 2, "column": 58, "range": {"start": {"line": 2, "character": 57}, "end": {"line": 2, "character": 59}}, "contents": {"value": "```lean\nha : a ≠ 0\n```", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 59}
{"character": ":", "row": 2, "column": 60, "range": {"start": {"line": 2, "character": 56}, "end": {"line": 2, "character": 68}}, "contents": {"value": "Explicit binder, like `(x y : A)` or `(x y)`.\nDefault values can be specified using `(x : A := v)` syntax, and tactics using `(x : A := by tac)`.\n", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 61}
{"character": "a", "row": 2, "column": 62, "range": {"start": {"line": 2, "character": 62}, "end": {"line": 2, "character": 63}}, "contents": {"value": "```lean\na : ℤ\n```", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 63, "range": {"start": {"line": 2, "character": 62}, "end": {"line": 2, "character": 67}}, "contents": {"value": "```lean\nProp\n```\n***\n`a ≠ b`, or `Ne a b` is defined as `¬ (a = b)` or `a = b → False`,\nand asserts that `a` and `b` are not equal.\n\n\nConventions for notations in identifiers:\n\n * The recommended spelling of `≠` in identifiers is `ne`.", "kind": "markdown"}}
{"character": "≠", "row": 2, "column": 64, "range": {"start": {"line": 2, "character": 62}, "end": {"line": 2, "character": 67}}, "contents": {"value": "```lean\nProp\n```\n***\n`a ≠ b`, or `Ne a b` is defined as `¬ (a = b)` or `a = b → False`,\nand asserts that `a` and `b` are not equal.\n\n\nConventions for notations in identifiers:\n\n * The recommended spelling of `≠` in identifiers is `ne`.", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 65, "range": {"start": {"line": 2, "character": 62}, "end": {"line": 2, "character": 67}}, "contents": {"value": "```lean\nProp\n```\n***\n`a ≠ b`, or `Ne a b` is defined as `¬ (a = b)` or `a = b → False`,\nand asserts that `a` and `b` are not equal.\n\n\nConventions for notations in identifiers:\n\n * The recommended spelling of `≠` in identifiers is `ne`.", "kind": "markdown"}}
{"character": "0", "row": 2, "column": 66, "range": {"start": {"line": 2, "character": 66}, "end": {"line": 2, "character": 67}}, "contents": {"value": "```lean\n0 : ℤ\n```", "kind": "markdown"}}
{"character": ")", "row": 2, "column": 67, "range": {"start": {"line": 2, "character": 56}, "end": {"line": 2, "character": 68}}, "contents": {"value": "Explicit binder, like `(x y : A)` or `(x y)`.\nDefault values can be specified using `(x : A := v)` syntax, and tactics using `(x : A := by tac)`.\n", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 68}
{"character": "{", "row": 2, "column": 69, "range": {"start": {"line": 2, "character": 69}, "end": {"line": 2, "character": 78}}, "contents": {"value": "Implicit binder, like `{x y : A}` or `{x y}`.\nIn regular applications, whenever all parameters before it have been specified,\nthen a `_` placeholder is automatically inserted for this parameter.\nImplicit parameters should be able to be determined from the other arguments and the return type\nby unification.\n\nIn `@` explicit mode, implicit binders behave like explicit binders.\n", "kind": "markdown"}}
{"character": "m", "row": 2, "column": 70, "range": {"start": {"line": 2, "character": 70}, "end": {"line": 2, "character": 71}}, "contents": {"value": "```lean\nm : ℕ\n```", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 71}
{"character": "n", "row": 2, "column": 72, "range": {"start": {"line": 2, "character": 72}, "end": {"line": 2, "character": 73}}, "contents": {"value": "```lean\nn : ℕ\n```", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 73}
{"character": ":", "row": 2, "column": 74, "range": {"start": {"line": 2, "character": 69}, "end": {"line": 2, "character": 78}}, "contents": {"value": "Implicit binder, like `{x y : A}` or `{x y}`.\nIn regular applications, whenever all parameters before it have been specified,\nthen a `_` placeholder is automatically inserted for this parameter.\nImplicit parameters should be able to be determined from the other arguments and the return type\nby unification.\n\nIn `@` explicit mode, implicit binders behave like explicit binders.\n", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 75}
{"character": "ℕ", "row": 2, "column": 76, "range": {"start": {"line": 2, "character": 76}, "end": {"line": 2, "character": 77}}, "contents": {"value": "```lean\nNat : Type\n```\n***\nThe natural numbers, starting at zero.\n\nThis type is special-cased by both the kernel and the compiler, and overridden with an efficient\nimplementation. Both use a fast arbitrary-precision arithmetic library (usually\n[GMP](https://gmplib.org/)); at runtime, `Nat` values that are sufficiently small are unboxed.\n\n***\n*import Init.Prelude*", "kind": "markdown"}}
{"character": "}", "row": 2, "column": 77, "range": {"start": {"line": 2, "character": 69}, "end": {"line": 2, "character": 78}}, "contents": {"value": "Implicit binder, like `{x y : A}` or `{x y}`.\nIn regular applications, whenever all parameters before it have been specified,\nthen a `_` placeholder is automatically inserted for this parameter.\nImplicit parameters should be able to be determined from the other arguments and the return type\nby unification.\n\nIn `@` explicit mode, implicit binders behave like explicit binders.\n", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 78}
{"character": "(", "row": 2, "column": 79, "range": {"start": {"line": 2, "character": 79}, "end": {"line": 2, "character": 90}}, "contents": {"value": "Explicit binder, like `(x y : A)` or `(x y)`.\nDefault values can be specified using `(x : A := v)` syntax, and tactics using `(x : A := by tac)`.\n", "kind": "markdown"}}
{"character": "h", "row": 2, "column": 80, "range": {"start": {"line": 2, "character": 80}, "end": {"line": 2, "character": 81}}, "contents": {"value": "```lean\nh : m < n\n```", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 81}
{"character": ":", "row": 2, "column": 82, "range": {"start": {"line": 2, "character": 79}, "end": {"line": 2, "character": 90}}, "contents": {"value": "Explicit binder, like `(x y : A)` or `(x y)`.\nDefault values can be specified using `(x : A := v)` syntax, and tactics using `(x : A := by tac)`.\n", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 83}
{"character": "m", "row": 2, "column": 84, "range": {"start": {"line": 2, "character": 84}, "end": {"line": 2, "character": 85}}, "contents": {"value": "```lean\nm : ℕ\n```", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 85, "range": {"start": {"line": 2, "character": 84}, "end": {"line": 2, "character": 89}}, "contents": {"value": "```lean\nProp\n```\n***\nThe less-than relation: `x < y` \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `<` in identifiers is `lt`.", "kind": "markdown"}}
{"character": "<", "row": 2, "column": 86, "range": {"start": {"line": 2, "character": 84}, "end": {"line": 2, "character": 89}}, "contents": {"value": "```lean\nProp\n```\n***\nThe less-than relation: `x < y` \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `<` in identifiers is `lt`.", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 87, "range": {"start": {"line": 2, "character": 84}, "end": {"line": 2, "character": 89}}, "contents": {"value": "```lean\nProp\n```\n***\nThe less-than relation: `x < y` \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `<` in identifiers is `lt`.", "kind": "markdown"}}
{"character": "n", "row": 2, "column": 88, "range": {"start": {"line": 2, "character": 88}, "end": {"line": 2, "character": 89}}, "contents": {"value": "```lean\nn : ℕ\n```", "kind": "markdown"}}
{"character": ")", "row": 2, "column": 89, "range": {"start": {"line": 2, "character": 79}, "end": {"line": 2, "character": 90}}, "contents": {"value": "Explicit binder, like `(x y : A)` or `(x y)`.\nDefault values can be specified using `(x : A := v)` syntax, and tactics using `(x : A := by tac)`.\n", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 90}
{"character": ":", "row": 2, "column": 91, "range": {"start": {"line": 2, "character": 48}, "end": {"line": 2, "character": 154}}, "contents": {"value": "`declSig` matches the signature of a declaration with required type: a list of binders and then `: type` ", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 92}
{"character": "(", "row": 2, "column": 93, "range": {"start": {"line": 2, "character": 93}, "end": {"line": 2, "character": 108}}, "contents": {"value": "```lean\nℤ\n```\n***\nParentheses, used for grouping expressions (e.g., `a * (b + c)`).\nCan also be used for creating simple functions when combined with `·`. Here are some examples:\n  - `(· + 1)` is shorthand for `fun x => x + 1`\n  - `(· + ·)` is shorthand for `fun x y => x + y`\n  - `(f · a b)` is shorthand for `fun x => f x a b`\n  - `(h (· + 1) ·)` is shorthand for `fun x => h (fun y => y + 1) x`\n  - also applies to other parentheses-like notations such as `(·, 1)`\n", "kind": "markdown"}}
{"character": "a", "row": 2, "column": 94, "range": {"start": {"line": 2, "character": 94}, "end": {"line": 2, "character": 95}}, "contents": {"value": "```lean\na : ℤ\n```", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 95, "range": {"start": {"line": 2, "character": 94}, "end": {"line": 2, "character": 103}}, "contents": {"value": "```lean\nℤ\n```\n***\n`a ^ b` computes `a` to the power of `b`.\nThe meaning of this notation is type-dependent. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `^` in identifiers is `pow`.", "kind": "markdown"}}
{"character": "^", "row": 2, "column": 96, "range": {"start": {"line": 2, "character": 94}, "end": {"line": 2, "character": 103}}, "contents": {"value": "```lean\nℤ\n```\n***\n`a ^ b` computes `a` to the power of `b`.\nThe meaning of this notation is type-dependent. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `^` in identifiers is `pow`.", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 97, "range": {"start": {"line": 2, "character": 94}, "end": {"line": 2, "character": 103}}, "contents": {"value": "```lean\nℤ\n```\n***\n`a ^ b` computes `a` to the power of `b`.\nThe meaning of this notation is type-dependent. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `^` in identifiers is `pow`.", "kind": "markdown"}}
{"character": "2", "row": 2, "column": 98, "range": {"start": {"line": 2, "character": 98}, "end": {"line": 2, "character": 99}}, "contents": {"value": "```lean\n2 : ℕ\n```", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 99, "range": {"start": {"line": 2, "character": 98}, "end": {"line": 2, "character": 103}}, "contents": {"value": "```lean\nℕ\n```\n***\n`a ^ b` computes `a` to the power of `b`.\nThe meaning of this notation is type-dependent. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `^` in identifiers is `pow`.", "kind": "markdown"}}
{"character": "^", "row": 2, "column": 100, "range": {"start": {"line": 2, "character": 98}, "end": {"line": 2, "character": 103}}, "contents": {"value": "```lean\nℕ\n```\n***\n`a ^ b` computes `a` to the power of `b`.\nThe meaning of this notation is type-dependent. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `^` in identifiers is `pow`.", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 101, "range": {"start": {"line": 2, "character": 98}, "end": {"line": 2, "character": 103}}, "contents": {"value": "```lean\nℕ\n```\n***\n`a ^ b` computes `a` to the power of `b`.\nThe meaning of this notation is type-dependent. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `^` in identifiers is `pow`.", "kind": "markdown"}}
{"character": "n", "row": 2, "column": 102, "range": {"start": {"line": 2, "character": 102}, "end": {"line": 2, "character": 103}}, "contents": {"value": "```lean\nn : ℕ\n```", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 103, "range": {"start": {"line": 2, "character": 94}, "end": {"line": 2, "character": 107}}, "contents": {"value": "```lean\nℤ\n```\n***\n`a + b` computes the sum of `a` and `b`.\nThe meaning of this notation is type-dependent. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `+` in identifiers is `add`.", "kind": "markdown"}}
{"character": "+", "row": 2, "column": 104, "range": {"start": {"line": 2, "character": 94}, "end": {"line": 2, "character": 107}}, "contents": {"value": "```lean\nℤ\n```\n***\n`a + b` computes the sum of `a` and `b`.\nThe meaning of this notation is type-dependent. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `+` in identifiers is `add`.", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 105, "range": {"start": {"line": 2, "character": 94}, "end": {"line": 2, "character": 107}}, "contents": {"value": "```lean\nℤ\n```\n***\n`a + b` computes the sum of `a` and `b`.\nThe meaning of this notation is type-dependent. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `+` in identifiers is `add`.", "kind": "markdown"}}
{"character": "1", "row": 2, "column": 106, "range": {"start": {"line": 2, "character": 106}, "end": {"line": 2, "character": 107}}, "contents": {"value": "```lean\n1 : ℤ\n```", "kind": "markdown"}}
{"character": ")", "row": 2, "column": 107, "range": {"start": {"line": 2, "character": 93}, "end": {"line": 2, "character": 108}}, "contents": {"value": "```lean\nℤ\n```\n***\nParentheses, used for grouping expressions (e.g., `a * (b + c)`).\nCan also be used for creating simple functions when combined with `·`. Here are some examples:\n  - `(· + 1)` is shorthand for `fun x => x + 1`\n  - `(· + ·)` is shorthand for `fun x y => x + y`\n  - `(f · a b)` is shorthand for `fun x => f x a b`\n  - `(h (· + 1) ·)` is shorthand for `fun x => h (fun y => y + 1) x`\n  - also applies to other parentheses-like notations such as `(·, 1)`\n", "kind": "markdown"}}
{"character": ".", "row": 2, "column": 108, "range": {"start": {"line": 2, "character": 93}, "end": {"line": 2, "character": 112}}, "contents": {"value": "The *extended field notation* `e.f` is roughly short for `T.f e` where `T` is the type of `e`.\nMore precisely,\n* if `e` is of a function type, `e.f` is translated to `Function.f (p := e)`\n  where `p` is the first explicit parameter of function type\n* if `e` is of a named type `T ...` and there is a declaration `T.f` (possibly from `export`),\n  `e.f` is translated to `T.f (p := e)` where `p` is the first explicit parameter of type `T ...`\n* otherwise, if `e` is of a structure type,\n  the above is repeated for every base type of the structure.\n\nThe field index notation `e.i`, where `i` is a positive number,\nis short for accessing the `i`-th field (1-indexed) of `e` if it is of a structure type. ", "kind": "markdown"}}
{"character": "g", "row": 2, "column": 109, "range": {"start": {"line": 2, "character": 109}, "end": {"line": 2, "character": 112}}, "contents": {"value": "```lean\nInt.gcd (m n : ℤ) : ℕ\n```\n***\nComputes the greatest common divisor of two integers as a natural number. The GCD of two integers is\nthe largest natural number that evenly divides both. However, the GCD of a number and `0` is the\nnumber's absolute value.\n\nThis implementation uses `Nat.gcd`, which is overridden in both the kernel and the compiler to\nefficiently evaluate using arbitrary-precision arithmetic.\n\nExamples:\n* `Int.gcd 10 15 = 5`\n* `Int.gcd 10 (-15) = 5`\n* `Int.gcd (-6) (-9) = 3`\n* `Int.gcd 0 5 = 5`\n* `Int.gcd (-7) 0 = 7`\n\n***\n*import Init.Data.Int.Gcd*", "kind": "markdown"}}
{"character": "c", "row": 2, "column": 110, "range": {"start": {"line": 2, "character": 109}, "end": {"line": 2, "character": 112}}, "contents": {"value": "```lean\nInt.gcd (m n : ℤ) : ℕ\n```\n***\nComputes the greatest common divisor of two integers as a natural number. The GCD of two integers is\nthe largest natural number that evenly divides both. However, the GCD of a number and `0` is the\nnumber's absolute value.\n\nThis implementation uses `Nat.gcd`, which is overridden in both the kernel and the compiler to\nefficiently evaluate using arbitrary-precision arithmetic.\n\nExamples:\n* `Int.gcd 10 15 = 5`\n* `Int.gcd 10 (-15) = 5`\n* `Int.gcd (-6) (-9) = 3`\n* `Int.gcd 0 5 = 5`\n* `Int.gcd (-7) 0 = 7`\n\n***\n*import Init.Data.Int.Gcd*", "kind": "markdown"}}
{"character": "d", "row": 2, "column": 111, "range": {"start": {"line": 2, "character": 109}, "end": {"line": 2, "character": 112}}, "contents": {"value": "```lean\nInt.gcd (m n : ℤ) : ℕ\n```\n***\nComputes the greatest common divisor of two integers as a natural number. The GCD of two integers is\nthe largest natural number that evenly divides both. However, the GCD of a number and `0` is the\nnumber's absolute value.\n\nThis implementation uses `Nat.gcd`, which is overridden in both the kernel and the compiler to\nefficiently evaluate using arbitrary-precision arithmetic.\n\nExamples:\n* `Int.gcd 10 15 = 5`\n* `Int.gcd 10 (-15) = 5`\n* `Int.gcd (-6) (-9) = 3`\n* `Int.gcd 0 5 = 5`\n* `Int.gcd (-7) 0 = 7`\n\n***\n*import Init.Data.Int.Gcd*", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 112, "range": {"start": {"line": 2, "character": 93}, "end": {"line": 2, "character": 128}}, "contents": {"value": "```lean\nℕ\n```", "kind": "markdown"}}
{"character": "(", "row": 2, "column": 113, "range": {"start": {"line": 2, "character": 113}, "end": {"line": 2, "character": 128}}, "contents": {"value": "```lean\nℤ\n```\n***\nParentheses, used for grouping expressions (e.g., `a * (b + c)`).\nCan also be used for creating simple functions when combined with `·`. Here are some examples:\n  - `(· + 1)` is shorthand for `fun x => x + 1`\n  - `(· + ·)` is shorthand for `fun x y => x + y`\n  - `(f · a b)` is shorthand for `fun x => f x a b`\n  - `(h (· + 1) ·)` is shorthand for `fun x => h (fun y => y + 1) x`\n  - also applies to other parentheses-like notations such as `(·, 1)`\n", "kind": "markdown"}}
{"character": "a", "row": 2, "column": 114, "range": {"start": {"line": 2, "character": 114}, "end": {"line": 2, "character": 115}}, "contents": {"value": "```lean\na : ℤ\n```", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 115, "range": {"start": {"line": 2, "character": 114}, "end": {"line": 2, "character": 123}}, "contents": {"value": "```lean\nℤ\n```\n***\n`a ^ b` computes `a` to the power of `b`.\nThe meaning of this notation is type-dependent. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `^` in identifiers is `pow`.", "kind": "markdown"}}
{"character": "^", "row": 2, "column": 116, "range": {"start": {"line": 2, "character": 114}, "end": {"line": 2, "character": 123}}, "contents": {"value": "```lean\nℤ\n```\n***\n`a ^ b` computes `a` to the power of `b`.\nThe meaning of this notation is type-dependent. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `^` in identifiers is `pow`.", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 117, "range": {"start": {"line": 2, "character": 114}, "end": {"line": 2, "character": 123}}, "contents": {"value": "```lean\nℤ\n```\n***\n`a ^ b` computes `a` to the power of `b`.\nThe meaning of this notation is type-dependent. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `^` in identifiers is `pow`.", "kind": "markdown"}}
{"character": "2", "row": 2, "column": 118, "range": {"start": {"line": 2, "character": 118}, "end": {"line": 2, "character": 119}}, "contents": {"value": "```lean\n2 : ℕ\n```", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 119, "range": {"start": {"line": 2, "character": 118}, "end": {"line": 2, "character": 123}}, "contents": {"value": "```lean\nℕ\n```\n***\n`a ^ b` computes `a` to the power of `b`.\nThe meaning of this notation is type-dependent. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `^` in identifiers is `pow`.", "kind": "markdown"}}
{"character": "^", "row": 2, "column": 120, "range": {"start": {"line": 2, "character": 118}, "end": {"line": 2, "character": 123}}, "contents": {"value": "```lean\nℕ\n```\n***\n`a ^ b` computes `a` to the power of `b`.\nThe meaning of this notation is type-dependent. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `^` in identifiers is `pow`.", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 121, "range": {"start": {"line": 2, "character": 118}, "end": {"line": 2, "character": 123}}, "contents": {"value": "```lean\nℕ\n```\n***\n`a ^ b` computes `a` to the power of `b`.\nThe meaning of this notation is type-dependent. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `^` in identifiers is `pow`.", "kind": "markdown"}}
{"character": "m", "row": 2, "column": 122, "range": {"start": {"line": 2, "character": 122}, "end": {"line": 2, "character": 123}}, "contents": {"value": "```lean\nm : ℕ\n```", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 123, "range": {"start": {"line": 2, "character": 114}, "end": {"line": 2, "character": 127}}, "contents": {"value": "```lean\nℤ\n```\n***\n`a + b` computes the sum of `a` and `b`.\nThe meaning of this notation is type-dependent. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `+` in identifiers is `add`.", "kind": "markdown"}}
{"character": "+", "row": 2, "column": 124, "range": {"start": {"line": 2, "character": 114}, "end": {"line": 2, "character": 127}}, "contents": {"value": "```lean\nℤ\n```\n***\n`a + b` computes the sum of `a` and `b`.\nThe meaning of this notation is type-dependent. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `+` in identifiers is `add`.", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 125, "range": {"start": {"line": 2, "character": 114}, "end": {"line": 2, "character": 127}}, "contents": {"value": "```lean\nℤ\n```\n***\n`a + b` computes the sum of `a` and `b`.\nThe meaning of this notation is type-dependent. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `+` in identifiers is `add`.", "kind": "markdown"}}
{"character": "1", "row": 2, "column": 126, "range": {"start": {"line": 2, "character": 126}, "end": {"line": 2, "character": 127}}, "contents": {"value": "```lean\n1 : ℤ\n```", "kind": "markdown"}}
{"character": ")", "row": 2, "column": 127, "range": {"start": {"line": 2, "character": 113}, "end": {"line": 2, "character": 128}}, "contents": {"value": "```lean\nℤ\n```\n***\nParentheses, used for grouping expressions (e.g., `a * (b + c)`).\nCan also be used for creating simple functions when combined with `·`. Here are some examples:\n  - `(· + 1)` is shorthand for `fun x => x + 1`\n  - `(· + ·)` is shorthand for `fun x y => x + y`\n  - `(f · a b)` is shorthand for `fun x => f x a b`\n  - `(h (· + 1) ·)` is shorthand for `fun x => h (fun y => y + 1) x`\n  - also applies to other parentheses-like notations such as `(·, 1)`\n", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 128, "range": {"start": {"line": 2, "character": 93}, "end": {"line": 2, "character": 154}}, "contents": {"value": "```lean\nProp\n```\n***\nThe equality relation. It has one introduction rule, `Eq.refl`.\nWe use `a = b` as notation for `Eq a b`.\nA fundamental property of equality is that it is an equivalence relation.\n```\nvariable (α : Type) (a b c d : α)\nvariable (hab : a = b) (hcb : c = b) (hcd : c = d)\n\nexample : a = d :=\n  Eq.trans (Eq.trans hab (Eq.symm hcb)) hcd\n```\nEquality is much more than an equivalence relation, however. It has the important property that every assertion\nrespects the equivalence, in the sense that we can substitute equal expressions without changing the truth value.\nThat is, given `h1 : a = b` and `h2 : p a`, we can construct a proof for `p b` using substitution: `Eq.subst h1 h2`.\nExample:\n```\nexample (α : Type) (a b : α) (p : α → Prop)\n        (h1 : a = b) (h2 : p a) : p b :=\n  Eq.subst h1 h2\n\nexample (α : Type) (a b : α) (p : α → Prop)\n    (h1 : a = b) (h2 : p a) : p b :=\n  h1 ▸ h2\n```\nThe triangle in the second presentation is a macro built on top of `Eq.subst` and `Eq.symm`, and you can enter it by typing `\\t`.\nFor more information: [Equality](https://lean-lang.org/theorem_proving_in_lean4/quantifiers_and_equality.html#equality)\n\n\nConventions for notations in identifiers:\n\n * The recommended spelling of `=` in identifiers is `eq`.", "kind": "markdown"}}
{"character": "=", "row": 2, "column": 129, "range": {"start": {"line": 2, "character": 93}, "end": {"line": 2, "character": 154}}, "contents": {"value": "```lean\nProp\n```\n***\nThe equality relation. It has one introduction rule, `Eq.refl`.\nWe use `a = b` as notation for `Eq a b`.\nA fundamental property of equality is that it is an equivalence relation.\n```\nvariable (α : Type) (a b c d : α)\nvariable (hab : a = b) (hcb : c = b) (hcd : c = d)\n\nexample : a = d :=\n  Eq.trans (Eq.trans hab (Eq.symm hcb)) hcd\n```\nEquality is much more than an equivalence relation, however. It has the important property that every assertion\nrespects the equivalence, in the sense that we can substitute equal expressions without changing the truth value.\nThat is, given `h1 : a = b` and `h2 : p a`, we can construct a proof for `p b` using substitution: `Eq.subst h1 h2`.\nExample:\n```\nexample (α : Type) (a b : α) (p : α → Prop)\n        (h1 : a = b) (h2 : p a) : p b :=\n  Eq.subst h1 h2\n\nexample (α : Type) (a b : α) (p : α → Prop)\n    (h1 : a = b) (h2 : p a) : p b :=\n  h1 ▸ h2\n```\nThe triangle in the second presentation is a macro built on top of `Eq.subst` and `Eq.symm`, and you can enter it by typing `\\t`.\nFor more information: [Equality](https://lean-lang.org/theorem_proving_in_lean4/quantifiers_and_equality.html#equality)\n\n\nConventions for notations in identifiers:\n\n * The recommended spelling of `=` in identifiers is `eq`.", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 130, "range": {"start": {"line": 2, "character": 93}, "end": {"line": 2, "character": 154}}, "contents": {"value": "```lean\nProp\n```\n***\nThe equality relation. It has one introduction rule, `Eq.refl`.\nWe use `a = b` as notation for `Eq a b`.\nA fundamental property of equality is that it is an equivalence relation.\n```\nvariable (α : Type) (a b c d : α)\nvariable (hab : a = b) (hcb : c = b) (hcd : c = d)\n\nexample : a = d :=\n  Eq.trans (Eq.trans hab (Eq.symm hcb)) hcd\n```\nEquality is much more than an equivalence relation, however. It has the important property that every assertion\nrespects the equivalence, in the sense that we can substitute equal expressions without changing the truth value.\nThat is, given `h1 : a = b` and `h2 : p a`, we can construct a proof for `p b` using substitution: `Eq.subst h1 h2`.\nExample:\n```\nexample (α : Type) (a b : α) (p : α → Prop)\n        (h1 : a = b) (h2 : p a) : p b :=\n  Eq.subst h1 h2\n\nexample (α : Type) (a b : α) (p : α → Prop)\n    (h1 : a = b) (h2 : p a) : p b :=\n  h1 ▸ h2\n```\nThe triangle in the second presentation is a macro built on top of `Eq.subst` and `Eq.symm`, and you can enter it by typing `\\t`.\nFor more information: [Equality](https://lean-lang.org/theorem_proving_in_lean4/quantifiers_and_equality.html#equality)\n\n\nConventions for notations in identifiers:\n\n * The recommended spelling of `=` in identifiers is `eq`.", "kind": "markdown"}}
{"character": "i", "row": 2, "column": 131, "range": {"start": {"line": 2, "character": 131}, "end": {"line": 2, "character": 154}}, "contents": {"value": "```lean\nℕ\n```\n***\n`if c then t else e` is notation for `ite c t e`, \"if-then-else\", which decides to\nreturn `t` or `e` depending on whether `c` is true or false. The explicit argument\n`c : Prop` does not have any actual computational content, but there is an additional\n`[Decidable c]` argument synthesized by typeclass inference which actually\ndetermines how to evaluate `c` to true or false. Write `if h : c then t else e`\ninstead for a \"dependent if-then-else\" `dite`, which allows `t`/`e` to use the fact\nthat `c` is true/false.\n", "kind": "markdown"}}
{"character": "f", "row": 2, "column": 132, "range": {"start": {"line": 2, "character": 131}, "end": {"line": 2, "character": 154}}, "contents": {"value": "```lean\nℕ\n```\n***\n`if c then t else e` is notation for `ite c t e`, \"if-then-else\", which decides to\nreturn `t` or `e` depending on whether `c` is true or false. The explicit argument\n`c : Prop` does not have any actual computational content, but there is an additional\n`[Decidable c]` argument synthesized by typeclass inference which actually\ndetermines how to evaluate `c` to true or false. Write `if h : c then t else e`\ninstead for a \"dependent if-then-else\" `dite`, which allows `t`/`e` to use the fact\nthat `c` is true/false.\n", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 133, "range": {"start": {"line": 2, "character": 131}, "end": {"line": 2, "character": 154}}, "contents": {"value": "```lean\nℕ\n```\n***\n`if c then t else e` is notation for `ite c t e`, \"if-then-else\", which decides to\nreturn `t` or `e` depending on whether `c` is true or false. The explicit argument\n`c : Prop` does not have any actual computational content, but there is an additional\n`[Decidable c]` argument synthesized by typeclass inference which actually\ndetermines how to evaluate `c` to true or false. Write `if h : c then t else e`\ninstead for a \"dependent if-then-else\" `dite`, which allows `t`/`e` to use the fact\nthat `c` is true/false.\n", "kind": "markdown"}}
{"character": "E", "row": 2, "column": 134, "range": {"start": {"line": 2, "character": 134}, "end": {"line": 2, "character": 138}}, "contents": {"value": "```lean\nEven.{u_2} {α : Type u_2} [Add α] (a : α) : Prop\n```\n***\nAn element `a` of a type `α` with addition satisfies `Even a` if `a = r + r`,\nfor some `r : α`.\n***\n*import Mathlib.Algebra.Group.Even*", "kind": "markdown"}}
{"character": "v", "row": 2, "column": 135, "range": {"start": {"line": 2, "character": 134}, "end": {"line": 2, "character": 138}}, "contents": {"value": "```lean\nEven.{u_2} {α : Type u_2} [Add α] (a : α) : Prop\n```\n***\nAn element `a` of a type `α` with addition satisfies `Even a` if `a = r + r`,\nfor some `r : α`.\n***\n*import Mathlib.Algebra.Group.Even*", "kind": "markdown"}}
{"character": "e", "row": 2, "column": 136, "range": {"start": {"line": 2, "character": 134}, "end": {"line": 2, "character": 138}}, "contents": {"value": "```lean\nEven.{u_2} {α : Type u_2} [Add α] (a : α) : Prop\n```\n***\nAn element `a` of a type `α` with addition satisfies `Even a` if `a = r + r`,\nfor some `r : α`.\n***\n*import Mathlib.Algebra.Group.Even*", "kind": "markdown"}}
{"character": "n", "row": 2, "column": 137, "range": {"start": {"line": 2, "character": 134}, "end": {"line": 2, "character": 138}}, "contents": {"value": "```lean\nEven.{u_2} {α : Type u_2} [Add α] (a : α) : Prop\n```\n***\nAn element `a` of a type `α` with addition satisfies `Even a` if `a = r + r`,\nfor some `r : α`.\n***\n*import Mathlib.Algebra.Group.Even*", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 138, "range": {"start": {"line": 2, "character": 134}, "end": {"line": 2, "character": 140}}, "contents": {"value": "```lean\nProp\n```", "kind": "markdown"}}
{"character": "a", "row": 2, "column": 139, "range": {"start": {"line": 2, "character": 139}, "end": {"line": 2, "character": 140}}, "contents": {"value": "```lean\na : ℤ\n```", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 140, "range": {"start": {"line": 2, "character": 131}, "end": {"line": 2, "character": 154}}, "contents": {"value": "```lean\nℕ\n```\n***\n`if c then t else e` is notation for `ite c t e`, \"if-then-else\", which decides to\nreturn `t` or `e` depending on whether `c` is true or false. The explicit argument\n`c : Prop` does not have any actual computational content, but there is an additional\n`[Decidable c]` argument synthesized by typeclass inference which actually\ndetermines how to evaluate `c` to true or false. Write `if h : c then t else e`\ninstead for a \"dependent if-then-else\" `dite`, which allows `t`/`e` to use the fact\nthat `c` is true/false.\n", "kind": "markdown"}}
{"character": "t", "row": 2, "column": 141, "range": {"start": {"line": 2, "character": 131}, "end": {"line": 2, "character": 154}}, "contents": {"value": "```lean\nℕ\n```\n***\n`if c then t else e` is notation for `ite c t e`, \"if-then-else\", which decides to\nreturn `t` or `e` depending on whether `c` is true or false. The explicit argument\n`c : Prop` does not have any actual computational content, but there is an additional\n`[Decidable c]` argument synthesized by typeclass inference which actually\ndetermines how to evaluate `c` to true or false. Write `if h : c then t else e`\ninstead for a \"dependent if-then-else\" `dite`, which allows `t`/`e` to use the fact\nthat `c` is true/false.\n", "kind": "markdown"}}
{"character": "h", "row": 2, "column": 142, "range": {"start": {"line": 2, "character": 131}, "end": {"line": 2, "character": 154}}, "contents": {"value": "```lean\nℕ\n```\n***\n`if c then t else e` is notation for `ite c t e`, \"if-then-else\", which decides to\nreturn `t` or `e` depending on whether `c` is true or false. The explicit argument\n`c : Prop` does not have any actual computational content, but there is an additional\n`[Decidable c]` argument synthesized by typeclass inference which actually\ndetermines how to evaluate `c` to true or false. Write `if h : c then t else e`\ninstead for a \"dependent if-then-else\" `dite`, which allows `t`/`e` to use the fact\nthat `c` is true/false.\n", "kind": "markdown"}}
{"character": "e", "row": 2, "column": 143, "range": {"start": {"line": 2, "character": 131}, "end": {"line": 2, "character": 154}}, "contents": {"value": "```lean\nℕ\n```\n***\n`if c then t else e` is notation for `ite c t e`, \"if-then-else\", which decides to\nreturn `t` or `e` depending on whether `c` is true or false. The explicit argument\n`c : Prop` does not have any actual computational content, but there is an additional\n`[Decidable c]` argument synthesized by typeclass inference which actually\ndetermines how to evaluate `c` to true or false. Write `if h : c then t else e`\ninstead for a \"dependent if-then-else\" `dite`, which allows `t`/`e` to use the fact\nthat `c` is true/false.\n", "kind": "markdown"}}
{"character": "n", "row": 2, "column": 144, "range": {"start": {"line": 2, "character": 131}, "end": {"line": 2, "character": 154}}, "contents": {"value": "```lean\nℕ\n```\n***\n`if c then t else e` is notation for `ite c t e`, \"if-then-else\", which decides to\nreturn `t` or `e` depending on whether `c` is true or false. The explicit argument\n`c : Prop` does not have any actual computational content, but there is an additional\n`[Decidable c]` argument synthesized by typeclass inference which actually\ndetermines how to evaluate `c` to true or false. Write `if h : c then t else e`\ninstead for a \"dependent if-then-else\" `dite`, which allows `t`/`e` to use the fact\nthat `c` is true/false.\n", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 145, "range": {"start": {"line": 2, "character": 131}, "end": {"line": 2, "character": 154}}, "contents": {"value": "```lean\nℕ\n```\n***\n`if c then t else e` is notation for `ite c t e`, \"if-then-else\", which decides to\nreturn `t` or `e` depending on whether `c` is true or false. The explicit argument\n`c : Prop` does not have any actual computational content, but there is an additional\n`[Decidable c]` argument synthesized by typeclass inference which actually\ndetermines how to evaluate `c` to true or false. Write `if h : c then t else e`\ninstead for a \"dependent if-then-else\" `dite`, which allows `t`/`e` to use the fact\nthat `c` is true/false.\n", "kind": "markdown"}}
{"character": "2", "row": 2, "column": 146, "range": {"start": {"line": 2, "character": 146}, "end": {"line": 2, "character": 147}}, "contents": {"value": "```lean\n2 : ℕ\n```", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 147, "range": {"start": {"line": 2, "character": 131}, "end": {"line": 2, "character": 154}}, "contents": {"value": "```lean\nℕ\n```\n***\n`if c then t else e` is notation for `ite c t e`, \"if-then-else\", which decides to\nreturn `t` or `e` depending on whether `c` is true or false. The explicit argument\n`c : Prop` does not have any actual computational content, but there is an additional\n`[Decidable c]` argument synthesized by typeclass inference which actually\ndetermines how to evaluate `c` to true or false. Write `if h : c then t else e`\ninstead for a \"dependent if-then-else\" `dite`, which allows `t`/`e` to use the fact\nthat `c` is true/false.\n", "kind": "markdown"}}
{"character": "e", "row": 2, "column": 148, "range": {"start": {"line": 2, "character": 131}, "end": {"line": 2, "character": 154}}, "contents": {"value": "```lean\nℕ\n```\n***\n`if c then t else e` is notation for `ite c t e`, \"if-then-else\", which decides to\nreturn `t` or `e` depending on whether `c` is true or false. The explicit argument\n`c : Prop` does not have any actual computational content, but there is an additional\n`[Decidable c]` argument synthesized by typeclass inference which actually\ndetermines how to evaluate `c` to true or false. Write `if h : c then t else e`\ninstead for a \"dependent if-then-else\" `dite`, which allows `t`/`e` to use the fact\nthat `c` is true/false.\n", "kind": "markdown"}}
{"character": "l", "row": 2, "column": 149, "range": {"start": {"line": 2, "character": 131}, "end": {"line": 2, "character": 154}}, "contents": {"value": "```lean\nℕ\n```\n***\n`if c then t else e` is notation for `ite c t e`, \"if-then-else\", which decides to\nreturn `t` or `e` depending on whether `c` is true or false. The explicit argument\n`c : Prop` does not have any actual computational content, but there is an additional\n`[Decidable c]` argument synthesized by typeclass inference which actually\ndetermines how to evaluate `c` to true or false. Write `if h : c then t else e`\ninstead for a \"dependent if-then-else\" `dite`, which allows `t`/`e` to use the fact\nthat `c` is true/false.\n", "kind": "markdown"}}
{"character": "s", "row": 2, "column": 150, "range": {"start": {"line": 2, "character": 131}, "end": {"line": 2, "character": 154}}, "contents": {"value": "```lean\nℕ\n```\n***\n`if c then t else e` is notation for `ite c t e`, \"if-then-else\", which decides to\nreturn `t` or `e` depending on whether `c` is true or false. The explicit argument\n`c : Prop` does not have any actual computational content, but there is an additional\n`[Decidable c]` argument synthesized by typeclass inference which actually\ndetermines how to evaluate `c` to true or false. Write `if h : c then t else e`\ninstead for a \"dependent if-then-else\" `dite`, which allows `t`/`e` to use the fact\nthat `c` is true/false.\n", "kind": "markdown"}}
{"character": "e", "row": 2, "column": 151, "range": {"start": {"line": 2, "character": 131}, "end": {"line": 2, "character": 154}}, "contents": {"value": "```lean\nℕ\n```\n***\n`if c then t else e` is notation for `ite c t e`, \"if-then-else\", which decides to\nreturn `t` or `e` depending on whether `c` is true or false. The explicit argument\n`c : Prop` does not have any actual computational content, but there is an additional\n`[Decidable c]` argument synthesized by typeclass inference which actually\ndetermines how to evaluate `c` to true or false. Write `if h : c then t else e`\ninstead for a \"dependent if-then-else\" `dite`, which allows `t`/`e` to use the fact\nthat `c` is true/false.\n", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 152, "range": {"start": {"line": 2, "character": 131}, "end": {"line": 2, "character": 154}}, "contents": {"value": "```lean\nℕ\n```\n***\n`if c then t else e` is notation for `ite c t e`, \"if-then-else\", which decides to\nreturn `t` or `e` depending on whether `c` is true or false. The explicit argument\n`c : Prop` does not have any actual computational content, but there is an additional\n`[Decidable c]` argument synthesized by typeclass inference which actually\ndetermines how to evaluate `c` to true or false. Write `if h : c then t else e`\ninstead for a \"dependent if-then-else\" `dite`, which allows `t`/`e` to use the fact\nthat `c` is true/false.\n", "kind": "markdown"}}
{"character": "1", "row": 2, "column": 153, "range": {"start": {"line": 2, "character": 153}, "end": {"line": 2, "character": 154}}, "contents": {"value": "```lean\n1 : ℕ\n```", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 154}
{"character": ":", "row": 2, "column": 155}
{"character": "=", "row": 2, "column": 156}
{"character": " ", "row": 2, "column": 157}
{"character": "b", "row": 2, "column": 158, "range": {"start": {"line": 2, "character": 158}, "end": {"line": 2, "character": 166}}, "contents": {"value": "`by tac` constructs a term of the expected type by running the tactic(s) `tac`. ", "kind": "markdown"}}
{"character": "y", "row": 2, "column": 159, "range": {"start": {"line": 2, "character": 158}, "end": {"line": 2, "character": 166}}, "contents": {"value": "`by tac` constructs a term of the expected type by running the tactic(s) `tac`. ", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 160, "range": {"start": {"line": 2, "character": 158}, "end": {"line": 2, "character": 166}}, "contents": {"value": "`by tac` constructs a term of the expected type by running the tactic(s) `tac`. ", "kind": "markdown"}}
{"character": "s", "row": 2, "column": 161, "range": {"start": {"line": 2, "character": 161}, "end": {"line": 2, "character": 166}}, "contents": {"value": "The `sorry` tactic is a temporary placeholder for an incomplete tactic proof,\nclosing the main goal using `exact sorry`.\n\nThis is intended for stubbing-out incomplete parts of a proof while still having a syntactically correct proof skeleton.\nLean will give a warning whenever a proof uses `sorry`, so you aren't likely to miss it,\nbut you can double check if a theorem depends on `sorry` by looking for `sorryAx` in the output\nof the `#print axioms my_thm` command, the axiom used by the implementation of `sorry`.\n", "kind": "markdown"}}
{"character": "o", "row": 2, "column": 162, "range": {"start": {"line": 2, "character": 161}, "end": {"line": 2, "character": 166}}, "contents": {"value": "The `sorry` tactic is a temporary placeholder for an incomplete tactic proof,\nclosing the main goal using `exact sorry`.\n\nThis is intended for stubbing-out incomplete parts of a proof while still having a syntactically correct proof skeleton.\nLean will give a warning whenever a proof uses `sorry`, so you aren't likely to miss it,\nbut you can double check if a theorem depends on `sorry` by looking for `sorryAx` in the output\nof the `#print axioms my_thm` command, the axiom used by the implementation of `sorry`.\n", "kind": "markdown"}}
{"character": "r", "row": 2, "column": 163, "range": {"start": {"line": 2, "character": 161}, "end": {"line": 2, "character": 166}}, "contents": {"value": "The `sorry` tactic is a temporary placeholder for an incomplete tactic proof,\nclosing the main goal using `exact sorry`.\n\nThis is intended for stubbing-out incomplete parts of a proof while still having a syntactically correct proof skeleton.\nLean will give a warning whenever a proof uses `sorry`, so you aren't likely to miss it,\nbut you can double check if a theorem depends on `sorry` by looking for `sorryAx` in the output\nof the `#print axioms my_thm` command, the axiom used by the implementation of `sorry`.\n", "kind": "markdown"}}
{"character": "r", "row": 2, "column": 164, "range": {"start": {"line": 2, "character": 161}, "end": {"line": 2, "character": 166}}, "contents": {"value": "The `sorry` tactic is a temporary placeholder for an incomplete tactic proof,\nclosing the main goal using `exact sorry`.\n\nThis is intended for stubbing-out incomplete parts of a proof while still having a syntactically correct proof skeleton.\nLean will give a warning whenever a proof uses `sorry`, so you aren't likely to miss it,\nbut you can double check if a theorem depends on `sorry` by looking for `sorryAx` in the output\nof the `#print axioms my_thm` command, the axiom used by the implementation of `sorry`.\n", "kind": "markdown"}}
{"character": "y", "row": 2, "column": 165, "range": {"start": {"line": 2, "character": 161}, "end": {"line": 2, "character": 166}}, "contents": {"value": "The `sorry` tactic is a temporary placeholder for an incomplete tactic proof,\nclosing the main goal using `exact sorry`.\n\nThis is intended for stubbing-out incomplete parts of a proof while still having a syntactically correct proof skeleton.\nLean will give a warning whenever a proof uses `sorry`, so you aren't likely to miss it,\nbut you can double check if a theorem depends on `sorry` by looking for `sorryAx` in the output\nof the `#print axioms my_thm` command, the axiom used by the implementation of `sorry`.\n", "kind": "markdown"}}
