{"character": "i", "row": 0, "column": 0}
{"character": "m", "row": 0, "column": 1}
{"character": "p", "row": 0, "column": 2}
{"character": "o", "row": 0, "column": 3}
{"character": "r", "row": 0, "column": 4}
{"character": "t", "row": 0, "column": 5}
{"character": " ", "row": 0, "column": 6}
{"character": "M", "row": 0, "column": 7}
{"character": "a", "row": 0, "column": 8}
{"character": "t", "row": 0, "column": 9}
{"character": "h", "row": 0, "column": 10}
{"character": "l", "row": 0, "column": 11}
{"character": "i", "row": 0, "column": 12}
{"character": "b", "row": 0, "column": 13}
{"character": "o", "row": 1, "column": 0, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 11}}, "contents": {"value": "Makes names from other namespaces visible without writing the namespace prefix.\n\nNames that are made available with `open` are visible within the current `section` or `namespace`\nblock. This makes referring to (type) definitions and theorems easier, but note that it can also\nmake [scoped instances], notations, and attributes from a different namespace available.\n\nThe `open` command can be used in a few different ways:\n\n* `open Some.Namespace.Path1 Some.Namespace.Path2` makes all non-protected names in\n  `Some.Namespace.Path1` and `Some.Namespace.Path2` available without the prefix, so that\n  `Some.Namespace.Path1.x` and `Some.Namespace.Path2.y` can be referred to by writing only `x` and\n  `y`.\n\n* `open Some.Namespace.Path hiding def1 def2` opens all non-protected names in `Some.Namespace.Path`\n  except `def1` and `def2`.\n\n* `open Some.Namespace.Path (def1 def2)` only makes `Some.Namespace.Path.def1` and\n  `Some.Namespace.Path.def2` available without the full prefix, so `Some.Namespace.Path.def3` would\n  be unaffected.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open Some.Namespace.Path renaming def1 → def1', def2 → def2'` same as `open Some.Namespace.Path\n  (def1 def2)` but `def1`/`def2`'s names are changed to `def1'`/`def2'`.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open scoped Some.Namespace.Path1 Some.Namespace.Path2` **only** opens [scoped instances],\n  notations, and attributes from `Namespace1` and `Namespace2`; it does **not** make any other name\n  available.\n\n* `open <any of the open shapes above> in` makes the names `open`-ed visible only in the next\n  command or expression.\n\n[scoped instance]: https://lean-lang.org/theorem_proving_in_lean4/type_classes.html#scoped-instances\n(Scoped instances in Theorem Proving in Lean)\n\n\n## Examples\n\n```lean\n/-- SKI combinators https://en.wikipedia.org/wiki/SKI_combinator_calculus -/\nnamespace Combinator.Calculus\n  def I (a : α) : α := a\n  def K (a : α) : β → α := fun _ => a\n  def S (x : α → β → γ) (y : α → β) (z : α) : γ := x z (y z)\nend Combinator.Calculus\n\nsection\n  -- open everything under `Combinator.Calculus`, *i.e.* `I`, `K` and `S`,\n  -- until the section ends\n  open Combinator.Calculus\n\n  theorem SKx_eq_K : S K x = I := rfl\nend\n\n-- open everything under `Combinator.Calculus` only for the next command (the next `theorem`, here)\nopen Combinator.Calculus in\ntheorem SKx_eq_K' : S K x = I := rfl\n\nsection\n  -- open only `S` and `K` under `Combinator.Calculus`\n  open Combinator.Calculus (S K)\n\n  theorem SKxy_eq_y : S K x y = y := rfl\n\n  -- `I` is not in scope, we have to use its full path\n  theorem SKxy_eq_Iy : S K x y = Combinator.Calculus.I y := rfl\nend\n\nsection\n  open Combinator.Calculus\n    renaming\n      I → identity,\n      K → konstant\n\n  #check identity\n  #check konstant\nend\n\nsection\n  open Combinator.Calculus\n    hiding S\n\n  #check I\n  #check K\nend\n\nsection\n  namespace Demo\n    inductive MyType\n    | val\n\n    namespace N1\n      scoped infix:68 \" ≋ \" => BEq.beq\n\n      scoped instance : BEq MyType where\n        beq _ _ := true\n\n      def Alias := MyType\n    end N1\n  end Demo\n\n  -- bring `≋` and the instance in scope, but not `Alias`\n  open scoped Demo.N1\n\n  #check Demo.MyType.val == Demo.MyType.val\n  #check Demo.MyType.val ≋ Demo.MyType.val\n  -- #check Alias -- unknown identifier 'Alias'\nend\n```\n", "kind": "markdown"}}
{"character": "p", "row": 1, "column": 1, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 11}}, "contents": {"value": "Makes names from other namespaces visible without writing the namespace prefix.\n\nNames that are made available with `open` are visible within the current `section` or `namespace`\nblock. This makes referring to (type) definitions and theorems easier, but note that it can also\nmake [scoped instances], notations, and attributes from a different namespace available.\n\nThe `open` command can be used in a few different ways:\n\n* `open Some.Namespace.Path1 Some.Namespace.Path2` makes all non-protected names in\n  `Some.Namespace.Path1` and `Some.Namespace.Path2` available without the prefix, so that\n  `Some.Namespace.Path1.x` and `Some.Namespace.Path2.y` can be referred to by writing only `x` and\n  `y`.\n\n* `open Some.Namespace.Path hiding def1 def2` opens all non-protected names in `Some.Namespace.Path`\n  except `def1` and `def2`.\n\n* `open Some.Namespace.Path (def1 def2)` only makes `Some.Namespace.Path.def1` and\n  `Some.Namespace.Path.def2` available without the full prefix, so `Some.Namespace.Path.def3` would\n  be unaffected.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open Some.Namespace.Path renaming def1 → def1', def2 → def2'` same as `open Some.Namespace.Path\n  (def1 def2)` but `def1`/`def2`'s names are changed to `def1'`/`def2'`.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open scoped Some.Namespace.Path1 Some.Namespace.Path2` **only** opens [scoped instances],\n  notations, and attributes from `Namespace1` and `Namespace2`; it does **not** make any other name\n  available.\n\n* `open <any of the open shapes above> in` makes the names `open`-ed visible only in the next\n  command or expression.\n\n[scoped instance]: https://lean-lang.org/theorem_proving_in_lean4/type_classes.html#scoped-instances\n(Scoped instances in Theorem Proving in Lean)\n\n\n## Examples\n\n```lean\n/-- SKI combinators https://en.wikipedia.org/wiki/SKI_combinator_calculus -/\nnamespace Combinator.Calculus\n  def I (a : α) : α := a\n  def K (a : α) : β → α := fun _ => a\n  def S (x : α → β → γ) (y : α → β) (z : α) : γ := x z (y z)\nend Combinator.Calculus\n\nsection\n  -- open everything under `Combinator.Calculus`, *i.e.* `I`, `K` and `S`,\n  -- until the section ends\n  open Combinator.Calculus\n\n  theorem SKx_eq_K : S K x = I := rfl\nend\n\n-- open everything under `Combinator.Calculus` only for the next command (the next `theorem`, here)\nopen Combinator.Calculus in\ntheorem SKx_eq_K' : S K x = I := rfl\n\nsection\n  -- open only `S` and `K` under `Combinator.Calculus`\n  open Combinator.Calculus (S K)\n\n  theorem SKxy_eq_y : S K x y = y := rfl\n\n  -- `I` is not in scope, we have to use its full path\n  theorem SKxy_eq_Iy : S K x y = Combinator.Calculus.I y := rfl\nend\n\nsection\n  open Combinator.Calculus\n    renaming\n      I → identity,\n      K → konstant\n\n  #check identity\n  #check konstant\nend\n\nsection\n  open Combinator.Calculus\n    hiding S\n\n  #check I\n  #check K\nend\n\nsection\n  namespace Demo\n    inductive MyType\n    | val\n\n    namespace N1\n      scoped infix:68 \" ≋ \" => BEq.beq\n\n      scoped instance : BEq MyType where\n        beq _ _ := true\n\n      def Alias := MyType\n    end N1\n  end Demo\n\n  -- bring `≋` and the instance in scope, but not `Alias`\n  open scoped Demo.N1\n\n  #check Demo.MyType.val == Demo.MyType.val\n  #check Demo.MyType.val ≋ Demo.MyType.val\n  -- #check Alias -- unknown identifier 'Alias'\nend\n```\n", "kind": "markdown"}}
{"character": "e", "row": 1, "column": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 11}}, "contents": {"value": "Makes names from other namespaces visible without writing the namespace prefix.\n\nNames that are made available with `open` are visible within the current `section` or `namespace`\nblock. This makes referring to (type) definitions and theorems easier, but note that it can also\nmake [scoped instances], notations, and attributes from a different namespace available.\n\nThe `open` command can be used in a few different ways:\n\n* `open Some.Namespace.Path1 Some.Namespace.Path2` makes all non-protected names in\n  `Some.Namespace.Path1` and `Some.Namespace.Path2` available without the prefix, so that\n  `Some.Namespace.Path1.x` and `Some.Namespace.Path2.y` can be referred to by writing only `x` and\n  `y`.\n\n* `open Some.Namespace.Path hiding def1 def2` opens all non-protected names in `Some.Namespace.Path`\n  except `def1` and `def2`.\n\n* `open Some.Namespace.Path (def1 def2)` only makes `Some.Namespace.Path.def1` and\n  `Some.Namespace.Path.def2` available without the full prefix, so `Some.Namespace.Path.def3` would\n  be unaffected.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open Some.Namespace.Path renaming def1 → def1', def2 → def2'` same as `open Some.Namespace.Path\n  (def1 def2)` but `def1`/`def2`'s names are changed to `def1'`/`def2'`.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open scoped Some.Namespace.Path1 Some.Namespace.Path2` **only** opens [scoped instances],\n  notations, and attributes from `Namespace1` and `Namespace2`; it does **not** make any other name\n  available.\n\n* `open <any of the open shapes above> in` makes the names `open`-ed visible only in the next\n  command or expression.\n\n[scoped instance]: https://lean-lang.org/theorem_proving_in_lean4/type_classes.html#scoped-instances\n(Scoped instances in Theorem Proving in Lean)\n\n\n## Examples\n\n```lean\n/-- SKI combinators https://en.wikipedia.org/wiki/SKI_combinator_calculus -/\nnamespace Combinator.Calculus\n  def I (a : α) : α := a\n  def K (a : α) : β → α := fun _ => a\n  def S (x : α → β → γ) (y : α → β) (z : α) : γ := x z (y z)\nend Combinator.Calculus\n\nsection\n  -- open everything under `Combinator.Calculus`, *i.e.* `I`, `K` and `S`,\n  -- until the section ends\n  open Combinator.Calculus\n\n  theorem SKx_eq_K : S K x = I := rfl\nend\n\n-- open everything under `Combinator.Calculus` only for the next command (the next `theorem`, here)\nopen Combinator.Calculus in\ntheorem SKx_eq_K' : S K x = I := rfl\n\nsection\n  -- open only `S` and `K` under `Combinator.Calculus`\n  open Combinator.Calculus (S K)\n\n  theorem SKxy_eq_y : S K x y = y := rfl\n\n  -- `I` is not in scope, we have to use its full path\n  theorem SKxy_eq_Iy : S K x y = Combinator.Calculus.I y := rfl\nend\n\nsection\n  open Combinator.Calculus\n    renaming\n      I → identity,\n      K → konstant\n\n  #check identity\n  #check konstant\nend\n\nsection\n  open Combinator.Calculus\n    hiding S\n\n  #check I\n  #check K\nend\n\nsection\n  namespace Demo\n    inductive MyType\n    | val\n\n    namespace N1\n      scoped infix:68 \" ≋ \" => BEq.beq\n\n      scoped instance : BEq MyType where\n        beq _ _ := true\n\n      def Alias := MyType\n    end N1\n  end Demo\n\n  -- bring `≋` and the instance in scope, but not `Alias`\n  open scoped Demo.N1\n\n  #check Demo.MyType.val == Demo.MyType.val\n  #check Demo.MyType.val ≋ Demo.MyType.val\n  -- #check Alias -- unknown identifier 'Alias'\nend\n```\n", "kind": "markdown"}}
{"character": "n", "row": 1, "column": 3, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 11}}, "contents": {"value": "Makes names from other namespaces visible without writing the namespace prefix.\n\nNames that are made available with `open` are visible within the current `section` or `namespace`\nblock. This makes referring to (type) definitions and theorems easier, but note that it can also\nmake [scoped instances], notations, and attributes from a different namespace available.\n\nThe `open` command can be used in a few different ways:\n\n* `open Some.Namespace.Path1 Some.Namespace.Path2` makes all non-protected names in\n  `Some.Namespace.Path1` and `Some.Namespace.Path2` available without the prefix, so that\n  `Some.Namespace.Path1.x` and `Some.Namespace.Path2.y` can be referred to by writing only `x` and\n  `y`.\n\n* `open Some.Namespace.Path hiding def1 def2` opens all non-protected names in `Some.Namespace.Path`\n  except `def1` and `def2`.\n\n* `open Some.Namespace.Path (def1 def2)` only makes `Some.Namespace.Path.def1` and\n  `Some.Namespace.Path.def2` available without the full prefix, so `Some.Namespace.Path.def3` would\n  be unaffected.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open Some.Namespace.Path renaming def1 → def1', def2 → def2'` same as `open Some.Namespace.Path\n  (def1 def2)` but `def1`/`def2`'s names are changed to `def1'`/`def2'`.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open scoped Some.Namespace.Path1 Some.Namespace.Path2` **only** opens [scoped instances],\n  notations, and attributes from `Namespace1` and `Namespace2`; it does **not** make any other name\n  available.\n\n* `open <any of the open shapes above> in` makes the names `open`-ed visible only in the next\n  command or expression.\n\n[scoped instance]: https://lean-lang.org/theorem_proving_in_lean4/type_classes.html#scoped-instances\n(Scoped instances in Theorem Proving in Lean)\n\n\n## Examples\n\n```lean\n/-- SKI combinators https://en.wikipedia.org/wiki/SKI_combinator_calculus -/\nnamespace Combinator.Calculus\n  def I (a : α) : α := a\n  def K (a : α) : β → α := fun _ => a\n  def S (x : α → β → γ) (y : α → β) (z : α) : γ := x z (y z)\nend Combinator.Calculus\n\nsection\n  -- open everything under `Combinator.Calculus`, *i.e.* `I`, `K` and `S`,\n  -- until the section ends\n  open Combinator.Calculus\n\n  theorem SKx_eq_K : S K x = I := rfl\nend\n\n-- open everything under `Combinator.Calculus` only for the next command (the next `theorem`, here)\nopen Combinator.Calculus in\ntheorem SKx_eq_K' : S K x = I := rfl\n\nsection\n  -- open only `S` and `K` under `Combinator.Calculus`\n  open Combinator.Calculus (S K)\n\n  theorem SKxy_eq_y : S K x y = y := rfl\n\n  -- `I` is not in scope, we have to use its full path\n  theorem SKxy_eq_Iy : S K x y = Combinator.Calculus.I y := rfl\nend\n\nsection\n  open Combinator.Calculus\n    renaming\n      I → identity,\n      K → konstant\n\n  #check identity\n  #check konstant\nend\n\nsection\n  open Combinator.Calculus\n    hiding S\n\n  #check I\n  #check K\nend\n\nsection\n  namespace Demo\n    inductive MyType\n    | val\n\n    namespace N1\n      scoped infix:68 \" ≋ \" => BEq.beq\n\n      scoped instance : BEq MyType where\n        beq _ _ := true\n\n      def Alias := MyType\n    end N1\n  end Demo\n\n  -- bring `≋` and the instance in scope, but not `Alias`\n  open scoped Demo.N1\n\n  #check Demo.MyType.val == Demo.MyType.val\n  #check Demo.MyType.val ≋ Demo.MyType.val\n  -- #check Alias -- unknown identifier 'Alias'\nend\n```\n", "kind": "markdown"}}
{"character": " ", "row": 1, "column": 4, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 11}}, "contents": {"value": "Makes names from other namespaces visible without writing the namespace prefix.\n\nNames that are made available with `open` are visible within the current `section` or `namespace`\nblock. This makes referring to (type) definitions and theorems easier, but note that it can also\nmake [scoped instances], notations, and attributes from a different namespace available.\n\nThe `open` command can be used in a few different ways:\n\n* `open Some.Namespace.Path1 Some.Namespace.Path2` makes all non-protected names in\n  `Some.Namespace.Path1` and `Some.Namespace.Path2` available without the prefix, so that\n  `Some.Namespace.Path1.x` and `Some.Namespace.Path2.y` can be referred to by writing only `x` and\n  `y`.\n\n* `open Some.Namespace.Path hiding def1 def2` opens all non-protected names in `Some.Namespace.Path`\n  except `def1` and `def2`.\n\n* `open Some.Namespace.Path (def1 def2)` only makes `Some.Namespace.Path.def1` and\n  `Some.Namespace.Path.def2` available without the full prefix, so `Some.Namespace.Path.def3` would\n  be unaffected.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open Some.Namespace.Path renaming def1 → def1', def2 → def2'` same as `open Some.Namespace.Path\n  (def1 def2)` but `def1`/`def2`'s names are changed to `def1'`/`def2'`.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open scoped Some.Namespace.Path1 Some.Namespace.Path2` **only** opens [scoped instances],\n  notations, and attributes from `Namespace1` and `Namespace2`; it does **not** make any other name\n  available.\n\n* `open <any of the open shapes above> in` makes the names `open`-ed visible only in the next\n  command or expression.\n\n[scoped instance]: https://lean-lang.org/theorem_proving_in_lean4/type_classes.html#scoped-instances\n(Scoped instances in Theorem Proving in Lean)\n\n\n## Examples\n\n```lean\n/-- SKI combinators https://en.wikipedia.org/wiki/SKI_combinator_calculus -/\nnamespace Combinator.Calculus\n  def I (a : α) : α := a\n  def K (a : α) : β → α := fun _ => a\n  def S (x : α → β → γ) (y : α → β) (z : α) : γ := x z (y z)\nend Combinator.Calculus\n\nsection\n  -- open everything under `Combinator.Calculus`, *i.e.* `I`, `K` and `S`,\n  -- until the section ends\n  open Combinator.Calculus\n\n  theorem SKx_eq_K : S K x = I := rfl\nend\n\n-- open everything under `Combinator.Calculus` only for the next command (the next `theorem`, here)\nopen Combinator.Calculus in\ntheorem SKx_eq_K' : S K x = I := rfl\n\nsection\n  -- open only `S` and `K` under `Combinator.Calculus`\n  open Combinator.Calculus (S K)\n\n  theorem SKxy_eq_y : S K x y = y := rfl\n\n  -- `I` is not in scope, we have to use its full path\n  theorem SKxy_eq_Iy : S K x y = Combinator.Calculus.I y := rfl\nend\n\nsection\n  open Combinator.Calculus\n    renaming\n      I → identity,\n      K → konstant\n\n  #check identity\n  #check konstant\nend\n\nsection\n  open Combinator.Calculus\n    hiding S\n\n  #check I\n  #check K\nend\n\nsection\n  namespace Demo\n    inductive MyType\n    | val\n\n    namespace N1\n      scoped infix:68 \" ≋ \" => BEq.beq\n\n      scoped instance : BEq MyType where\n        beq _ _ := true\n\n      def Alias := MyType\n    end N1\n  end Demo\n\n  -- bring `≋` and the instance in scope, but not `Alias`\n  open scoped Demo.N1\n\n  #check Demo.MyType.val == Demo.MyType.val\n  #check Demo.MyType.val ≋ Demo.MyType.val\n  -- #check Alias -- unknown identifier 'Alias'\nend\n```\n", "kind": "markdown"}}
{"character": "M", "row": 1, "column": 5, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 11}}, "contents": {"value": "Makes names from other namespaces visible without writing the namespace prefix.\n\nNames that are made available with `open` are visible within the current `section` or `namespace`\nblock. This makes referring to (type) definitions and theorems easier, but note that it can also\nmake [scoped instances], notations, and attributes from a different namespace available.\n\nThe `open` command can be used in a few different ways:\n\n* `open Some.Namespace.Path1 Some.Namespace.Path2` makes all non-protected names in\n  `Some.Namespace.Path1` and `Some.Namespace.Path2` available without the prefix, so that\n  `Some.Namespace.Path1.x` and `Some.Namespace.Path2.y` can be referred to by writing only `x` and\n  `y`.\n\n* `open Some.Namespace.Path hiding def1 def2` opens all non-protected names in `Some.Namespace.Path`\n  except `def1` and `def2`.\n\n* `open Some.Namespace.Path (def1 def2)` only makes `Some.Namespace.Path.def1` and\n  `Some.Namespace.Path.def2` available without the full prefix, so `Some.Namespace.Path.def3` would\n  be unaffected.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open Some.Namespace.Path renaming def1 → def1', def2 → def2'` same as `open Some.Namespace.Path\n  (def1 def2)` but `def1`/`def2`'s names are changed to `def1'`/`def2'`.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open scoped Some.Namespace.Path1 Some.Namespace.Path2` **only** opens [scoped instances],\n  notations, and attributes from `Namespace1` and `Namespace2`; it does **not** make any other name\n  available.\n\n* `open <any of the open shapes above> in` makes the names `open`-ed visible only in the next\n  command or expression.\n\n[scoped instance]: https://lean-lang.org/theorem_proving_in_lean4/type_classes.html#scoped-instances\n(Scoped instances in Theorem Proving in Lean)\n\n\n## Examples\n\n```lean\n/-- SKI combinators https://en.wikipedia.org/wiki/SKI_combinator_calculus -/\nnamespace Combinator.Calculus\n  def I (a : α) : α := a\n  def K (a : α) : β → α := fun _ => a\n  def S (x : α → β → γ) (y : α → β) (z : α) : γ := x z (y z)\nend Combinator.Calculus\n\nsection\n  -- open everything under `Combinator.Calculus`, *i.e.* `I`, `K` and `S`,\n  -- until the section ends\n  open Combinator.Calculus\n\n  theorem SKx_eq_K : S K x = I := rfl\nend\n\n-- open everything under `Combinator.Calculus` only for the next command (the next `theorem`, here)\nopen Combinator.Calculus in\ntheorem SKx_eq_K' : S K x = I := rfl\n\nsection\n  -- open only `S` and `K` under `Combinator.Calculus`\n  open Combinator.Calculus (S K)\n\n  theorem SKxy_eq_y : S K x y = y := rfl\n\n  -- `I` is not in scope, we have to use its full path\n  theorem SKxy_eq_Iy : S K x y = Combinator.Calculus.I y := rfl\nend\n\nsection\n  open Combinator.Calculus\n    renaming\n      I → identity,\n      K → konstant\n\n  #check identity\n  #check konstant\nend\n\nsection\n  open Combinator.Calculus\n    hiding S\n\n  #check I\n  #check K\nend\n\nsection\n  namespace Demo\n    inductive MyType\n    | val\n\n    namespace N1\n      scoped infix:68 \" ≋ \" => BEq.beq\n\n      scoped instance : BEq MyType where\n        beq _ _ := true\n\n      def Alias := MyType\n    end N1\n  end Demo\n\n  -- bring `≋` and the instance in scope, but not `Alias`\n  open scoped Demo.N1\n\n  #check Demo.MyType.val == Demo.MyType.val\n  #check Demo.MyType.val ≋ Demo.MyType.val\n  -- #check Alias -- unknown identifier 'Alias'\nend\n```\n", "kind": "markdown"}}
{"character": "a", "row": 1, "column": 6, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 11}}, "contents": {"value": "Makes names from other namespaces visible without writing the namespace prefix.\n\nNames that are made available with `open` are visible within the current `section` or `namespace`\nblock. This makes referring to (type) definitions and theorems easier, but note that it can also\nmake [scoped instances], notations, and attributes from a different namespace available.\n\nThe `open` command can be used in a few different ways:\n\n* `open Some.Namespace.Path1 Some.Namespace.Path2` makes all non-protected names in\n  `Some.Namespace.Path1` and `Some.Namespace.Path2` available without the prefix, so that\n  `Some.Namespace.Path1.x` and `Some.Namespace.Path2.y` can be referred to by writing only `x` and\n  `y`.\n\n* `open Some.Namespace.Path hiding def1 def2` opens all non-protected names in `Some.Namespace.Path`\n  except `def1` and `def2`.\n\n* `open Some.Namespace.Path (def1 def2)` only makes `Some.Namespace.Path.def1` and\n  `Some.Namespace.Path.def2` available without the full prefix, so `Some.Namespace.Path.def3` would\n  be unaffected.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open Some.Namespace.Path renaming def1 → def1', def2 → def2'` same as `open Some.Namespace.Path\n  (def1 def2)` but `def1`/`def2`'s names are changed to `def1'`/`def2'`.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open scoped Some.Namespace.Path1 Some.Namespace.Path2` **only** opens [scoped instances],\n  notations, and attributes from `Namespace1` and `Namespace2`; it does **not** make any other name\n  available.\n\n* `open <any of the open shapes above> in` makes the names `open`-ed visible only in the next\n  command or expression.\n\n[scoped instance]: https://lean-lang.org/theorem_proving_in_lean4/type_classes.html#scoped-instances\n(Scoped instances in Theorem Proving in Lean)\n\n\n## Examples\n\n```lean\n/-- SKI combinators https://en.wikipedia.org/wiki/SKI_combinator_calculus -/\nnamespace Combinator.Calculus\n  def I (a : α) : α := a\n  def K (a : α) : β → α := fun _ => a\n  def S (x : α → β → γ) (y : α → β) (z : α) : γ := x z (y z)\nend Combinator.Calculus\n\nsection\n  -- open everything under `Combinator.Calculus`, *i.e.* `I`, `K` and `S`,\n  -- until the section ends\n  open Combinator.Calculus\n\n  theorem SKx_eq_K : S K x = I := rfl\nend\n\n-- open everything under `Combinator.Calculus` only for the next command (the next `theorem`, here)\nopen Combinator.Calculus in\ntheorem SKx_eq_K' : S K x = I := rfl\n\nsection\n  -- open only `S` and `K` under `Combinator.Calculus`\n  open Combinator.Calculus (S K)\n\n  theorem SKxy_eq_y : S K x y = y := rfl\n\n  -- `I` is not in scope, we have to use its full path\n  theorem SKxy_eq_Iy : S K x y = Combinator.Calculus.I y := rfl\nend\n\nsection\n  open Combinator.Calculus\n    renaming\n      I → identity,\n      K → konstant\n\n  #check identity\n  #check konstant\nend\n\nsection\n  open Combinator.Calculus\n    hiding S\n\n  #check I\n  #check K\nend\n\nsection\n  namespace Demo\n    inductive MyType\n    | val\n\n    namespace N1\n      scoped infix:68 \" ≋ \" => BEq.beq\n\n      scoped instance : BEq MyType where\n        beq _ _ := true\n\n      def Alias := MyType\n    end N1\n  end Demo\n\n  -- bring `≋` and the instance in scope, but not `Alias`\n  open scoped Demo.N1\n\n  #check Demo.MyType.val == Demo.MyType.val\n  #check Demo.MyType.val ≋ Demo.MyType.val\n  -- #check Alias -- unknown identifier 'Alias'\nend\n```\n", "kind": "markdown"}}
{"character": "t", "row": 1, "column": 7, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 11}}, "contents": {"value": "Makes names from other namespaces visible without writing the namespace prefix.\n\nNames that are made available with `open` are visible within the current `section` or `namespace`\nblock. This makes referring to (type) definitions and theorems easier, but note that it can also\nmake [scoped instances], notations, and attributes from a different namespace available.\n\nThe `open` command can be used in a few different ways:\n\n* `open Some.Namespace.Path1 Some.Namespace.Path2` makes all non-protected names in\n  `Some.Namespace.Path1` and `Some.Namespace.Path2` available without the prefix, so that\n  `Some.Namespace.Path1.x` and `Some.Namespace.Path2.y` can be referred to by writing only `x` and\n  `y`.\n\n* `open Some.Namespace.Path hiding def1 def2` opens all non-protected names in `Some.Namespace.Path`\n  except `def1` and `def2`.\n\n* `open Some.Namespace.Path (def1 def2)` only makes `Some.Namespace.Path.def1` and\n  `Some.Namespace.Path.def2` available without the full prefix, so `Some.Namespace.Path.def3` would\n  be unaffected.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open Some.Namespace.Path renaming def1 → def1', def2 → def2'` same as `open Some.Namespace.Path\n  (def1 def2)` but `def1`/`def2`'s names are changed to `def1'`/`def2'`.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open scoped Some.Namespace.Path1 Some.Namespace.Path2` **only** opens [scoped instances],\n  notations, and attributes from `Namespace1` and `Namespace2`; it does **not** make any other name\n  available.\n\n* `open <any of the open shapes above> in` makes the names `open`-ed visible only in the next\n  command or expression.\n\n[scoped instance]: https://lean-lang.org/theorem_proving_in_lean4/type_classes.html#scoped-instances\n(Scoped instances in Theorem Proving in Lean)\n\n\n## Examples\n\n```lean\n/-- SKI combinators https://en.wikipedia.org/wiki/SKI_combinator_calculus -/\nnamespace Combinator.Calculus\n  def I (a : α) : α := a\n  def K (a : α) : β → α := fun _ => a\n  def S (x : α → β → γ) (y : α → β) (z : α) : γ := x z (y z)\nend Combinator.Calculus\n\nsection\n  -- open everything under `Combinator.Calculus`, *i.e.* `I`, `K` and `S`,\n  -- until the section ends\n  open Combinator.Calculus\n\n  theorem SKx_eq_K : S K x = I := rfl\nend\n\n-- open everything under `Combinator.Calculus` only for the next command (the next `theorem`, here)\nopen Combinator.Calculus in\ntheorem SKx_eq_K' : S K x = I := rfl\n\nsection\n  -- open only `S` and `K` under `Combinator.Calculus`\n  open Combinator.Calculus (S K)\n\n  theorem SKxy_eq_y : S K x y = y := rfl\n\n  -- `I` is not in scope, we have to use its full path\n  theorem SKxy_eq_Iy : S K x y = Combinator.Calculus.I y := rfl\nend\n\nsection\n  open Combinator.Calculus\n    renaming\n      I → identity,\n      K → konstant\n\n  #check identity\n  #check konstant\nend\n\nsection\n  open Combinator.Calculus\n    hiding S\n\n  #check I\n  #check K\nend\n\nsection\n  namespace Demo\n    inductive MyType\n    | val\n\n    namespace N1\n      scoped infix:68 \" ≋ \" => BEq.beq\n\n      scoped instance : BEq MyType where\n        beq _ _ := true\n\n      def Alias := MyType\n    end N1\n  end Demo\n\n  -- bring `≋` and the instance in scope, but not `Alias`\n  open scoped Demo.N1\n\n  #check Demo.MyType.val == Demo.MyType.val\n  #check Demo.MyType.val ≋ Demo.MyType.val\n  -- #check Alias -- unknown identifier 'Alias'\nend\n```\n", "kind": "markdown"}}
{"character": "r", "row": 1, "column": 8, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 11}}, "contents": {"value": "Makes names from other namespaces visible without writing the namespace prefix.\n\nNames that are made available with `open` are visible within the current `section` or `namespace`\nblock. This makes referring to (type) definitions and theorems easier, but note that it can also\nmake [scoped instances], notations, and attributes from a different namespace available.\n\nThe `open` command can be used in a few different ways:\n\n* `open Some.Namespace.Path1 Some.Namespace.Path2` makes all non-protected names in\n  `Some.Namespace.Path1` and `Some.Namespace.Path2` available without the prefix, so that\n  `Some.Namespace.Path1.x` and `Some.Namespace.Path2.y` can be referred to by writing only `x` and\n  `y`.\n\n* `open Some.Namespace.Path hiding def1 def2` opens all non-protected names in `Some.Namespace.Path`\n  except `def1` and `def2`.\n\n* `open Some.Namespace.Path (def1 def2)` only makes `Some.Namespace.Path.def1` and\n  `Some.Namespace.Path.def2` available without the full prefix, so `Some.Namespace.Path.def3` would\n  be unaffected.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open Some.Namespace.Path renaming def1 → def1', def2 → def2'` same as `open Some.Namespace.Path\n  (def1 def2)` but `def1`/`def2`'s names are changed to `def1'`/`def2'`.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open scoped Some.Namespace.Path1 Some.Namespace.Path2` **only** opens [scoped instances],\n  notations, and attributes from `Namespace1` and `Namespace2`; it does **not** make any other name\n  available.\n\n* `open <any of the open shapes above> in` makes the names `open`-ed visible only in the next\n  command or expression.\n\n[scoped instance]: https://lean-lang.org/theorem_proving_in_lean4/type_classes.html#scoped-instances\n(Scoped instances in Theorem Proving in Lean)\n\n\n## Examples\n\n```lean\n/-- SKI combinators https://en.wikipedia.org/wiki/SKI_combinator_calculus -/\nnamespace Combinator.Calculus\n  def I (a : α) : α := a\n  def K (a : α) : β → α := fun _ => a\n  def S (x : α → β → γ) (y : α → β) (z : α) : γ := x z (y z)\nend Combinator.Calculus\n\nsection\n  -- open everything under `Combinator.Calculus`, *i.e.* `I`, `K` and `S`,\n  -- until the section ends\n  open Combinator.Calculus\n\n  theorem SKx_eq_K : S K x = I := rfl\nend\n\n-- open everything under `Combinator.Calculus` only for the next command (the next `theorem`, here)\nopen Combinator.Calculus in\ntheorem SKx_eq_K' : S K x = I := rfl\n\nsection\n  -- open only `S` and `K` under `Combinator.Calculus`\n  open Combinator.Calculus (S K)\n\n  theorem SKxy_eq_y : S K x y = y := rfl\n\n  -- `I` is not in scope, we have to use its full path\n  theorem SKxy_eq_Iy : S K x y = Combinator.Calculus.I y := rfl\nend\n\nsection\n  open Combinator.Calculus\n    renaming\n      I → identity,\n      K → konstant\n\n  #check identity\n  #check konstant\nend\n\nsection\n  open Combinator.Calculus\n    hiding S\n\n  #check I\n  #check K\nend\n\nsection\n  namespace Demo\n    inductive MyType\n    | val\n\n    namespace N1\n      scoped infix:68 \" ≋ \" => BEq.beq\n\n      scoped instance : BEq MyType where\n        beq _ _ := true\n\n      def Alias := MyType\n    end N1\n  end Demo\n\n  -- bring `≋` and the instance in scope, but not `Alias`\n  open scoped Demo.N1\n\n  #check Demo.MyType.val == Demo.MyType.val\n  #check Demo.MyType.val ≋ Demo.MyType.val\n  -- #check Alias -- unknown identifier 'Alias'\nend\n```\n", "kind": "markdown"}}
{"character": "i", "row": 1, "column": 9, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 11}}, "contents": {"value": "Makes names from other namespaces visible without writing the namespace prefix.\n\nNames that are made available with `open` are visible within the current `section` or `namespace`\nblock. This makes referring to (type) definitions and theorems easier, but note that it can also\nmake [scoped instances], notations, and attributes from a different namespace available.\n\nThe `open` command can be used in a few different ways:\n\n* `open Some.Namespace.Path1 Some.Namespace.Path2` makes all non-protected names in\n  `Some.Namespace.Path1` and `Some.Namespace.Path2` available without the prefix, so that\n  `Some.Namespace.Path1.x` and `Some.Namespace.Path2.y` can be referred to by writing only `x` and\n  `y`.\n\n* `open Some.Namespace.Path hiding def1 def2` opens all non-protected names in `Some.Namespace.Path`\n  except `def1` and `def2`.\n\n* `open Some.Namespace.Path (def1 def2)` only makes `Some.Namespace.Path.def1` and\n  `Some.Namespace.Path.def2` available without the full prefix, so `Some.Namespace.Path.def3` would\n  be unaffected.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open Some.Namespace.Path renaming def1 → def1', def2 → def2'` same as `open Some.Namespace.Path\n  (def1 def2)` but `def1`/`def2`'s names are changed to `def1'`/`def2'`.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open scoped Some.Namespace.Path1 Some.Namespace.Path2` **only** opens [scoped instances],\n  notations, and attributes from `Namespace1` and `Namespace2`; it does **not** make any other name\n  available.\n\n* `open <any of the open shapes above> in` makes the names `open`-ed visible only in the next\n  command or expression.\n\n[scoped instance]: https://lean-lang.org/theorem_proving_in_lean4/type_classes.html#scoped-instances\n(Scoped instances in Theorem Proving in Lean)\n\n\n## Examples\n\n```lean\n/-- SKI combinators https://en.wikipedia.org/wiki/SKI_combinator_calculus -/\nnamespace Combinator.Calculus\n  def I (a : α) : α := a\n  def K (a : α) : β → α := fun _ => a\n  def S (x : α → β → γ) (y : α → β) (z : α) : γ := x z (y z)\nend Combinator.Calculus\n\nsection\n  -- open everything under `Combinator.Calculus`, *i.e.* `I`, `K` and `S`,\n  -- until the section ends\n  open Combinator.Calculus\n\n  theorem SKx_eq_K : S K x = I := rfl\nend\n\n-- open everything under `Combinator.Calculus` only for the next command (the next `theorem`, here)\nopen Combinator.Calculus in\ntheorem SKx_eq_K' : S K x = I := rfl\n\nsection\n  -- open only `S` and `K` under `Combinator.Calculus`\n  open Combinator.Calculus (S K)\n\n  theorem SKxy_eq_y : S K x y = y := rfl\n\n  -- `I` is not in scope, we have to use its full path\n  theorem SKxy_eq_Iy : S K x y = Combinator.Calculus.I y := rfl\nend\n\nsection\n  open Combinator.Calculus\n    renaming\n      I → identity,\n      K → konstant\n\n  #check identity\n  #check konstant\nend\n\nsection\n  open Combinator.Calculus\n    hiding S\n\n  #check I\n  #check K\nend\n\nsection\n  namespace Demo\n    inductive MyType\n    | val\n\n    namespace N1\n      scoped infix:68 \" ≋ \" => BEq.beq\n\n      scoped instance : BEq MyType where\n        beq _ _ := true\n\n      def Alias := MyType\n    end N1\n  end Demo\n\n  -- bring `≋` and the instance in scope, but not `Alias`\n  open scoped Demo.N1\n\n  #check Demo.MyType.val == Demo.MyType.val\n  #check Demo.MyType.val ≋ Demo.MyType.val\n  -- #check Alias -- unknown identifier 'Alias'\nend\n```\n", "kind": "markdown"}}
{"character": "x", "row": 1, "column": 10, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 11}}, "contents": {"value": "Makes names from other namespaces visible without writing the namespace prefix.\n\nNames that are made available with `open` are visible within the current `section` or `namespace`\nblock. This makes referring to (type) definitions and theorems easier, but note that it can also\nmake [scoped instances], notations, and attributes from a different namespace available.\n\nThe `open` command can be used in a few different ways:\n\n* `open Some.Namespace.Path1 Some.Namespace.Path2` makes all non-protected names in\n  `Some.Namespace.Path1` and `Some.Namespace.Path2` available without the prefix, so that\n  `Some.Namespace.Path1.x` and `Some.Namespace.Path2.y` can be referred to by writing only `x` and\n  `y`.\n\n* `open Some.Namespace.Path hiding def1 def2` opens all non-protected names in `Some.Namespace.Path`\n  except `def1` and `def2`.\n\n* `open Some.Namespace.Path (def1 def2)` only makes `Some.Namespace.Path.def1` and\n  `Some.Namespace.Path.def2` available without the full prefix, so `Some.Namespace.Path.def3` would\n  be unaffected.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open Some.Namespace.Path renaming def1 → def1', def2 → def2'` same as `open Some.Namespace.Path\n  (def1 def2)` but `def1`/`def2`'s names are changed to `def1'`/`def2'`.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open scoped Some.Namespace.Path1 Some.Namespace.Path2` **only** opens [scoped instances],\n  notations, and attributes from `Namespace1` and `Namespace2`; it does **not** make any other name\n  available.\n\n* `open <any of the open shapes above> in` makes the names `open`-ed visible only in the next\n  command or expression.\n\n[scoped instance]: https://lean-lang.org/theorem_proving_in_lean4/type_classes.html#scoped-instances\n(Scoped instances in Theorem Proving in Lean)\n\n\n## Examples\n\n```lean\n/-- SKI combinators https://en.wikipedia.org/wiki/SKI_combinator_calculus -/\nnamespace Combinator.Calculus\n  def I (a : α) : α := a\n  def K (a : α) : β → α := fun _ => a\n  def S (x : α → β → γ) (y : α → β) (z : α) : γ := x z (y z)\nend Combinator.Calculus\n\nsection\n  -- open everything under `Combinator.Calculus`, *i.e.* `I`, `K` and `S`,\n  -- until the section ends\n  open Combinator.Calculus\n\n  theorem SKx_eq_K : S K x = I := rfl\nend\n\n-- open everything under `Combinator.Calculus` only for the next command (the next `theorem`, here)\nopen Combinator.Calculus in\ntheorem SKx_eq_K' : S K x = I := rfl\n\nsection\n  -- open only `S` and `K` under `Combinator.Calculus`\n  open Combinator.Calculus (S K)\n\n  theorem SKxy_eq_y : S K x y = y := rfl\n\n  -- `I` is not in scope, we have to use its full path\n  theorem SKxy_eq_Iy : S K x y = Combinator.Calculus.I y := rfl\nend\n\nsection\n  open Combinator.Calculus\n    renaming\n      I → identity,\n      K → konstant\n\n  #check identity\n  #check konstant\nend\n\nsection\n  open Combinator.Calculus\n    hiding S\n\n  #check I\n  #check K\nend\n\nsection\n  namespace Demo\n    inductive MyType\n    | val\n\n    namespace N1\n      scoped infix:68 \" ≋ \" => BEq.beq\n\n      scoped instance : BEq MyType where\n        beq _ _ := true\n\n      def Alias := MyType\n    end N1\n  end Demo\n\n  -- bring `≋` and the instance in scope, but not `Alias`\n  open scoped Demo.N1\n\n  #check Demo.MyType.val == Demo.MyType.val\n  #check Demo.MyType.val ≋ Demo.MyType.val\n  -- #check Alias -- unknown identifier 'Alias'\nend\n```\n", "kind": "markdown"}}
{"character": "t", "row": 2, "column": 0}
{"character": "h", "row": 2, "column": 1}
{"character": "e", "row": 2, "column": 2}
{"character": "o", "row": 2, "column": 3}
{"character": "r", "row": 2, "column": 4}
{"character": "e", "row": 2, "column": 5}
{"character": "m", "row": 2, "column": 6}
{"character": " ", "row": 2, "column": 7}
{"character": "r", "row": 2, "column": 8, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 30}}, "contents": {"value": "```lean\nrow_dot_zero_extracted.{u_1, u_2} {k : Type u_1} {R : Type u_2} [Fintype k] [PartialOrder R] [NonUnitalRing R]\n  [StarRing R] [StarOrderedRing R] [NoZeroDivisors R] {x y : k → R} : x ≠ 0 → y ≠ 0 → x ⬝ᵥ y = 0 → False\n```", "kind": "markdown"}}
{"character": "o", "row": 2, "column": 9, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 30}}, "contents": {"value": "```lean\nrow_dot_zero_extracted.{u_1, u_2} {k : Type u_1} {R : Type u_2} [Fintype k] [PartialOrder R] [NonUnitalRing R]\n  [StarRing R] [StarOrderedRing R] [NoZeroDivisors R] {x y : k → R} : x ≠ 0 → y ≠ 0 → x ⬝ᵥ y = 0 → False\n```", "kind": "markdown"}}
{"character": "w", "row": 2, "column": 10, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 30}}, "contents": {"value": "```lean\nrow_dot_zero_extracted.{u_1, u_2} {k : Type u_1} {R : Type u_2} [Fintype k] [PartialOrder R] [NonUnitalRing R]\n  [StarRing R] [StarOrderedRing R] [NoZeroDivisors R] {x y : k → R} : x ≠ 0 → y ≠ 0 → x ⬝ᵥ y = 0 → False\n```", "kind": "markdown"}}
{"character": "_", "row": 2, "column": 11, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 30}}, "contents": {"value": "```lean\nrow_dot_zero_extracted.{u_1, u_2} {k : Type u_1} {R : Type u_2} [Fintype k] [PartialOrder R] [NonUnitalRing R]\n  [StarRing R] [StarOrderedRing R] [NoZeroDivisors R] {x y : k → R} : x ≠ 0 → y ≠ 0 → x ⬝ᵥ y = 0 → False\n```", "kind": "markdown"}}
{"character": "d", "row": 2, "column": 12, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 30}}, "contents": {"value": "```lean\nrow_dot_zero_extracted.{u_1, u_2} {k : Type u_1} {R : Type u_2} [Fintype k] [PartialOrder R] [NonUnitalRing R]\n  [StarRing R] [StarOrderedRing R] [NoZeroDivisors R] {x y : k → R} : x ≠ 0 → y ≠ 0 → x ⬝ᵥ y = 0 → False\n```", "kind": "markdown"}}
{"character": "o", "row": 2, "column": 13, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 30}}, "contents": {"value": "```lean\nrow_dot_zero_extracted.{u_1, u_2} {k : Type u_1} {R : Type u_2} [Fintype k] [PartialOrder R] [NonUnitalRing R]\n  [StarRing R] [StarOrderedRing R] [NoZeroDivisors R] {x y : k → R} : x ≠ 0 → y ≠ 0 → x ⬝ᵥ y = 0 → False\n```", "kind": "markdown"}}
{"character": "t", "row": 2, "column": 14, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 30}}, "contents": {"value": "```lean\nrow_dot_zero_extracted.{u_1, u_2} {k : Type u_1} {R : Type u_2} [Fintype k] [PartialOrder R] [NonUnitalRing R]\n  [StarRing R] [StarOrderedRing R] [NoZeroDivisors R] {x y : k → R} : x ≠ 0 → y ≠ 0 → x ⬝ᵥ y = 0 → False\n```", "kind": "markdown"}}
{"character": "_", "row": 2, "column": 15, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 30}}, "contents": {"value": "```lean\nrow_dot_zero_extracted.{u_1, u_2} {k : Type u_1} {R : Type u_2} [Fintype k] [PartialOrder R] [NonUnitalRing R]\n  [StarRing R] [StarOrderedRing R] [NoZeroDivisors R] {x y : k → R} : x ≠ 0 → y ≠ 0 → x ⬝ᵥ y = 0 → False\n```", "kind": "markdown"}}
{"character": "z", "row": 2, "column": 16, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 30}}, "contents": {"value": "```lean\nrow_dot_zero_extracted.{u_1, u_2} {k : Type u_1} {R : Type u_2} [Fintype k] [PartialOrder R] [NonUnitalRing R]\n  [StarRing R] [StarOrderedRing R] [NoZeroDivisors R] {x y : k → R} : x ≠ 0 → y ≠ 0 → x ⬝ᵥ y = 0 → False\n```", "kind": "markdown"}}
{"character": "e", "row": 2, "column": 17, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 30}}, "contents": {"value": "```lean\nrow_dot_zero_extracted.{u_1, u_2} {k : Type u_1} {R : Type u_2} [Fintype k] [PartialOrder R] [NonUnitalRing R]\n  [StarRing R] [StarOrderedRing R] [NoZeroDivisors R] {x y : k → R} : x ≠ 0 → y ≠ 0 → x ⬝ᵥ y = 0 → False\n```", "kind": "markdown"}}
{"character": "r", "row": 2, "column": 18, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 30}}, "contents": {"value": "```lean\nrow_dot_zero_extracted.{u_1, u_2} {k : Type u_1} {R : Type u_2} [Fintype k] [PartialOrder R] [NonUnitalRing R]\n  [StarRing R] [StarOrderedRing R] [NoZeroDivisors R] {x y : k → R} : x ≠ 0 → y ≠ 0 → x ⬝ᵥ y = 0 → False\n```", "kind": "markdown"}}
{"character": "o", "row": 2, "column": 19, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 30}}, "contents": {"value": "```lean\nrow_dot_zero_extracted.{u_1, u_2} {k : Type u_1} {R : Type u_2} [Fintype k] [PartialOrder R] [NonUnitalRing R]\n  [StarRing R] [StarOrderedRing R] [NoZeroDivisors R] {x y : k → R} : x ≠ 0 → y ≠ 0 → x ⬝ᵥ y = 0 → False\n```", "kind": "markdown"}}
{"character": "_", "row": 2, "column": 20, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 30}}, "contents": {"value": "```lean\nrow_dot_zero_extracted.{u_1, u_2} {k : Type u_1} {R : Type u_2} [Fintype k] [PartialOrder R] [NonUnitalRing R]\n  [StarRing R] [StarOrderedRing R] [NoZeroDivisors R] {x y : k → R} : x ≠ 0 → y ≠ 0 → x ⬝ᵥ y = 0 → False\n```", "kind": "markdown"}}
{"character": "e", "row": 2, "column": 21, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 30}}, "contents": {"value": "```lean\nrow_dot_zero_extracted.{u_1, u_2} {k : Type u_1} {R : Type u_2} [Fintype k] [PartialOrder R] [NonUnitalRing R]\n  [StarRing R] [StarOrderedRing R] [NoZeroDivisors R] {x y : k → R} : x ≠ 0 → y ≠ 0 → x ⬝ᵥ y = 0 → False\n```", "kind": "markdown"}}
{"character": "x", "row": 2, "column": 22, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 30}}, "contents": {"value": "```lean\nrow_dot_zero_extracted.{u_1, u_2} {k : Type u_1} {R : Type u_2} [Fintype k] [PartialOrder R] [NonUnitalRing R]\n  [StarRing R] [StarOrderedRing R] [NoZeroDivisors R] {x y : k → R} : x ≠ 0 → y ≠ 0 → x ⬝ᵥ y = 0 → False\n```", "kind": "markdown"}}
{"character": "t", "row": 2, "column": 23, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 30}}, "contents": {"value": "```lean\nrow_dot_zero_extracted.{u_1, u_2} {k : Type u_1} {R : Type u_2} [Fintype k] [PartialOrder R] [NonUnitalRing R]\n  [StarRing R] [StarOrderedRing R] [NoZeroDivisors R] {x y : k → R} : x ≠ 0 → y ≠ 0 → x ⬝ᵥ y = 0 → False\n```", "kind": "markdown"}}
{"character": "r", "row": 2, "column": 24, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 30}}, "contents": {"value": "```lean\nrow_dot_zero_extracted.{u_1, u_2} {k : Type u_1} {R : Type u_2} [Fintype k] [PartialOrder R] [NonUnitalRing R]\n  [StarRing R] [StarOrderedRing R] [NoZeroDivisors R] {x y : k → R} : x ≠ 0 → y ≠ 0 → x ⬝ᵥ y = 0 → False\n```", "kind": "markdown"}}
{"character": "a", "row": 2, "column": 25, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 30}}, "contents": {"value": "```lean\nrow_dot_zero_extracted.{u_1, u_2} {k : Type u_1} {R : Type u_2} [Fintype k] [PartialOrder R] [NonUnitalRing R]\n  [StarRing R] [StarOrderedRing R] [NoZeroDivisors R] {x y : k → R} : x ≠ 0 → y ≠ 0 → x ⬝ᵥ y = 0 → False\n```", "kind": "markdown"}}
{"character": "c", "row": 2, "column": 26, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 30}}, "contents": {"value": "```lean\nrow_dot_zero_extracted.{u_1, u_2} {k : Type u_1} {R : Type u_2} [Fintype k] [PartialOrder R] [NonUnitalRing R]\n  [StarRing R] [StarOrderedRing R] [NoZeroDivisors R] {x y : k → R} : x ≠ 0 → y ≠ 0 → x ⬝ᵥ y = 0 → False\n```", "kind": "markdown"}}
{"character": "t", "row": 2, "column": 27, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 30}}, "contents": {"value": "```lean\nrow_dot_zero_extracted.{u_1, u_2} {k : Type u_1} {R : Type u_2} [Fintype k] [PartialOrder R] [NonUnitalRing R]\n  [StarRing R] [StarOrderedRing R] [NoZeroDivisors R] {x y : k → R} : x ≠ 0 → y ≠ 0 → x ⬝ᵥ y = 0 → False\n```", "kind": "markdown"}}
{"character": "e", "row": 2, "column": 28, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 30}}, "contents": {"value": "```lean\nrow_dot_zero_extracted.{u_1, u_2} {k : Type u_1} {R : Type u_2} [Fintype k] [PartialOrder R] [NonUnitalRing R]\n  [StarRing R] [StarOrderedRing R] [NoZeroDivisors R] {x y : k → R} : x ≠ 0 → y ≠ 0 → x ⬝ᵥ y = 0 → False\n```", "kind": "markdown"}}
{"character": "d", "row": 2, "column": 29, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 30}}, "contents": {"value": "```lean\nrow_dot_zero_extracted.{u_1, u_2} {k : Type u_1} {R : Type u_2} [Fintype k] [PartialOrder R] [NonUnitalRing R]\n  [StarRing R] [StarOrderedRing R] [NoZeroDivisors R] {x y : k → R} : x ≠ 0 → y ≠ 0 → x ⬝ᵥ y = 0 → False\n```", "kind": "markdown"}}
{"character": ".", "row": 2, "column": 30, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 41}}, "contents": {"value": "```lean\nrow_dot_zero_extracted : ∀ {k : Type u_1} {R : Type u_2} [inst : Fintype k] [inst_1 : PartialOrder R]\n  [inst_2 : NonUnitalRing R] [inst_3 : StarRing R] [inst_4 : StarOrderedRing R] [inst_5 : NoZeroDivisors R]\n  {x y : k → R}, x ≠ 0 → y ≠ 0 → x ⬝ᵥ y = 0 → False\n```\n***\n`declId` matches `foo` or `foo.{u,v}`: an identifier possibly followed by a list of universe names ", "kind": "markdown"}}
{"character": "{", "row": 2, "column": 31, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 41}}, "contents": {"value": "```lean\nrow_dot_zero_extracted : ∀ {k : Type u_1} {R : Type u_2} [inst : Fintype k] [inst_1 : PartialOrder R]\n  [inst_2 : NonUnitalRing R] [inst_3 : StarRing R] [inst_4 : StarOrderedRing R] [inst_5 : NoZeroDivisors R]\n  {x y : k → R}, x ≠ 0 → y ≠ 0 → x ⬝ᵥ y = 0 → False\n```\n***\n`declId` matches `foo` or `foo.{u,v}`: an identifier possibly followed by a list of universe names ", "kind": "markdown"}}
{"character": "u", "row": 2, "column": 32, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 41}}, "contents": {"value": "```lean\nrow_dot_zero_extracted : ∀ {k : Type u_1} {R : Type u_2} [inst : Fintype k] [inst_1 : PartialOrder R]\n  [inst_2 : NonUnitalRing R] [inst_3 : StarRing R] [inst_4 : StarOrderedRing R] [inst_5 : NoZeroDivisors R]\n  {x y : k → R}, x ≠ 0 → y ≠ 0 → x ⬝ᵥ y = 0 → False\n```\n***\n`declId` matches `foo` or `foo.{u,v}`: an identifier possibly followed by a list of universe names ", "kind": "markdown"}}
{"character": "_", "row": 2, "column": 33, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 41}}, "contents": {"value": "```lean\nrow_dot_zero_extracted : ∀ {k : Type u_1} {R : Type u_2} [inst : Fintype k] [inst_1 : PartialOrder R]\n  [inst_2 : NonUnitalRing R] [inst_3 : StarRing R] [inst_4 : StarOrderedRing R] [inst_5 : NoZeroDivisors R]\n  {x y : k → R}, x ≠ 0 → y ≠ 0 → x ⬝ᵥ y = 0 → False\n```\n***\n`declId` matches `foo` or `foo.{u,v}`: an identifier possibly followed by a list of universe names ", "kind": "markdown"}}
{"character": "1", "row": 2, "column": 34, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 41}}, "contents": {"value": "```lean\nrow_dot_zero_extracted : ∀ {k : Type u_1} {R : Type u_2} [inst : Fintype k] [inst_1 : PartialOrder R]\n  [inst_2 : NonUnitalRing R] [inst_3 : StarRing R] [inst_4 : StarOrderedRing R] [inst_5 : NoZeroDivisors R]\n  {x y : k → R}, x ≠ 0 → y ≠ 0 → x ⬝ᵥ y = 0 → False\n```\n***\n`declId` matches `foo` or `foo.{u,v}`: an identifier possibly followed by a list of universe names ", "kind": "markdown"}}
{"character": ",", "row": 2, "column": 35, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 41}}, "contents": {"value": "```lean\nrow_dot_zero_extracted : ∀ {k : Type u_1} {R : Type u_2} [inst : Fintype k] [inst_1 : PartialOrder R]\n  [inst_2 : NonUnitalRing R] [inst_3 : StarRing R] [inst_4 : StarOrderedRing R] [inst_5 : NoZeroDivisors R]\n  {x y : k → R}, x ≠ 0 → y ≠ 0 → x ⬝ᵥ y = 0 → False\n```\n***\n`declId` matches `foo` or `foo.{u,v}`: an identifier possibly followed by a list of universe names ", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 36, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 41}}, "contents": {"value": "```lean\nrow_dot_zero_extracted : ∀ {k : Type u_1} {R : Type u_2} [inst : Fintype k] [inst_1 : PartialOrder R]\n  [inst_2 : NonUnitalRing R] [inst_3 : StarRing R] [inst_4 : StarOrderedRing R] [inst_5 : NoZeroDivisors R]\n  {x y : k → R}, x ≠ 0 → y ≠ 0 → x ⬝ᵥ y = 0 → False\n```\n***\n`declId` matches `foo` or `foo.{u,v}`: an identifier possibly followed by a list of universe names ", "kind": "markdown"}}
{"character": "u", "row": 2, "column": 37, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 41}}, "contents": {"value": "```lean\nrow_dot_zero_extracted : ∀ {k : Type u_1} {R : Type u_2} [inst : Fintype k] [inst_1 : PartialOrder R]\n  [inst_2 : NonUnitalRing R] [inst_3 : StarRing R] [inst_4 : StarOrderedRing R] [inst_5 : NoZeroDivisors R]\n  {x y : k → R}, x ≠ 0 → y ≠ 0 → x ⬝ᵥ y = 0 → False\n```\n***\n`declId` matches `foo` or `foo.{u,v}`: an identifier possibly followed by a list of universe names ", "kind": "markdown"}}
{"character": "_", "row": 2, "column": 38, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 41}}, "contents": {"value": "```lean\nrow_dot_zero_extracted : ∀ {k : Type u_1} {R : Type u_2} [inst : Fintype k] [inst_1 : PartialOrder R]\n  [inst_2 : NonUnitalRing R] [inst_3 : StarRing R] [inst_4 : StarOrderedRing R] [inst_5 : NoZeroDivisors R]\n  {x y : k → R}, x ≠ 0 → y ≠ 0 → x ⬝ᵥ y = 0 → False\n```\n***\n`declId` matches `foo` or `foo.{u,v}`: an identifier possibly followed by a list of universe names ", "kind": "markdown"}}
{"character": "2", "row": 2, "column": 39, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 41}}, "contents": {"value": "```lean\nrow_dot_zero_extracted : ∀ {k : Type u_1} {R : Type u_2} [inst : Fintype k] [inst_1 : PartialOrder R]\n  [inst_2 : NonUnitalRing R] [inst_3 : StarRing R] [inst_4 : StarOrderedRing R] [inst_5 : NoZeroDivisors R]\n  {x y : k → R}, x ≠ 0 → y ≠ 0 → x ⬝ᵥ y = 0 → False\n```\n***\n`declId` matches `foo` or `foo.{u,v}`: an identifier possibly followed by a list of universe names ", "kind": "markdown"}}
{"character": "}", "row": 2, "column": 40, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 41}}, "contents": {"value": "```lean\nrow_dot_zero_extracted : ∀ {k : Type u_1} {R : Type u_2} [inst : Fintype k] [inst_1 : PartialOrder R]\n  [inst_2 : NonUnitalRing R] [inst_3 : StarRing R] [inst_4 : StarOrderedRing R] [inst_5 : NoZeroDivisors R]\n  {x y : k → R}, x ≠ 0 → y ≠ 0 → x ⬝ᵥ y = 0 → False\n```\n***\n`declId` matches `foo` or `foo.{u,v}`: an identifier possibly followed by a list of universe names ", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 41}
{"character": "{", "row": 2, "column": 42, "range": {"start": {"line": 2, "character": 42}, "end": {"line": 2, "character": 56}}, "contents": {"value": "Implicit binder, like `{x y : A}` or `{x y}`.\nIn regular applications, whenever all parameters before it have been specified,\nthen a `_` placeholder is automatically inserted for this parameter.\nImplicit parameters should be able to be determined from the other arguments and the return type\nby unification.\n\nIn `@` explicit mode, implicit binders behave like explicit binders.\n", "kind": "markdown"}}
{"character": "k", "row": 2, "column": 43, "range": {"start": {"line": 2, "character": 43}, "end": {"line": 2, "character": 44}}, "contents": {"value": "```lean\nk : Type u_1\n```", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 44}
{"character": ":", "row": 2, "column": 45, "range": {"start": {"line": 2, "character": 42}, "end": {"line": 2, "character": 56}}, "contents": {"value": "Implicit binder, like `{x y : A}` or `{x y}`.\nIn regular applications, whenever all parameters before it have been specified,\nthen a `_` placeholder is automatically inserted for this parameter.\nImplicit parameters should be able to be determined from the other arguments and the return type\nby unification.\n\nIn `@` explicit mode, implicit binders behave like explicit binders.\n", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 46}
{"character": "T", "row": 2, "column": 47, "range": {"start": {"line": 2, "character": 47}, "end": {"line": 2, "character": 55}}, "contents": {"value": "A type universe. `Type ≡ Type 0`, `Type u ≡ Sort (u + 1)`. ", "kind": "markdown"}}
{"character": "y", "row": 2, "column": 48, "range": {"start": {"line": 2, "character": 47}, "end": {"line": 2, "character": 55}}, "contents": {"value": "A type universe. `Type ≡ Type 0`, `Type u ≡ Sort (u + 1)`. ", "kind": "markdown"}}
{"character": "p", "row": 2, "column": 49, "range": {"start": {"line": 2, "character": 47}, "end": {"line": 2, "character": 55}}, "contents": {"value": "A type universe. `Type ≡ Type 0`, `Type u ≡ Sort (u + 1)`. ", "kind": "markdown"}}
{"character": "e", "row": 2, "column": 50, "range": {"start": {"line": 2, "character": 47}, "end": {"line": 2, "character": 55}}, "contents": {"value": "A type universe. `Type ≡ Type 0`, `Type u ≡ Sort (u + 1)`. ", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 51, "range": {"start": {"line": 2, "character": 47}, "end": {"line": 2, "character": 55}}, "contents": {"value": "A type universe. `Type ≡ Type 0`, `Type u ≡ Sort (u + 1)`. ", "kind": "markdown"}}
{"character": "u", "row": 2, "column": 52, "range": {"start": {"line": 2, "character": 47}, "end": {"line": 2, "character": 55}}, "contents": {"value": "A type universe. `Type ≡ Type 0`, `Type u ≡ Sort (u + 1)`. ", "kind": "markdown"}}
{"character": "_", "row": 2, "column": 53, "range": {"start": {"line": 2, "character": 47}, "end": {"line": 2, "character": 55}}, "contents": {"value": "A type universe. `Type ≡ Type 0`, `Type u ≡ Sort (u + 1)`. ", "kind": "markdown"}}
{"character": "1", "row": 2, "column": 54, "range": {"start": {"line": 2, "character": 47}, "end": {"line": 2, "character": 55}}, "contents": {"value": "A type universe. `Type ≡ Type 0`, `Type u ≡ Sort (u + 1)`. ", "kind": "markdown"}}
{"character": "}", "row": 2, "column": 55, "range": {"start": {"line": 2, "character": 42}, "end": {"line": 2, "character": 56}}, "contents": {"value": "Implicit binder, like `{x y : A}` or `{x y}`.\nIn regular applications, whenever all parameters before it have been specified,\nthen a `_` placeholder is automatically inserted for this parameter.\nImplicit parameters should be able to be determined from the other arguments and the return type\nby unification.\n\nIn `@` explicit mode, implicit binders behave like explicit binders.\n", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 56}
{"character": "{", "row": 2, "column": 57, "range": {"start": {"line": 2, "character": 57}, "end": {"line": 2, "character": 71}}, "contents": {"value": "Implicit binder, like `{x y : A}` or `{x y}`.\nIn regular applications, whenever all parameters before it have been specified,\nthen a `_` placeholder is automatically inserted for this parameter.\nImplicit parameters should be able to be determined from the other arguments and the return type\nby unification.\n\nIn `@` explicit mode, implicit binders behave like explicit binders.\n", "kind": "markdown"}}
{"character": "R", "row": 2, "column": 58, "range": {"start": {"line": 2, "character": 58}, "end": {"line": 2, "character": 59}}, "contents": {"value": "```lean\nR : Type u_2\n```", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 59}
{"character": ":", "row": 2, "column": 60, "range": {"start": {"line": 2, "character": 57}, "end": {"line": 2, "character": 71}}, "contents": {"value": "Implicit binder, like `{x y : A}` or `{x y}`.\nIn regular applications, whenever all parameters before it have been specified,\nthen a `_` placeholder is automatically inserted for this parameter.\nImplicit parameters should be able to be determined from the other arguments and the return type\nby unification.\n\nIn `@` explicit mode, implicit binders behave like explicit binders.\n", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 61}
{"character": "T", "row": 2, "column": 62, "range": {"start": {"line": 2, "character": 62}, "end": {"line": 2, "character": 70}}, "contents": {"value": "A type universe. `Type ≡ Type 0`, `Type u ≡ Sort (u + 1)`. ", "kind": "markdown"}}
{"character": "y", "row": 2, "column": 63, "range": {"start": {"line": 2, "character": 62}, "end": {"line": 2, "character": 70}}, "contents": {"value": "A type universe. `Type ≡ Type 0`, `Type u ≡ Sort (u + 1)`. ", "kind": "markdown"}}
{"character": "p", "row": 2, "column": 64, "range": {"start": {"line": 2, "character": 62}, "end": {"line": 2, "character": 70}}, "contents": {"value": "A type universe. `Type ≡ Type 0`, `Type u ≡ Sort (u + 1)`. ", "kind": "markdown"}}
{"character": "e", "row": 2, "column": 65, "range": {"start": {"line": 2, "character": 62}, "end": {"line": 2, "character": 70}}, "contents": {"value": "A type universe. `Type ≡ Type 0`, `Type u ≡ Sort (u + 1)`. ", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 66, "range": {"start": {"line": 2, "character": 62}, "end": {"line": 2, "character": 70}}, "contents": {"value": "A type universe. `Type ≡ Type 0`, `Type u ≡ Sort (u + 1)`. ", "kind": "markdown"}}
{"character": "u", "row": 2, "column": 67, "range": {"start": {"line": 2, "character": 62}, "end": {"line": 2, "character": 70}}, "contents": {"value": "A type universe. `Type ≡ Type 0`, `Type u ≡ Sort (u + 1)`. ", "kind": "markdown"}}
{"character": "_", "row": 2, "column": 68, "range": {"start": {"line": 2, "character": 62}, "end": {"line": 2, "character": 70}}, "contents": {"value": "A type universe. `Type ≡ Type 0`, `Type u ≡ Sort (u + 1)`. ", "kind": "markdown"}}
{"character": "2", "row": 2, "column": 69, "range": {"start": {"line": 2, "character": 62}, "end": {"line": 2, "character": 70}}, "contents": {"value": "A type universe. `Type ≡ Type 0`, `Type u ≡ Sort (u + 1)`. ", "kind": "markdown"}}
{"character": "}", "row": 2, "column": 70, "range": {"start": {"line": 2, "character": 57}, "end": {"line": 2, "character": 71}}, "contents": {"value": "Implicit binder, like `{x y : A}` or `{x y}`.\nIn regular applications, whenever all parameters before it have been specified,\nthen a `_` placeholder is automatically inserted for this parameter.\nImplicit parameters should be able to be determined from the other arguments and the return type\nby unification.\n\nIn `@` explicit mode, implicit binders behave like explicit binders.\n", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 71}
{"character": "[", "row": 2, "column": 72, "range": {"start": {"line": 2, "character": 72}, "end": {"line": 2, "character": 83}}, "contents": {"value": "Instance-implicit binder, like `[C]` or `[inst : C]`.\nIn regular applications without `@` explicit mode, it is automatically inserted\nand solved for by typeclass inference for the specified class `C`.\nIn `@` explicit mode, if `_` is used for an instance-implicit parameter, then it is still solved for by typeclass inference;\nuse `(_)` to inhibit this and have it be solved for by unification instead, like an implicit argument.\n", "kind": "markdown"}}
{"character": "F", "row": 2, "column": 73, "range": {"start": {"line": 2, "character": 73}, "end": {"line": 2, "character": 80}}, "contents": {"value": "```lean\nFintype.{u_4} (α : Type u_4) : Type u_4\n```\n***\n`Fintype α` means that `α` is finite, i.e. there are only\nfinitely many distinct elements of type `α`. The evidence of this\nis a finset `elems` (a list up to permutation without duplicates),\ntogether with a proof that everything of type `α` is in the list. \n***\n*import Mathlib.Data.Fintype.Defs*", "kind": "markdown"}}
{"character": "i", "row": 2, "column": 74, "range": {"start": {"line": 2, "character": 73}, "end": {"line": 2, "character": 80}}, "contents": {"value": "```lean\nFintype.{u_4} (α : Type u_4) : Type u_4\n```\n***\n`Fintype α` means that `α` is finite, i.e. there are only\nfinitely many distinct elements of type `α`. The evidence of this\nis a finset `elems` (a list up to permutation without duplicates),\ntogether with a proof that everything of type `α` is in the list. \n***\n*import Mathlib.Data.Fintype.Defs*", "kind": "markdown"}}
{"character": "n", "row": 2, "column": 75, "range": {"start": {"line": 2, "character": 73}, "end": {"line": 2, "character": 80}}, "contents": {"value": "```lean\nFintype.{u_4} (α : Type u_4) : Type u_4\n```\n***\n`Fintype α` means that `α` is finite, i.e. there are only\nfinitely many distinct elements of type `α`. The evidence of this\nis a finset `elems` (a list up to permutation without duplicates),\ntogether with a proof that everything of type `α` is in the list. \n***\n*import Mathlib.Data.Fintype.Defs*", "kind": "markdown"}}
{"character": "t", "row": 2, "column": 76, "range": {"start": {"line": 2, "character": 73}, "end": {"line": 2, "character": 80}}, "contents": {"value": "```lean\nFintype.{u_4} (α : Type u_4) : Type u_4\n```\n***\n`Fintype α` means that `α` is finite, i.e. there are only\nfinitely many distinct elements of type `α`. The evidence of this\nis a finset `elems` (a list up to permutation without duplicates),\ntogether with a proof that everything of type `α` is in the list. \n***\n*import Mathlib.Data.Fintype.Defs*", "kind": "markdown"}}
{"character": "y", "row": 2, "column": 77, "range": {"start": {"line": 2, "character": 73}, "end": {"line": 2, "character": 80}}, "contents": {"value": "```lean\nFintype.{u_4} (α : Type u_4) : Type u_4\n```\n***\n`Fintype α` means that `α` is finite, i.e. there are only\nfinitely many distinct elements of type `α`. The evidence of this\nis a finset `elems` (a list up to permutation without duplicates),\ntogether with a proof that everything of type `α` is in the list. \n***\n*import Mathlib.Data.Fintype.Defs*", "kind": "markdown"}}
{"character": "p", "row": 2, "column": 78, "range": {"start": {"line": 2, "character": 73}, "end": {"line": 2, "character": 80}}, "contents": {"value": "```lean\nFintype.{u_4} (α : Type u_4) : Type u_4\n```\n***\n`Fintype α` means that `α` is finite, i.e. there are only\nfinitely many distinct elements of type `α`. The evidence of this\nis a finset `elems` (a list up to permutation without duplicates),\ntogether with a proof that everything of type `α` is in the list. \n***\n*import Mathlib.Data.Fintype.Defs*", "kind": "markdown"}}
{"character": "e", "row": 2, "column": 79, "range": {"start": {"line": 2, "character": 73}, "end": {"line": 2, "character": 80}}, "contents": {"value": "```lean\nFintype.{u_4} (α : Type u_4) : Type u_4\n```\n***\n`Fintype α` means that `α` is finite, i.e. there are only\nfinitely many distinct elements of type `α`. The evidence of this\nis a finset `elems` (a list up to permutation without duplicates),\ntogether with a proof that everything of type `α` is in the list. \n***\n*import Mathlib.Data.Fintype.Defs*", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 80, "range": {"start": {"line": 2, "character": 73}, "end": {"line": 2, "character": 82}}, "contents": {"value": "```lean\nType u_1\n```", "kind": "markdown"}}
{"character": "k", "row": 2, "column": 81, "range": {"start": {"line": 2, "character": 81}, "end": {"line": 2, "character": 82}}, "contents": {"value": "```lean\nk : Type u_1\n```", "kind": "markdown"}}
{"character": "]", "row": 2, "column": 82, "range": {"start": {"line": 2, "character": 72}, "end": {"line": 2, "character": 83}}, "contents": {"value": "Instance-implicit binder, like `[C]` or `[inst : C]`.\nIn regular applications without `@` explicit mode, it is automatically inserted\nand solved for by typeclass inference for the specified class `C`.\nIn `@` explicit mode, if `_` is used for an instance-implicit parameter, then it is still solved for by typeclass inference;\nuse `(_)` to inhibit this and have it be solved for by unification instead, like an implicit argument.\n", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 83}
{"character": "[", "row": 2, "column": 84, "range": {"start": {"line": 2, "character": 84}, "end": {"line": 2, "character": 100}}, "contents": {"value": "Instance-implicit binder, like `[C]` or `[inst : C]`.\nIn regular applications without `@` explicit mode, it is automatically inserted\nand solved for by typeclass inference for the specified class `C`.\nIn `@` explicit mode, if `_` is used for an instance-implicit parameter, then it is still solved for by typeclass inference;\nuse `(_)` to inhibit this and have it be solved for by unification instead, like an implicit argument.\n", "kind": "markdown"}}
{"character": "P", "row": 2, "column": 85, "range": {"start": {"line": 2, "character": 85}, "end": {"line": 2, "character": 97}}, "contents": {"value": "```lean\nPartialOrder.{u_2} (α : Type u_2) : Type u_2\n```\n***\nA partial order is a reflexive, transitive, antisymmetric relation `≤`. \n***\n*import Mathlib.Order.Defs.PartialOrder*", "kind": "markdown"}}
{"character": "a", "row": 2, "column": 86, "range": {"start": {"line": 2, "character": 85}, "end": {"line": 2, "character": 97}}, "contents": {"value": "```lean\nPartialOrder.{u_2} (α : Type u_2) : Type u_2\n```\n***\nA partial order is a reflexive, transitive, antisymmetric relation `≤`. \n***\n*import Mathlib.Order.Defs.PartialOrder*", "kind": "markdown"}}
{"character": "r", "row": 2, "column": 87, "range": {"start": {"line": 2, "character": 85}, "end": {"line": 2, "character": 97}}, "contents": {"value": "```lean\nPartialOrder.{u_2} (α : Type u_2) : Type u_2\n```\n***\nA partial order is a reflexive, transitive, antisymmetric relation `≤`. \n***\n*import Mathlib.Order.Defs.PartialOrder*", "kind": "markdown"}}
{"character": "t", "row": 2, "column": 88, "range": {"start": {"line": 2, "character": 85}, "end": {"line": 2, "character": 97}}, "contents": {"value": "```lean\nPartialOrder.{u_2} (α : Type u_2) : Type u_2\n```\n***\nA partial order is a reflexive, transitive, antisymmetric relation `≤`. \n***\n*import Mathlib.Order.Defs.PartialOrder*", "kind": "markdown"}}
{"character": "i", "row": 2, "column": 89, "range": {"start": {"line": 2, "character": 85}, "end": {"line": 2, "character": 97}}, "contents": {"value": "```lean\nPartialOrder.{u_2} (α : Type u_2) : Type u_2\n```\n***\nA partial order is a reflexive, transitive, antisymmetric relation `≤`. \n***\n*import Mathlib.Order.Defs.PartialOrder*", "kind": "markdown"}}
{"character": "a", "row": 2, "column": 90, "range": {"start": {"line": 2, "character": 85}, "end": {"line": 2, "character": 97}}, "contents": {"value": "```lean\nPartialOrder.{u_2} (α : Type u_2) : Type u_2\n```\n***\nA partial order is a reflexive, transitive, antisymmetric relation `≤`. \n***\n*import Mathlib.Order.Defs.PartialOrder*", "kind": "markdown"}}
{"character": "l", "row": 2, "column": 91, "range": {"start": {"line": 2, "character": 85}, "end": {"line": 2, "character": 97}}, "contents": {"value": "```lean\nPartialOrder.{u_2} (α : Type u_2) : Type u_2\n```\n***\nA partial order is a reflexive, transitive, antisymmetric relation `≤`. \n***\n*import Mathlib.Order.Defs.PartialOrder*", "kind": "markdown"}}
{"character": "O", "row": 2, "column": 92, "range": {"start": {"line": 2, "character": 85}, "end": {"line": 2, "character": 97}}, "contents": {"value": "```lean\nPartialOrder.{u_2} (α : Type u_2) : Type u_2\n```\n***\nA partial order is a reflexive, transitive, antisymmetric relation `≤`. \n***\n*import Mathlib.Order.Defs.PartialOrder*", "kind": "markdown"}}
{"character": "r", "row": 2, "column": 93, "range": {"start": {"line": 2, "character": 85}, "end": {"line": 2, "character": 97}}, "contents": {"value": "```lean\nPartialOrder.{u_2} (α : Type u_2) : Type u_2\n```\n***\nA partial order is a reflexive, transitive, antisymmetric relation `≤`. \n***\n*import Mathlib.Order.Defs.PartialOrder*", "kind": "markdown"}}
{"character": "d", "row": 2, "column": 94, "range": {"start": {"line": 2, "character": 85}, "end": {"line": 2, "character": 97}}, "contents": {"value": "```lean\nPartialOrder.{u_2} (α : Type u_2) : Type u_2\n```\n***\nA partial order is a reflexive, transitive, antisymmetric relation `≤`. \n***\n*import Mathlib.Order.Defs.PartialOrder*", "kind": "markdown"}}
{"character": "e", "row": 2, "column": 95, "range": {"start": {"line": 2, "character": 85}, "end": {"line": 2, "character": 97}}, "contents": {"value": "```lean\nPartialOrder.{u_2} (α : Type u_2) : Type u_2\n```\n***\nA partial order is a reflexive, transitive, antisymmetric relation `≤`. \n***\n*import Mathlib.Order.Defs.PartialOrder*", "kind": "markdown"}}
{"character": "r", "row": 2, "column": 96, "range": {"start": {"line": 2, "character": 85}, "end": {"line": 2, "character": 97}}, "contents": {"value": "```lean\nPartialOrder.{u_2} (α : Type u_2) : Type u_2\n```\n***\nA partial order is a reflexive, transitive, antisymmetric relation `≤`. \n***\n*import Mathlib.Order.Defs.PartialOrder*", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 97, "range": {"start": {"line": 2, "character": 85}, "end": {"line": 2, "character": 99}}, "contents": {"value": "```lean\nType u_2\n```", "kind": "markdown"}}
{"character": "R", "row": 2, "column": 98, "range": {"start": {"line": 2, "character": 98}, "end": {"line": 2, "character": 99}}, "contents": {"value": "```lean\nR : Type u_2\n```", "kind": "markdown"}}
{"character": "]", "row": 2, "column": 99, "range": {"start": {"line": 2, "character": 84}, "end": {"line": 2, "character": 100}}, "contents": {"value": "Instance-implicit binder, like `[C]` or `[inst : C]`.\nIn regular applications without `@` explicit mode, it is automatically inserted\nand solved for by typeclass inference for the specified class `C`.\nIn `@` explicit mode, if `_` is used for an instance-implicit parameter, then it is still solved for by typeclass inference;\nuse `(_)` to inhibit this and have it be solved for by unification instead, like an implicit argument.\n", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 100}
{"character": "[", "row": 2, "column": 101, "range": {"start": {"line": 2, "character": 101}, "end": {"line": 2, "character": 118}}, "contents": {"value": "Instance-implicit binder, like `[C]` or `[inst : C]`.\nIn regular applications without `@` explicit mode, it is automatically inserted\nand solved for by typeclass inference for the specified class `C`.\nIn `@` explicit mode, if `_` is used for an instance-implicit parameter, then it is still solved for by typeclass inference;\nuse `(_)` to inhibit this and have it be solved for by unification instead, like an implicit argument.\n", "kind": "markdown"}}
{"character": "N", "row": 2, "column": 102, "range": {"start": {"line": 2, "character": 102}, "end": {"line": 2, "character": 115}}, "contents": {"value": "```lean\nNonUnitalRing.{u_1} (α : Type u_1) : Type u_1\n```\n***\nAn associative but not-necessarily unital ring. \n***\n*import Mathlib.Algebra.Ring.Defs*", "kind": "markdown"}}
{"character": "o", "row": 2, "column": 103, "range": {"start": {"line": 2, "character": 102}, "end": {"line": 2, "character": 115}}, "contents": {"value": "```lean\nNonUnitalRing.{u_1} (α : Type u_1) : Type u_1\n```\n***\nAn associative but not-necessarily unital ring. \n***\n*import Mathlib.Algebra.Ring.Defs*", "kind": "markdown"}}
{"character": "n", "row": 2, "column": 104, "range": {"start": {"line": 2, "character": 102}, "end": {"line": 2, "character": 115}}, "contents": {"value": "```lean\nNonUnitalRing.{u_1} (α : Type u_1) : Type u_1\n```\n***\nAn associative but not-necessarily unital ring. \n***\n*import Mathlib.Algebra.Ring.Defs*", "kind": "markdown"}}
{"character": "U", "row": 2, "column": 105, "range": {"start": {"line": 2, "character": 102}, "end": {"line": 2, "character": 115}}, "contents": {"value": "```lean\nNonUnitalRing.{u_1} (α : Type u_1) : Type u_1\n```\n***\nAn associative but not-necessarily unital ring. \n***\n*import Mathlib.Algebra.Ring.Defs*", "kind": "markdown"}}
{"character": "n", "row": 2, "column": 106, "range": {"start": {"line": 2, "character": 102}, "end": {"line": 2, "character": 115}}, "contents": {"value": "```lean\nNonUnitalRing.{u_1} (α : Type u_1) : Type u_1\n```\n***\nAn associative but not-necessarily unital ring. \n***\n*import Mathlib.Algebra.Ring.Defs*", "kind": "markdown"}}
{"character": "i", "row": 2, "column": 107, "range": {"start": {"line": 2, "character": 102}, "end": {"line": 2, "character": 115}}, "contents": {"value": "```lean\nNonUnitalRing.{u_1} (α : Type u_1) : Type u_1\n```\n***\nAn associative but not-necessarily unital ring. \n***\n*import Mathlib.Algebra.Ring.Defs*", "kind": "markdown"}}
{"character": "t", "row": 2, "column": 108, "range": {"start": {"line": 2, "character": 102}, "end": {"line": 2, "character": 115}}, "contents": {"value": "```lean\nNonUnitalRing.{u_1} (α : Type u_1) : Type u_1\n```\n***\nAn associative but not-necessarily unital ring. \n***\n*import Mathlib.Algebra.Ring.Defs*", "kind": "markdown"}}
{"character": "a", "row": 2, "column": 109, "range": {"start": {"line": 2, "character": 102}, "end": {"line": 2, "character": 115}}, "contents": {"value": "```lean\nNonUnitalRing.{u_1} (α : Type u_1) : Type u_1\n```\n***\nAn associative but not-necessarily unital ring. \n***\n*import Mathlib.Algebra.Ring.Defs*", "kind": "markdown"}}
{"character": "l", "row": 2, "column": 110, "range": {"start": {"line": 2, "character": 102}, "end": {"line": 2, "character": 115}}, "contents": {"value": "```lean\nNonUnitalRing.{u_1} (α : Type u_1) : Type u_1\n```\n***\nAn associative but not-necessarily unital ring. \n***\n*import Mathlib.Algebra.Ring.Defs*", "kind": "markdown"}}
{"character": "R", "row": 2, "column": 111, "range": {"start": {"line": 2, "character": 102}, "end": {"line": 2, "character": 115}}, "contents": {"value": "```lean\nNonUnitalRing.{u_1} (α : Type u_1) : Type u_1\n```\n***\nAn associative but not-necessarily unital ring. \n***\n*import Mathlib.Algebra.Ring.Defs*", "kind": "markdown"}}
{"character": "i", "row": 2, "column": 112, "range": {"start": {"line": 2, "character": 102}, "end": {"line": 2, "character": 115}}, "contents": {"value": "```lean\nNonUnitalRing.{u_1} (α : Type u_1) : Type u_1\n```\n***\nAn associative but not-necessarily unital ring. \n***\n*import Mathlib.Algebra.Ring.Defs*", "kind": "markdown"}}
{"character": "n", "row": 2, "column": 113, "range": {"start": {"line": 2, "character": 102}, "end": {"line": 2, "character": 115}}, "contents": {"value": "```lean\nNonUnitalRing.{u_1} (α : Type u_1) : Type u_1\n```\n***\nAn associative but not-necessarily unital ring. \n***\n*import Mathlib.Algebra.Ring.Defs*", "kind": "markdown"}}
{"character": "g", "row": 2, "column": 114, "range": {"start": {"line": 2, "character": 102}, "end": {"line": 2, "character": 115}}, "contents": {"value": "```lean\nNonUnitalRing.{u_1} (α : Type u_1) : Type u_1\n```\n***\nAn associative but not-necessarily unital ring. \n***\n*import Mathlib.Algebra.Ring.Defs*", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 115, "range": {"start": {"line": 2, "character": 102}, "end": {"line": 2, "character": 117}}, "contents": {"value": "```lean\nType u_2\n```", "kind": "markdown"}}
{"character": "R", "row": 2, "column": 116, "range": {"start": {"line": 2, "character": 116}, "end": {"line": 2, "character": 117}}, "contents": {"value": "```lean\nR : Type u_2\n```", "kind": "markdown"}}
{"character": "]", "row": 2, "column": 117, "range": {"start": {"line": 2, "character": 101}, "end": {"line": 2, "character": 118}}, "contents": {"value": "Instance-implicit binder, like `[C]` or `[inst : C]`.\nIn regular applications without `@` explicit mode, it is automatically inserted\nand solved for by typeclass inference for the specified class `C`.\nIn `@` explicit mode, if `_` is used for an instance-implicit parameter, then it is still solved for by typeclass inference;\nuse `(_)` to inhibit this and have it be solved for by unification instead, like an implicit argument.\n", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 118}
{"character": "[", "row": 2, "column": 119, "range": {"start": {"line": 2, "character": 119}, "end": {"line": 2, "character": 131}}, "contents": {"value": "Instance-implicit binder, like `[C]` or `[inst : C]`.\nIn regular applications without `@` explicit mode, it is automatically inserted\nand solved for by typeclass inference for the specified class `C`.\nIn `@` explicit mode, if `_` is used for an instance-implicit parameter, then it is still solved for by typeclass inference;\nuse `(_)` to inhibit this and have it be solved for by unification instead, like an implicit argument.\n", "kind": "markdown"}}
{"character": "S", "row": 2, "column": 120, "range": {"start": {"line": 2, "character": 120}, "end": {"line": 2, "character": 128}}, "contents": {"value": "```lean\nStarRing.{u} (R : Type u) [NonUnitalNonAssocSemiring R] : Type u\n```\n***\nA `*`-ring `R` is a non-unital, non-associative (semi)ring with an involutive `star` operation\nwhich is additive which makes `R` with its multiplicative structure into a `*`-multiplication\n(i.e. `star (r * s) = star s * star r`). \n***\n*import Mathlib.Algebra.Star.Basic*", "kind": "markdown"}}
{"character": "t", "row": 2, "column": 121, "range": {"start": {"line": 2, "character": 120}, "end": {"line": 2, "character": 128}}, "contents": {"value": "```lean\nStarRing.{u} (R : Type u) [NonUnitalNonAssocSemiring R] : Type u\n```\n***\nA `*`-ring `R` is a non-unital, non-associative (semi)ring with an involutive `star` operation\nwhich is additive which makes `R` with its multiplicative structure into a `*`-multiplication\n(i.e. `star (r * s) = star s * star r`). \n***\n*import Mathlib.Algebra.Star.Basic*", "kind": "markdown"}}
{"character": "a", "row": 2, "column": 122, "range": {"start": {"line": 2, "character": 120}, "end": {"line": 2, "character": 128}}, "contents": {"value": "```lean\nStarRing.{u} (R : Type u) [NonUnitalNonAssocSemiring R] : Type u\n```\n***\nA `*`-ring `R` is a non-unital, non-associative (semi)ring with an involutive `star` operation\nwhich is additive which makes `R` with its multiplicative structure into a `*`-multiplication\n(i.e. `star (r * s) = star s * star r`). \n***\n*import Mathlib.Algebra.Star.Basic*", "kind": "markdown"}}
{"character": "r", "row": 2, "column": 123, "range": {"start": {"line": 2, "character": 120}, "end": {"line": 2, "character": 128}}, "contents": {"value": "```lean\nStarRing.{u} (R : Type u) [NonUnitalNonAssocSemiring R] : Type u\n```\n***\nA `*`-ring `R` is a non-unital, non-associative (semi)ring with an involutive `star` operation\nwhich is additive which makes `R` with its multiplicative structure into a `*`-multiplication\n(i.e. `star (r * s) = star s * star r`). \n***\n*import Mathlib.Algebra.Star.Basic*", "kind": "markdown"}}
{"character": "R", "row": 2, "column": 124, "range": {"start": {"line": 2, "character": 120}, "end": {"line": 2, "character": 128}}, "contents": {"value": "```lean\nStarRing.{u} (R : Type u) [NonUnitalNonAssocSemiring R] : Type u\n```\n***\nA `*`-ring `R` is a non-unital, non-associative (semi)ring with an involutive `star` operation\nwhich is additive which makes `R` with its multiplicative structure into a `*`-multiplication\n(i.e. `star (r * s) = star s * star r`). \n***\n*import Mathlib.Algebra.Star.Basic*", "kind": "markdown"}}
{"character": "i", "row": 2, "column": 125, "range": {"start": {"line": 2, "character": 120}, "end": {"line": 2, "character": 128}}, "contents": {"value": "```lean\nStarRing.{u} (R : Type u) [NonUnitalNonAssocSemiring R] : Type u\n```\n***\nA `*`-ring `R` is a non-unital, non-associative (semi)ring with an involutive `star` operation\nwhich is additive which makes `R` with its multiplicative structure into a `*`-multiplication\n(i.e. `star (r * s) = star s * star r`). \n***\n*import Mathlib.Algebra.Star.Basic*", "kind": "markdown"}}
{"character": "n", "row": 2, "column": 126, "range": {"start": {"line": 2, "character": 120}, "end": {"line": 2, "character": 128}}, "contents": {"value": "```lean\nStarRing.{u} (R : Type u) [NonUnitalNonAssocSemiring R] : Type u\n```\n***\nA `*`-ring `R` is a non-unital, non-associative (semi)ring with an involutive `star` operation\nwhich is additive which makes `R` with its multiplicative structure into a `*`-multiplication\n(i.e. `star (r * s) = star s * star r`). \n***\n*import Mathlib.Algebra.Star.Basic*", "kind": "markdown"}}
{"character": "g", "row": 2, "column": 127, "range": {"start": {"line": 2, "character": 120}, "end": {"line": 2, "character": 128}}, "contents": {"value": "```lean\nStarRing.{u} (R : Type u) [NonUnitalNonAssocSemiring R] : Type u\n```\n***\nA `*`-ring `R` is a non-unital, non-associative (semi)ring with an involutive `star` operation\nwhich is additive which makes `R` with its multiplicative structure into a `*`-multiplication\n(i.e. `star (r * s) = star s * star r`). \n***\n*import Mathlib.Algebra.Star.Basic*", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 128, "range": {"start": {"line": 2, "character": 120}, "end": {"line": 2, "character": 130}}, "contents": {"value": "```lean\nType u_2\n```", "kind": "markdown"}}
{"character": "R", "row": 2, "column": 129, "range": {"start": {"line": 2, "character": 129}, "end": {"line": 2, "character": 130}}, "contents": {"value": "```lean\nR : Type u_2\n```", "kind": "markdown"}}
{"character": "]", "row": 2, "column": 130, "range": {"start": {"line": 2, "character": 119}, "end": {"line": 2, "character": 131}}, "contents": {"value": "Instance-implicit binder, like `[C]` or `[inst : C]`.\nIn regular applications without `@` explicit mode, it is automatically inserted\nand solved for by typeclass inference for the specified class `C`.\nIn `@` explicit mode, if `_` is used for an instance-implicit parameter, then it is still solved for by typeclass inference;\nuse `(_)` to inhibit this and have it be solved for by unification instead, like an implicit argument.\n", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 131}
{"character": "[", "row": 2, "column": 132, "range": {"start": {"line": 2, "character": 132}, "end": {"line": 2, "character": 151}}, "contents": {"value": "Instance-implicit binder, like `[C]` or `[inst : C]`.\nIn regular applications without `@` explicit mode, it is automatically inserted\nand solved for by typeclass inference for the specified class `C`.\nIn `@` explicit mode, if `_` is used for an instance-implicit parameter, then it is still solved for by typeclass inference;\nuse `(_)` to inhibit this and have it be solved for by unification instead, like an implicit argument.\n", "kind": "markdown"}}
{"character": "S", "row": 2, "column": 133, "range": {"start": {"line": 2, "character": 133}, "end": {"line": 2, "character": 148}}, "contents": {"value": "```lean\nStarOrderedRing.{u} (R : Type u) [NonUnitalSemiring R] [PartialOrder R] [StarRing R] : Prop\n```\n***\nAn ordered `*`-ring is a `*`ring with a partial order such that the nonnegative elements\nconstitute precisely the `AddSubmonoid` generated by elements of the form `star s * s`.\n\nIf you are working with a `NonUnitalRing` and not a `NonUnitalSemiring`, it may be more\nconvenient to declare instances using `StarOrderedRing.of_nonneg_iff`. \n***\n*import Mathlib.Algebra.Order.Star.Basic*", "kind": "markdown"}}
{"character": "t", "row": 2, "column": 134, "range": {"start": {"line": 2, "character": 133}, "end": {"line": 2, "character": 148}}, "contents": {"value": "```lean\nStarOrderedRing.{u} (R : Type u) [NonUnitalSemiring R] [PartialOrder R] [StarRing R] : Prop\n```\n***\nAn ordered `*`-ring is a `*`ring with a partial order such that the nonnegative elements\nconstitute precisely the `AddSubmonoid` generated by elements of the form `star s * s`.\n\nIf you are working with a `NonUnitalRing` and not a `NonUnitalSemiring`, it may be more\nconvenient to declare instances using `StarOrderedRing.of_nonneg_iff`. \n***\n*import Mathlib.Algebra.Order.Star.Basic*", "kind": "markdown"}}
{"character": "a", "row": 2, "column": 135, "range": {"start": {"line": 2, "character": 133}, "end": {"line": 2, "character": 148}}, "contents": {"value": "```lean\nStarOrderedRing.{u} (R : Type u) [NonUnitalSemiring R] [PartialOrder R] [StarRing R] : Prop\n```\n***\nAn ordered `*`-ring is a `*`ring with a partial order such that the nonnegative elements\nconstitute precisely the `AddSubmonoid` generated by elements of the form `star s * s`.\n\nIf you are working with a `NonUnitalRing` and not a `NonUnitalSemiring`, it may be more\nconvenient to declare instances using `StarOrderedRing.of_nonneg_iff`. \n***\n*import Mathlib.Algebra.Order.Star.Basic*", "kind": "markdown"}}
{"character": "r", "row": 2, "column": 136, "range": {"start": {"line": 2, "character": 133}, "end": {"line": 2, "character": 148}}, "contents": {"value": "```lean\nStarOrderedRing.{u} (R : Type u) [NonUnitalSemiring R] [PartialOrder R] [StarRing R] : Prop\n```\n***\nAn ordered `*`-ring is a `*`ring with a partial order such that the nonnegative elements\nconstitute precisely the `AddSubmonoid` generated by elements of the form `star s * s`.\n\nIf you are working with a `NonUnitalRing` and not a `NonUnitalSemiring`, it may be more\nconvenient to declare instances using `StarOrderedRing.of_nonneg_iff`. \n***\n*import Mathlib.Algebra.Order.Star.Basic*", "kind": "markdown"}}
{"character": "O", "row": 2, "column": 137, "range": {"start": {"line": 2, "character": 133}, "end": {"line": 2, "character": 148}}, "contents": {"value": "```lean\nStarOrderedRing.{u} (R : Type u) [NonUnitalSemiring R] [PartialOrder R] [StarRing R] : Prop\n```\n***\nAn ordered `*`-ring is a `*`ring with a partial order such that the nonnegative elements\nconstitute precisely the `AddSubmonoid` generated by elements of the form `star s * s`.\n\nIf you are working with a `NonUnitalRing` and not a `NonUnitalSemiring`, it may be more\nconvenient to declare instances using `StarOrderedRing.of_nonneg_iff`. \n***\n*import Mathlib.Algebra.Order.Star.Basic*", "kind": "markdown"}}
{"character": "r", "row": 2, "column": 138, "range": {"start": {"line": 2, "character": 133}, "end": {"line": 2, "character": 148}}, "contents": {"value": "```lean\nStarOrderedRing.{u} (R : Type u) [NonUnitalSemiring R] [PartialOrder R] [StarRing R] : Prop\n```\n***\nAn ordered `*`-ring is a `*`ring with a partial order such that the nonnegative elements\nconstitute precisely the `AddSubmonoid` generated by elements of the form `star s * s`.\n\nIf you are working with a `NonUnitalRing` and not a `NonUnitalSemiring`, it may be more\nconvenient to declare instances using `StarOrderedRing.of_nonneg_iff`. \n***\n*import Mathlib.Algebra.Order.Star.Basic*", "kind": "markdown"}}
{"character": "d", "row": 2, "column": 139, "range": {"start": {"line": 2, "character": 133}, "end": {"line": 2, "character": 148}}, "contents": {"value": "```lean\nStarOrderedRing.{u} (R : Type u) [NonUnitalSemiring R] [PartialOrder R] [StarRing R] : Prop\n```\n***\nAn ordered `*`-ring is a `*`ring with a partial order such that the nonnegative elements\nconstitute precisely the `AddSubmonoid` generated by elements of the form `star s * s`.\n\nIf you are working with a `NonUnitalRing` and not a `NonUnitalSemiring`, it may be more\nconvenient to declare instances using `StarOrderedRing.of_nonneg_iff`. \n***\n*import Mathlib.Algebra.Order.Star.Basic*", "kind": "markdown"}}
{"character": "e", "row": 2, "column": 140, "range": {"start": {"line": 2, "character": 133}, "end": {"line": 2, "character": 148}}, "contents": {"value": "```lean\nStarOrderedRing.{u} (R : Type u) [NonUnitalSemiring R] [PartialOrder R] [StarRing R] : Prop\n```\n***\nAn ordered `*`-ring is a `*`ring with a partial order such that the nonnegative elements\nconstitute precisely the `AddSubmonoid` generated by elements of the form `star s * s`.\n\nIf you are working with a `NonUnitalRing` and not a `NonUnitalSemiring`, it may be more\nconvenient to declare instances using `StarOrderedRing.of_nonneg_iff`. \n***\n*import Mathlib.Algebra.Order.Star.Basic*", "kind": "markdown"}}
{"character": "r", "row": 2, "column": 141, "range": {"start": {"line": 2, "character": 133}, "end": {"line": 2, "character": 148}}, "contents": {"value": "```lean\nStarOrderedRing.{u} (R : Type u) [NonUnitalSemiring R] [PartialOrder R] [StarRing R] : Prop\n```\n***\nAn ordered `*`-ring is a `*`ring with a partial order such that the nonnegative elements\nconstitute precisely the `AddSubmonoid` generated by elements of the form `star s * s`.\n\nIf you are working with a `NonUnitalRing` and not a `NonUnitalSemiring`, it may be more\nconvenient to declare instances using `StarOrderedRing.of_nonneg_iff`. \n***\n*import Mathlib.Algebra.Order.Star.Basic*", "kind": "markdown"}}
{"character": "e", "row": 2, "column": 142, "range": {"start": {"line": 2, "character": 133}, "end": {"line": 2, "character": 148}}, "contents": {"value": "```lean\nStarOrderedRing.{u} (R : Type u) [NonUnitalSemiring R] [PartialOrder R] [StarRing R] : Prop\n```\n***\nAn ordered `*`-ring is a `*`ring with a partial order such that the nonnegative elements\nconstitute precisely the `AddSubmonoid` generated by elements of the form `star s * s`.\n\nIf you are working with a `NonUnitalRing` and not a `NonUnitalSemiring`, it may be more\nconvenient to declare instances using `StarOrderedRing.of_nonneg_iff`. \n***\n*import Mathlib.Algebra.Order.Star.Basic*", "kind": "markdown"}}
{"character": "d", "row": 2, "column": 143, "range": {"start": {"line": 2, "character": 133}, "end": {"line": 2, "character": 148}}, "contents": {"value": "```lean\nStarOrderedRing.{u} (R : Type u) [NonUnitalSemiring R] [PartialOrder R] [StarRing R] : Prop\n```\n***\nAn ordered `*`-ring is a `*`ring with a partial order such that the nonnegative elements\nconstitute precisely the `AddSubmonoid` generated by elements of the form `star s * s`.\n\nIf you are working with a `NonUnitalRing` and not a `NonUnitalSemiring`, it may be more\nconvenient to declare instances using `StarOrderedRing.of_nonneg_iff`. \n***\n*import Mathlib.Algebra.Order.Star.Basic*", "kind": "markdown"}}
{"character": "R", "row": 2, "column": 144, "range": {"start": {"line": 2, "character": 133}, "end": {"line": 2, "character": 148}}, "contents": {"value": "```lean\nStarOrderedRing.{u} (R : Type u) [NonUnitalSemiring R] [PartialOrder R] [StarRing R] : Prop\n```\n***\nAn ordered `*`-ring is a `*`ring with a partial order such that the nonnegative elements\nconstitute precisely the `AddSubmonoid` generated by elements of the form `star s * s`.\n\nIf you are working with a `NonUnitalRing` and not a `NonUnitalSemiring`, it may be more\nconvenient to declare instances using `StarOrderedRing.of_nonneg_iff`. \n***\n*import Mathlib.Algebra.Order.Star.Basic*", "kind": "markdown"}}
{"character": "i", "row": 2, "column": 145, "range": {"start": {"line": 2, "character": 133}, "end": {"line": 2, "character": 148}}, "contents": {"value": "```lean\nStarOrderedRing.{u} (R : Type u) [NonUnitalSemiring R] [PartialOrder R] [StarRing R] : Prop\n```\n***\nAn ordered `*`-ring is a `*`ring with a partial order such that the nonnegative elements\nconstitute precisely the `AddSubmonoid` generated by elements of the form `star s * s`.\n\nIf you are working with a `NonUnitalRing` and not a `NonUnitalSemiring`, it may be more\nconvenient to declare instances using `StarOrderedRing.of_nonneg_iff`. \n***\n*import Mathlib.Algebra.Order.Star.Basic*", "kind": "markdown"}}
{"character": "n", "row": 2, "column": 146, "range": {"start": {"line": 2, "character": 133}, "end": {"line": 2, "character": 148}}, "contents": {"value": "```lean\nStarOrderedRing.{u} (R : Type u) [NonUnitalSemiring R] [PartialOrder R] [StarRing R] : Prop\n```\n***\nAn ordered `*`-ring is a `*`ring with a partial order such that the nonnegative elements\nconstitute precisely the `AddSubmonoid` generated by elements of the form `star s * s`.\n\nIf you are working with a `NonUnitalRing` and not a `NonUnitalSemiring`, it may be more\nconvenient to declare instances using `StarOrderedRing.of_nonneg_iff`. \n***\n*import Mathlib.Algebra.Order.Star.Basic*", "kind": "markdown"}}
{"character": "g", "row": 2, "column": 147, "range": {"start": {"line": 2, "character": 133}, "end": {"line": 2, "character": 148}}, "contents": {"value": "```lean\nStarOrderedRing.{u} (R : Type u) [NonUnitalSemiring R] [PartialOrder R] [StarRing R] : Prop\n```\n***\nAn ordered `*`-ring is a `*`ring with a partial order such that the nonnegative elements\nconstitute precisely the `AddSubmonoid` generated by elements of the form `star s * s`.\n\nIf you are working with a `NonUnitalRing` and not a `NonUnitalSemiring`, it may be more\nconvenient to declare instances using `StarOrderedRing.of_nonneg_iff`. \n***\n*import Mathlib.Algebra.Order.Star.Basic*", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 148, "range": {"start": {"line": 2, "character": 133}, "end": {"line": 2, "character": 150}}, "contents": {"value": "```lean\nProp\n```", "kind": "markdown"}}
{"character": "R", "row": 2, "column": 149, "range": {"start": {"line": 2, "character": 149}, "end": {"line": 2, "character": 150}}, "contents": {"value": "```lean\nR : Type u_2\n```", "kind": "markdown"}}
{"character": "]", "row": 2, "column": 150, "range": {"start": {"line": 2, "character": 132}, "end": {"line": 2, "character": 151}}, "contents": {"value": "Instance-implicit binder, like `[C]` or `[inst : C]`.\nIn regular applications without `@` explicit mode, it is automatically inserted\nand solved for by typeclass inference for the specified class `C`.\nIn `@` explicit mode, if `_` is used for an instance-implicit parameter, then it is still solved for by typeclass inference;\nuse `(_)` to inhibit this and have it be solved for by unification instead, like an implicit argument.\n", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 151}
{"character": "[", "row": 2, "column": 152, "range": {"start": {"line": 2, "character": 152}, "end": {"line": 2, "character": 170}}, "contents": {"value": "Instance-implicit binder, like `[C]` or `[inst : C]`.\nIn regular applications without `@` explicit mode, it is automatically inserted\nand solved for by typeclass inference for the specified class `C`.\nIn `@` explicit mode, if `_` is used for an instance-implicit parameter, then it is still solved for by typeclass inference;\nuse `(_)` to inhibit this and have it be solved for by unification instead, like an implicit argument.\n", "kind": "markdown"}}
{"character": "N", "row": 2, "column": 153, "range": {"start": {"line": 2, "character": 153}, "end": {"line": 2, "character": 167}}, "contents": {"value": "```lean\nNoZeroDivisors.{u_2} (M₀ : Type u_2) [Mul M₀] [Zero M₀] : Prop\n```\n***\nPredicate typeclass for expressing that `a * b = 0` implies `a = 0` or `b = 0`\nfor all `a` and `b` of type `G₀`. \n***\n*import Mathlib.Algebra.GroupWithZero.Defs*", "kind": "markdown"}}
{"character": "o", "row": 2, "column": 154, "range": {"start": {"line": 2, "character": 153}, "end": {"line": 2, "character": 167}}, "contents": {"value": "```lean\nNoZeroDivisors.{u_2} (M₀ : Type u_2) [Mul M₀] [Zero M₀] : Prop\n```\n***\nPredicate typeclass for expressing that `a * b = 0` implies `a = 0` or `b = 0`\nfor all `a` and `b` of type `G₀`. \n***\n*import Mathlib.Algebra.GroupWithZero.Defs*", "kind": "markdown"}}
{"character": "Z", "row": 2, "column": 155, "range": {"start": {"line": 2, "character": 153}, "end": {"line": 2, "character": 167}}, "contents": {"value": "```lean\nNoZeroDivisors.{u_2} (M₀ : Type u_2) [Mul M₀] [Zero M₀] : Prop\n```\n***\nPredicate typeclass for expressing that `a * b = 0` implies `a = 0` or `b = 0`\nfor all `a` and `b` of type `G₀`. \n***\n*import Mathlib.Algebra.GroupWithZero.Defs*", "kind": "markdown"}}
{"character": "e", "row": 2, "column": 156, "range": {"start": {"line": 2, "character": 153}, "end": {"line": 2, "character": 167}}, "contents": {"value": "```lean\nNoZeroDivisors.{u_2} (M₀ : Type u_2) [Mul M₀] [Zero M₀] : Prop\n```\n***\nPredicate typeclass for expressing that `a * b = 0` implies `a = 0` or `b = 0`\nfor all `a` and `b` of type `G₀`. \n***\n*import Mathlib.Algebra.GroupWithZero.Defs*", "kind": "markdown"}}
{"character": "r", "row": 2, "column": 157, "range": {"start": {"line": 2, "character": 153}, "end": {"line": 2, "character": 167}}, "contents": {"value": "```lean\nNoZeroDivisors.{u_2} (M₀ : Type u_2) [Mul M₀] [Zero M₀] : Prop\n```\n***\nPredicate typeclass for expressing that `a * b = 0` implies `a = 0` or `b = 0`\nfor all `a` and `b` of type `G₀`. \n***\n*import Mathlib.Algebra.GroupWithZero.Defs*", "kind": "markdown"}}
{"character": "o", "row": 2, "column": 158, "range": {"start": {"line": 2, "character": 153}, "end": {"line": 2, "character": 167}}, "contents": {"value": "```lean\nNoZeroDivisors.{u_2} (M₀ : Type u_2) [Mul M₀] [Zero M₀] : Prop\n```\n***\nPredicate typeclass for expressing that `a * b = 0` implies `a = 0` or `b = 0`\nfor all `a` and `b` of type `G₀`. \n***\n*import Mathlib.Algebra.GroupWithZero.Defs*", "kind": "markdown"}}
{"character": "D", "row": 2, "column": 159, "range": {"start": {"line": 2, "character": 153}, "end": {"line": 2, "character": 167}}, "contents": {"value": "```lean\nNoZeroDivisors.{u_2} (M₀ : Type u_2) [Mul M₀] [Zero M₀] : Prop\n```\n***\nPredicate typeclass for expressing that `a * b = 0` implies `a = 0` or `b = 0`\nfor all `a` and `b` of type `G₀`. \n***\n*import Mathlib.Algebra.GroupWithZero.Defs*", "kind": "markdown"}}
{"character": "i", "row": 2, "column": 160, "range": {"start": {"line": 2, "character": 153}, "end": {"line": 2, "character": 167}}, "contents": {"value": "```lean\nNoZeroDivisors.{u_2} (M₀ : Type u_2) [Mul M₀] [Zero M₀] : Prop\n```\n***\nPredicate typeclass for expressing that `a * b = 0` implies `a = 0` or `b = 0`\nfor all `a` and `b` of type `G₀`. \n***\n*import Mathlib.Algebra.GroupWithZero.Defs*", "kind": "markdown"}}
{"character": "v", "row": 2, "column": 161, "range": {"start": {"line": 2, "character": 153}, "end": {"line": 2, "character": 167}}, "contents": {"value": "```lean\nNoZeroDivisors.{u_2} (M₀ : Type u_2) [Mul M₀] [Zero M₀] : Prop\n```\n***\nPredicate typeclass for expressing that `a * b = 0` implies `a = 0` or `b = 0`\nfor all `a` and `b` of type `G₀`. \n***\n*import Mathlib.Algebra.GroupWithZero.Defs*", "kind": "markdown"}}
{"character": "i", "row": 2, "column": 162, "range": {"start": {"line": 2, "character": 153}, "end": {"line": 2, "character": 167}}, "contents": {"value": "```lean\nNoZeroDivisors.{u_2} (M₀ : Type u_2) [Mul M₀] [Zero M₀] : Prop\n```\n***\nPredicate typeclass for expressing that `a * b = 0` implies `a = 0` or `b = 0`\nfor all `a` and `b` of type `G₀`. \n***\n*import Mathlib.Algebra.GroupWithZero.Defs*", "kind": "markdown"}}
{"character": "s", "row": 2, "column": 163, "range": {"start": {"line": 2, "character": 153}, "end": {"line": 2, "character": 167}}, "contents": {"value": "```lean\nNoZeroDivisors.{u_2} (M₀ : Type u_2) [Mul M₀] [Zero M₀] : Prop\n```\n***\nPredicate typeclass for expressing that `a * b = 0` implies `a = 0` or `b = 0`\nfor all `a` and `b` of type `G₀`. \n***\n*import Mathlib.Algebra.GroupWithZero.Defs*", "kind": "markdown"}}
{"character": "o", "row": 2, "column": 164, "range": {"start": {"line": 2, "character": 153}, "end": {"line": 2, "character": 167}}, "contents": {"value": "```lean\nNoZeroDivisors.{u_2} (M₀ : Type u_2) [Mul M₀] [Zero M₀] : Prop\n```\n***\nPredicate typeclass for expressing that `a * b = 0` implies `a = 0` or `b = 0`\nfor all `a` and `b` of type `G₀`. \n***\n*import Mathlib.Algebra.GroupWithZero.Defs*", "kind": "markdown"}}
{"character": "r", "row": 2, "column": 165, "range": {"start": {"line": 2, "character": 153}, "end": {"line": 2, "character": 167}}, "contents": {"value": "```lean\nNoZeroDivisors.{u_2} (M₀ : Type u_2) [Mul M₀] [Zero M₀] : Prop\n```\n***\nPredicate typeclass for expressing that `a * b = 0` implies `a = 0` or `b = 0`\nfor all `a` and `b` of type `G₀`. \n***\n*import Mathlib.Algebra.GroupWithZero.Defs*", "kind": "markdown"}}
{"character": "s", "row": 2, "column": 166, "range": {"start": {"line": 2, "character": 153}, "end": {"line": 2, "character": 167}}, "contents": {"value": "```lean\nNoZeroDivisors.{u_2} (M₀ : Type u_2) [Mul M₀] [Zero M₀] : Prop\n```\n***\nPredicate typeclass for expressing that `a * b = 0` implies `a = 0` or `b = 0`\nfor all `a` and `b` of type `G₀`. \n***\n*import Mathlib.Algebra.GroupWithZero.Defs*", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 167, "range": {"start": {"line": 2, "character": 153}, "end": {"line": 2, "character": 169}}, "contents": {"value": "```lean\nProp\n```", "kind": "markdown"}}
{"character": "R", "row": 2, "column": 168, "range": {"start": {"line": 2, "character": 168}, "end": {"line": 2, "character": 169}}, "contents": {"value": "```lean\nR : Type u_2\n```", "kind": "markdown"}}
{"character": "]", "row": 2, "column": 169, "range": {"start": {"line": 2, "character": 152}, "end": {"line": 2, "character": 170}}, "contents": {"value": "Instance-implicit binder, like `[C]` or `[inst : C]`.\nIn regular applications without `@` explicit mode, it is automatically inserted\nand solved for by typeclass inference for the specified class `C`.\nIn `@` explicit mode, if `_` is used for an instance-implicit parameter, then it is still solved for by typeclass inference;\nuse `(_)` to inhibit this and have it be solved for by unification instead, like an implicit argument.\n", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 170}
{"character": "{", "row": 2, "column": 171, "range": {"start": {"line": 2, "character": 171}, "end": {"line": 2, "character": 184}}, "contents": {"value": "Implicit binder, like `{x y : A}` or `{x y}`.\nIn regular applications, whenever all parameters before it have been specified,\nthen a `_` placeholder is automatically inserted for this parameter.\nImplicit parameters should be able to be determined from the other arguments and the return type\nby unification.\n\nIn `@` explicit mode, implicit binders behave like explicit binders.\n", "kind": "markdown"}}
{"character": "x", "row": 2, "column": 172, "range": {"start": {"line": 2, "character": 172}, "end": {"line": 2, "character": 173}}, "contents": {"value": "```lean\nx : k → R\n```", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 173}
{"character": "y", "row": 2, "column": 174, "range": {"start": {"line": 2, "character": 174}, "end": {"line": 2, "character": 175}}, "contents": {"value": "```lean\ny : k → R\n```", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 175}
{"character": ":", "row": 2, "column": 176, "range": {"start": {"line": 2, "character": 171}, "end": {"line": 2, "character": 184}}, "contents": {"value": "Implicit binder, like `{x y : A}` or `{x y}`.\nIn regular applications, whenever all parameters before it have been specified,\nthen a `_` placeholder is automatically inserted for this parameter.\nImplicit parameters should be able to be determined from the other arguments and the return type\nby unification.\n\nIn `@` explicit mode, implicit binders behave like explicit binders.\n", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 177}
{"character": "k", "row": 2, "column": 178, "range": {"start": {"line": 2, "character": 178}, "end": {"line": 2, "character": 179}}, "contents": {"value": "```lean\nk : Type u_1\n```", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 179, "range": {"start": {"line": 2, "character": 178}, "end": {"line": 2, "character": 183}}, "contents": {"value": "```lean\nType (max u_1 u_2)\n```", "kind": "markdown"}}
{"character": "→", "row": 2, "column": 180, "range": {"start": {"line": 2, "character": 178}, "end": {"line": 2, "character": 183}}, "contents": {"value": "```lean\nType (max u_1 u_2)\n```", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 181, "range": {"start": {"line": 2, "character": 178}, "end": {"line": 2, "character": 183}}, "contents": {"value": "```lean\nType (max u_1 u_2)\n```", "kind": "markdown"}}
{"character": "R", "row": 2, "column": 182, "range": {"start": {"line": 2, "character": 182}, "end": {"line": 2, "character": 183}}, "contents": {"value": "```lean\nR : Type u_2\n```", "kind": "markdown"}}
{"character": "}", "row": 2, "column": 183, "range": {"start": {"line": 2, "character": 171}, "end": {"line": 2, "character": 184}}, "contents": {"value": "Implicit binder, like `{x y : A}` or `{x y}`.\nIn regular applications, whenever all parameters before it have been specified,\nthen a `_` placeholder is automatically inserted for this parameter.\nImplicit parameters should be able to be determined from the other arguments and the return type\nby unification.\n\nIn `@` explicit mode, implicit binders behave like explicit binders.\n", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 184}
{"character": ":", "row": 2, "column": 185, "range": {"start": {"line": 2, "character": 42}, "end": {"line": 2, "character": 221}}, "contents": {"value": "`declSig` matches the signature of a declaration with required type: a list of binders and then `: type` ", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 186}
{"character": "x", "row": 2, "column": 187, "range": {"start": {"line": 2, "character": 187}, "end": {"line": 2, "character": 188}}, "contents": {"value": "```lean\nx : k → R\n```", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 188, "range": {"start": {"line": 2, "character": 187}, "end": {"line": 2, "character": 192}}, "contents": {"value": "```lean\nProp\n```\n***\n`a ≠ b`, or `Ne a b` is defined as `¬ (a = b)` or `a = b → False`,\nand asserts that `a` and `b` are not equal.\n\n\nConventions for notations in identifiers:\n\n * The recommended spelling of `≠` in identifiers is `ne`.", "kind": "markdown"}}
{"character": "≠", "row": 2, "column": 189, "range": {"start": {"line": 2, "character": 187}, "end": {"line": 2, "character": 192}}, "contents": {"value": "```lean\nProp\n```\n***\n`a ≠ b`, or `Ne a b` is defined as `¬ (a = b)` or `a = b → False`,\nand asserts that `a` and `b` are not equal.\n\n\nConventions for notations in identifiers:\n\n * The recommended spelling of `≠` in identifiers is `ne`.", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 190, "range": {"start": {"line": 2, "character": 187}, "end": {"line": 2, "character": 192}}, "contents": {"value": "```lean\nProp\n```\n***\n`a ≠ b`, or `Ne a b` is defined as `¬ (a = b)` or `a = b → False`,\nand asserts that `a` and `b` are not equal.\n\n\nConventions for notations in identifiers:\n\n * The recommended spelling of `≠` in identifiers is `ne`.", "kind": "markdown"}}
{"character": "0", "row": 2, "column": 191, "range": {"start": {"line": 2, "character": 191}, "end": {"line": 2, "character": 192}}, "contents": {"value": "```lean\n0 : k → R\n```", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 192, "range": {"start": {"line": 2, "character": 187}, "end": {"line": 2, "character": 221}}, "contents": {"value": "```lean\nProp\n```", "kind": "markdown"}}
{"character": "→", "row": 2, "column": 193, "range": {"start": {"line": 2, "character": 187}, "end": {"line": 2, "character": 221}}, "contents": {"value": "```lean\nProp\n```", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 194, "range": {"start": {"line": 2, "character": 187}, "end": {"line": 2, "character": 221}}, "contents": {"value": "```lean\nProp\n```", "kind": "markdown"}}
{"character": "y", "row": 2, "column": 195, "range": {"start": {"line": 2, "character": 195}, "end": {"line": 2, "character": 196}}, "contents": {"value": "```lean\ny : k → R\n```", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 196, "range": {"start": {"line": 2, "character": 195}, "end": {"line": 2, "character": 200}}, "contents": {"value": "```lean\nProp\n```\n***\n`a ≠ b`, or `Ne a b` is defined as `¬ (a = b)` or `a = b → False`,\nand asserts that `a` and `b` are not equal.\n\n\nConventions for notations in identifiers:\n\n * The recommended spelling of `≠` in identifiers is `ne`.", "kind": "markdown"}}
{"character": "≠", "row": 2, "column": 197, "range": {"start": {"line": 2, "character": 195}, "end": {"line": 2, "character": 200}}, "contents": {"value": "```lean\nProp\n```\n***\n`a ≠ b`, or `Ne a b` is defined as `¬ (a = b)` or `a = b → False`,\nand asserts that `a` and `b` are not equal.\n\n\nConventions for notations in identifiers:\n\n * The recommended spelling of `≠` in identifiers is `ne`.", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 198, "range": {"start": {"line": 2, "character": 195}, "end": {"line": 2, "character": 200}}, "contents": {"value": "```lean\nProp\n```\n***\n`a ≠ b`, or `Ne a b` is defined as `¬ (a = b)` or `a = b → False`,\nand asserts that `a` and `b` are not equal.\n\n\nConventions for notations in identifiers:\n\n * The recommended spelling of `≠` in identifiers is `ne`.", "kind": "markdown"}}
{"character": "0", "row": 2, "column": 199, "range": {"start": {"line": 2, "character": 199}, "end": {"line": 2, "character": 200}}, "contents": {"value": "```lean\n0 : k → R\n```", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 200, "range": {"start": {"line": 2, "character": 195}, "end": {"line": 2, "character": 221}}, "contents": {"value": "```lean\nProp\n```", "kind": "markdown"}}
{"character": "→", "row": 2, "column": 201, "range": {"start": {"line": 2, "character": 195}, "end": {"line": 2, "character": 221}}, "contents": {"value": "```lean\nProp\n```", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 202, "range": {"start": {"line": 2, "character": 195}, "end": {"line": 2, "character": 221}}, "contents": {"value": "```lean\nProp\n```", "kind": "markdown"}}
{"character": "x", "row": 2, "column": 203, "range": {"start": {"line": 2, "character": 203}, "end": {"line": 2, "character": 204}}, "contents": {"value": "```lean\nx : k → R\n```", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 204, "range": {"start": {"line": 2, "character": 203}, "end": {"line": 2, "character": 209}}, "contents": {"value": "```lean\nR\n```\n***\n`dotProduct v w` is the sum of the entrywise products `v i * w i` ", "kind": "markdown"}}
{"character": "⬝", "row": 2, "column": 205, "range": {"start": {"line": 2, "character": 203}, "end": {"line": 2, "character": 209}}, "contents": {"value": "```lean\nR\n```\n***\n`dotProduct v w` is the sum of the entrywise products `v i * w i` ", "kind": "markdown"}}
{"character": "ᵥ", "row": 2, "column": 206, "range": {"start": {"line": 2, "character": 203}, "end": {"line": 2, "character": 209}}, "contents": {"value": "```lean\nR\n```\n***\n`dotProduct v w` is the sum of the entrywise products `v i * w i` ", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 207, "range": {"start": {"line": 2, "character": 203}, "end": {"line": 2, "character": 209}}, "contents": {"value": "```lean\nR\n```\n***\n`dotProduct v w` is the sum of the entrywise products `v i * w i` ", "kind": "markdown"}}
{"character": "y", "row": 2, "column": 208, "range": {"start": {"line": 2, "character": 208}, "end": {"line": 2, "character": 209}}, "contents": {"value": "```lean\ny : k → R\n```", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 209, "range": {"start": {"line": 2, "character": 203}, "end": {"line": 2, "character": 213}}, "contents": {"value": "```lean\nProp\n```\n***\nThe equality relation. It has one introduction rule, `Eq.refl`.\nWe use `a = b` as notation for `Eq a b`.\nA fundamental property of equality is that it is an equivalence relation.\n```\nvariable (α : Type) (a b c d : α)\nvariable (hab : a = b) (hcb : c = b) (hcd : c = d)\n\nexample : a = d :=\n  Eq.trans (Eq.trans hab (Eq.symm hcb)) hcd\n```\nEquality is much more than an equivalence relation, however. It has the important property that every assertion\nrespects the equivalence, in the sense that we can substitute equal expressions without changing the truth value.\nThat is, given `h1 : a = b` and `h2 : p a`, we can construct a proof for `p b` using substitution: `Eq.subst h1 h2`.\nExample:\n```\nexample (α : Type) (a b : α) (p : α → Prop)\n        (h1 : a = b) (h2 : p a) : p b :=\n  Eq.subst h1 h2\n\nexample (α : Type) (a b : α) (p : α → Prop)\n    (h1 : a = b) (h2 : p a) : p b :=\n  h1 ▸ h2\n```\nThe triangle in the second presentation is a macro built on top of `Eq.subst` and `Eq.symm`, and you can enter it by typing `\\t`.\nFor more information: [Equality](https://lean-lang.org/theorem_proving_in_lean4/quantifiers_and_equality.html#equality)\n\n\nConventions for notations in identifiers:\n\n * The recommended spelling of `=` in identifiers is `eq`.", "kind": "markdown"}}
{"character": "=", "row": 2, "column": 210, "range": {"start": {"line": 2, "character": 203}, "end": {"line": 2, "character": 213}}, "contents": {"value": "```lean\nProp\n```\n***\nThe equality relation. It has one introduction rule, `Eq.refl`.\nWe use `a = b` as notation for `Eq a b`.\nA fundamental property of equality is that it is an equivalence relation.\n```\nvariable (α : Type) (a b c d : α)\nvariable (hab : a = b) (hcb : c = b) (hcd : c = d)\n\nexample : a = d :=\n  Eq.trans (Eq.trans hab (Eq.symm hcb)) hcd\n```\nEquality is much more than an equivalence relation, however. It has the important property that every assertion\nrespects the equivalence, in the sense that we can substitute equal expressions without changing the truth value.\nThat is, given `h1 : a = b` and `h2 : p a`, we can construct a proof for `p b` using substitution: `Eq.subst h1 h2`.\nExample:\n```\nexample (α : Type) (a b : α) (p : α → Prop)\n        (h1 : a = b) (h2 : p a) : p b :=\n  Eq.subst h1 h2\n\nexample (α : Type) (a b : α) (p : α → Prop)\n    (h1 : a = b) (h2 : p a) : p b :=\n  h1 ▸ h2\n```\nThe triangle in the second presentation is a macro built on top of `Eq.subst` and `Eq.symm`, and you can enter it by typing `\\t`.\nFor more information: [Equality](https://lean-lang.org/theorem_proving_in_lean4/quantifiers_and_equality.html#equality)\n\n\nConventions for notations in identifiers:\n\n * The recommended spelling of `=` in identifiers is `eq`.", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 211, "range": {"start": {"line": 2, "character": 203}, "end": {"line": 2, "character": 213}}, "contents": {"value": "```lean\nProp\n```\n***\nThe equality relation. It has one introduction rule, `Eq.refl`.\nWe use `a = b` as notation for `Eq a b`.\nA fundamental property of equality is that it is an equivalence relation.\n```\nvariable (α : Type) (a b c d : α)\nvariable (hab : a = b) (hcb : c = b) (hcd : c = d)\n\nexample : a = d :=\n  Eq.trans (Eq.trans hab (Eq.symm hcb)) hcd\n```\nEquality is much more than an equivalence relation, however. It has the important property that every assertion\nrespects the equivalence, in the sense that we can substitute equal expressions without changing the truth value.\nThat is, given `h1 : a = b` and `h2 : p a`, we can construct a proof for `p b` using substitution: `Eq.subst h1 h2`.\nExample:\n```\nexample (α : Type) (a b : α) (p : α → Prop)\n        (h1 : a = b) (h2 : p a) : p b :=\n  Eq.subst h1 h2\n\nexample (α : Type) (a b : α) (p : α → Prop)\n    (h1 : a = b) (h2 : p a) : p b :=\n  h1 ▸ h2\n```\nThe triangle in the second presentation is a macro built on top of `Eq.subst` and `Eq.symm`, and you can enter it by typing `\\t`.\nFor more information: [Equality](https://lean-lang.org/theorem_proving_in_lean4/quantifiers_and_equality.html#equality)\n\n\nConventions for notations in identifiers:\n\n * The recommended spelling of `=` in identifiers is `eq`.", "kind": "markdown"}}
{"character": "0", "row": 2, "column": 212, "range": {"start": {"line": 2, "character": 212}, "end": {"line": 2, "character": 213}}, "contents": {"value": "```lean\n0 : R\n```", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 213, "range": {"start": {"line": 2, "character": 203}, "end": {"line": 2, "character": 221}}, "contents": {"value": "```lean\nProp\n```", "kind": "markdown"}}
{"character": "→", "row": 2, "column": 214, "range": {"start": {"line": 2, "character": 203}, "end": {"line": 2, "character": 221}}, "contents": {"value": "```lean\nProp\n```", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 215, "range": {"start": {"line": 2, "character": 203}, "end": {"line": 2, "character": 221}}, "contents": {"value": "```lean\nProp\n```", "kind": "markdown"}}
{"character": "F", "row": 2, "column": 216, "range": {"start": {"line": 2, "character": 216}, "end": {"line": 2, "character": 221}}, "contents": {"value": "```lean\nFalse : Prop\n```\n***\n`False` is the empty proposition. Thus, it has no introduction rules.\nIt represents a contradiction. `False` elimination rule, `False.rec`,\nexpresses the fact that anything follows from a contradiction.\nThis rule is sometimes called ex falso (short for ex falso sequitur quodlibet),\nor the principle of explosion.\nFor more information: [Propositional Logic](https://lean-lang.org/theorem_proving_in_lean4/propositions_and_proofs.html#propositional-logic)\n\n***\n*import Init.Prelude*", "kind": "markdown"}}
{"character": "a", "row": 2, "column": 217, "range": {"start": {"line": 2, "character": 216}, "end": {"line": 2, "character": 221}}, "contents": {"value": "```lean\nFalse : Prop\n```\n***\n`False` is the empty proposition. Thus, it has no introduction rules.\nIt represents a contradiction. `False` elimination rule, `False.rec`,\nexpresses the fact that anything follows from a contradiction.\nThis rule is sometimes called ex falso (short for ex falso sequitur quodlibet),\nor the principle of explosion.\nFor more information: [Propositional Logic](https://lean-lang.org/theorem_proving_in_lean4/propositions_and_proofs.html#propositional-logic)\n\n***\n*import Init.Prelude*", "kind": "markdown"}}
{"character": "l", "row": 2, "column": 218, "range": {"start": {"line": 2, "character": 216}, "end": {"line": 2, "character": 221}}, "contents": {"value": "```lean\nFalse : Prop\n```\n***\n`False` is the empty proposition. Thus, it has no introduction rules.\nIt represents a contradiction. `False` elimination rule, `False.rec`,\nexpresses the fact that anything follows from a contradiction.\nThis rule is sometimes called ex falso (short for ex falso sequitur quodlibet),\nor the principle of explosion.\nFor more information: [Propositional Logic](https://lean-lang.org/theorem_proving_in_lean4/propositions_and_proofs.html#propositional-logic)\n\n***\n*import Init.Prelude*", "kind": "markdown"}}
{"character": "s", "row": 2, "column": 219, "range": {"start": {"line": 2, "character": 216}, "end": {"line": 2, "character": 221}}, "contents": {"value": "```lean\nFalse : Prop\n```\n***\n`False` is the empty proposition. Thus, it has no introduction rules.\nIt represents a contradiction. `False` elimination rule, `False.rec`,\nexpresses the fact that anything follows from a contradiction.\nThis rule is sometimes called ex falso (short for ex falso sequitur quodlibet),\nor the principle of explosion.\nFor more information: [Propositional Logic](https://lean-lang.org/theorem_proving_in_lean4/propositions_and_proofs.html#propositional-logic)\n\n***\n*import Init.Prelude*", "kind": "markdown"}}
{"character": "e", "row": 2, "column": 220, "range": {"start": {"line": 2, "character": 216}, "end": {"line": 2, "character": 221}}, "contents": {"value": "```lean\nFalse : Prop\n```\n***\n`False` is the empty proposition. Thus, it has no introduction rules.\nIt represents a contradiction. `False` elimination rule, `False.rec`,\nexpresses the fact that anything follows from a contradiction.\nThis rule is sometimes called ex falso (short for ex falso sequitur quodlibet),\nor the principle of explosion.\nFor more information: [Propositional Logic](https://lean-lang.org/theorem_proving_in_lean4/propositions_and_proofs.html#propositional-logic)\n\n***\n*import Init.Prelude*", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 221}
{"character": ":", "row": 2, "column": 222}
{"character": "=", "row": 2, "column": 223}
{"character": " ", "row": 2, "column": 224}
{"character": "b", "row": 2, "column": 225, "range": {"start": {"line": 2, "character": 225}, "end": {"line": 2, "character": 233}}, "contents": {"value": "`by tac` constructs a term of the expected type by running the tactic(s) `tac`. ", "kind": "markdown"}}
{"character": "y", "row": 2, "column": 226, "range": {"start": {"line": 2, "character": 225}, "end": {"line": 2, "character": 233}}, "contents": {"value": "`by tac` constructs a term of the expected type by running the tactic(s) `tac`. ", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 227, "range": {"start": {"line": 2, "character": 225}, "end": {"line": 2, "character": 233}}, "contents": {"value": "`by tac` constructs a term of the expected type by running the tactic(s) `tac`. ", "kind": "markdown"}}
{"character": "s", "row": 2, "column": 228, "range": {"start": {"line": 2, "character": 228}, "end": {"line": 2, "character": 233}}, "contents": {"value": "The `sorry` tactic is a temporary placeholder for an incomplete tactic proof,\nclosing the main goal using `exact sorry`.\n\nThis is intended for stubbing-out incomplete parts of a proof while still having a syntactically correct proof skeleton.\nLean will give a warning whenever a proof uses `sorry`, so you aren't likely to miss it,\nbut you can double check if a theorem depends on `sorry` by looking for `sorryAx` in the output\nof the `#print axioms my_thm` command, the axiom used by the implementation of `sorry`.\n", "kind": "markdown"}}
{"character": "o", "row": 2, "column": 229, "range": {"start": {"line": 2, "character": 228}, "end": {"line": 2, "character": 233}}, "contents": {"value": "The `sorry` tactic is a temporary placeholder for an incomplete tactic proof,\nclosing the main goal using `exact sorry`.\n\nThis is intended for stubbing-out incomplete parts of a proof while still having a syntactically correct proof skeleton.\nLean will give a warning whenever a proof uses `sorry`, so you aren't likely to miss it,\nbut you can double check if a theorem depends on `sorry` by looking for `sorryAx` in the output\nof the `#print axioms my_thm` command, the axiom used by the implementation of `sorry`.\n", "kind": "markdown"}}
{"character": "r", "row": 2, "column": 230, "range": {"start": {"line": 2, "character": 228}, "end": {"line": 2, "character": 233}}, "contents": {"value": "The `sorry` tactic is a temporary placeholder for an incomplete tactic proof,\nclosing the main goal using `exact sorry`.\n\nThis is intended for stubbing-out incomplete parts of a proof while still having a syntactically correct proof skeleton.\nLean will give a warning whenever a proof uses `sorry`, so you aren't likely to miss it,\nbut you can double check if a theorem depends on `sorry` by looking for `sorryAx` in the output\nof the `#print axioms my_thm` command, the axiom used by the implementation of `sorry`.\n", "kind": "markdown"}}
{"character": "r", "row": 2, "column": 231, "range": {"start": {"line": 2, "character": 228}, "end": {"line": 2, "character": 233}}, "contents": {"value": "The `sorry` tactic is a temporary placeholder for an incomplete tactic proof,\nclosing the main goal using `exact sorry`.\n\nThis is intended for stubbing-out incomplete parts of a proof while still having a syntactically correct proof skeleton.\nLean will give a warning whenever a proof uses `sorry`, so you aren't likely to miss it,\nbut you can double check if a theorem depends on `sorry` by looking for `sorryAx` in the output\nof the `#print axioms my_thm` command, the axiom used by the implementation of `sorry`.\n", "kind": "markdown"}}
{"character": "y", "row": 2, "column": 232, "range": {"start": {"line": 2, "character": 228}, "end": {"line": 2, "character": 233}}, "contents": {"value": "The `sorry` tactic is a temporary placeholder for an incomplete tactic proof,\nclosing the main goal using `exact sorry`.\n\nThis is intended for stubbing-out incomplete parts of a proof while still having a syntactically correct proof skeleton.\nLean will give a warning whenever a proof uses `sorry`, so you aren't likely to miss it,\nbut you can double check if a theorem depends on `sorry` by looking for `sorryAx` in the output\nof the `#print axioms my_thm` command, the axiom used by the implementation of `sorry`.\n", "kind": "markdown"}}
