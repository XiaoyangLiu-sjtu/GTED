{"character": "i", "row": 0, "column": 0}
{"character": "m", "row": 0, "column": 1}
{"character": "p", "row": 0, "column": 2}
{"character": "o", "row": 0, "column": 3}
{"character": "r", "row": 0, "column": 4}
{"character": "t", "row": 0, "column": 5}
{"character": " ", "row": 0, "column": 6}
{"character": "M", "row": 0, "column": 7}
{"character": "a", "row": 0, "column": 8}
{"character": "t", "row": 0, "column": 9}
{"character": "h", "row": 0, "column": 10}
{"character": "l", "row": 0, "column": 11}
{"character": "i", "row": 0, "column": 12}
{"character": "b", "row": 0, "column": 13}
{"character": "t", "row": 1, "column": 0}
{"character": "h", "row": 1, "column": 1}
{"character": "e", "row": 1, "column": 2}
{"character": "o", "row": 1, "column": 3}
{"character": "r", "row": 1, "column": 4}
{"character": "e", "row": 1, "column": 5}
{"character": "m", "row": 1, "column": 6}
{"character": " ", "row": 1, "column": 7}
{"character": "t", "row": 1, "column": 8, "range": {"start": {"line": 1, "character": 8}, "end": {"line": 1, "character": 15}}, "contents": {"value": "```lean\ntm_name.{u_1} {G : Type u_1} [Group G] (H K : Subgroup G) (h₁ : H ≤ K) (h₂ : K.Normal) : H.Normal\n```", "kind": "markdown"}}
{"character": "m", "row": 1, "column": 9, "range": {"start": {"line": 1, "character": 8}, "end": {"line": 1, "character": 15}}, "contents": {"value": "```lean\ntm_name.{u_1} {G : Type u_1} [Group G] (H K : Subgroup G) (h₁ : H ≤ K) (h₂ : K.Normal) : H.Normal\n```", "kind": "markdown"}}
{"character": "_", "row": 1, "column": 10, "range": {"start": {"line": 1, "character": 8}, "end": {"line": 1, "character": 15}}, "contents": {"value": "```lean\ntm_name.{u_1} {G : Type u_1} [Group G] (H K : Subgroup G) (h₁ : H ≤ K) (h₂ : K.Normal) : H.Normal\n```", "kind": "markdown"}}
{"character": "n", "row": 1, "column": 11, "range": {"start": {"line": 1, "character": 8}, "end": {"line": 1, "character": 15}}, "contents": {"value": "```lean\ntm_name.{u_1} {G : Type u_1} [Group G] (H K : Subgroup G) (h₁ : H ≤ K) (h₂ : K.Normal) : H.Normal\n```", "kind": "markdown"}}
{"character": "a", "row": 1, "column": 12, "range": {"start": {"line": 1, "character": 8}, "end": {"line": 1, "character": 15}}, "contents": {"value": "```lean\ntm_name.{u_1} {G : Type u_1} [Group G] (H K : Subgroup G) (h₁ : H ≤ K) (h₂ : K.Normal) : H.Normal\n```", "kind": "markdown"}}
{"character": "m", "row": 1, "column": 13, "range": {"start": {"line": 1, "character": 8}, "end": {"line": 1, "character": 15}}, "contents": {"value": "```lean\ntm_name.{u_1} {G : Type u_1} [Group G] (H K : Subgroup G) (h₁ : H ≤ K) (h₂ : K.Normal) : H.Normal\n```", "kind": "markdown"}}
{"character": "e", "row": 1, "column": 14, "range": {"start": {"line": 1, "character": 8}, "end": {"line": 1, "character": 15}}, "contents": {"value": "```lean\ntm_name.{u_1} {G : Type u_1} [Group G] (H K : Subgroup G) (h₁ : H ≤ K) (h₂ : K.Normal) : H.Normal\n```", "kind": "markdown"}}
{"character": ".", "row": 1, "column": 15, "range": {"start": {"line": 1, "character": 8}, "end": {"line": 1, "character": 21}}, "contents": {"value": "```lean\ntm_name : ∀ {G : Type u_1} [inst : Group G] (H K : Subgroup G), H ≤ K → K.Normal → H.Normal\n```\n***\n`declId` matches `foo` or `foo.{u,v}`: an identifier possibly followed by a list of universe names ", "kind": "markdown"}}
{"character": "{", "row": 1, "column": 16, "range": {"start": {"line": 1, "character": 8}, "end": {"line": 1, "character": 21}}, "contents": {"value": "```lean\ntm_name : ∀ {G : Type u_1} [inst : Group G] (H K : Subgroup G), H ≤ K → K.Normal → H.Normal\n```\n***\n`declId` matches `foo` or `foo.{u,v}`: an identifier possibly followed by a list of universe names ", "kind": "markdown"}}
{"character": "u", "row": 1, "column": 17, "range": {"start": {"line": 1, "character": 8}, "end": {"line": 1, "character": 21}}, "contents": {"value": "```lean\ntm_name : ∀ {G : Type u_1} [inst : Group G] (H K : Subgroup G), H ≤ K → K.Normal → H.Normal\n```\n***\n`declId` matches `foo` or `foo.{u,v}`: an identifier possibly followed by a list of universe names ", "kind": "markdown"}}
{"character": "_", "row": 1, "column": 18, "range": {"start": {"line": 1, "character": 8}, "end": {"line": 1, "character": 21}}, "contents": {"value": "```lean\ntm_name : ∀ {G : Type u_1} [inst : Group G] (H K : Subgroup G), H ≤ K → K.Normal → H.Normal\n```\n***\n`declId` matches `foo` or `foo.{u,v}`: an identifier possibly followed by a list of universe names ", "kind": "markdown"}}
{"character": "1", "row": 1, "column": 19, "range": {"start": {"line": 1, "character": 8}, "end": {"line": 1, "character": 21}}, "contents": {"value": "```lean\ntm_name : ∀ {G : Type u_1} [inst : Group G] (H K : Subgroup G), H ≤ K → K.Normal → H.Normal\n```\n***\n`declId` matches `foo` or `foo.{u,v}`: an identifier possibly followed by a list of universe names ", "kind": "markdown"}}
{"character": "}", "row": 1, "column": 20, "range": {"start": {"line": 1, "character": 8}, "end": {"line": 1, "character": 21}}, "contents": {"value": "```lean\ntm_name : ∀ {G : Type u_1} [inst : Group G] (H K : Subgroup G), H ≤ K → K.Normal → H.Normal\n```\n***\n`declId` matches `foo` or `foo.{u,v}`: an identifier possibly followed by a list of universe names ", "kind": "markdown"}}
{"character": " ", "row": 1, "column": 21}
{"character": "{", "row": 1, "column": 22, "range": {"start": {"line": 1, "character": 22}, "end": {"line": 1, "character": 36}}, "contents": {"value": "Implicit binder, like `{x y : A}` or `{x y}`.\nIn regular applications, whenever all parameters before it have been specified,\nthen a `_` placeholder is automatically inserted for this parameter.\nImplicit parameters should be able to be determined from the other arguments and the return type\nby unification.\n\nIn `@` explicit mode, implicit binders behave like explicit binders.\n", "kind": "markdown"}}
{"character": "G", "row": 1, "column": 23, "range": {"start": {"line": 1, "character": 23}, "end": {"line": 1, "character": 24}}, "contents": {"value": "```lean\nG : Type u_1\n```", "kind": "markdown"}}
{"character": " ", "row": 1, "column": 24}
{"character": ":", "row": 1, "column": 25, "range": {"start": {"line": 1, "character": 22}, "end": {"line": 1, "character": 36}}, "contents": {"value": "Implicit binder, like `{x y : A}` or `{x y}`.\nIn regular applications, whenever all parameters before it have been specified,\nthen a `_` placeholder is automatically inserted for this parameter.\nImplicit parameters should be able to be determined from the other arguments and the return type\nby unification.\n\nIn `@` explicit mode, implicit binders behave like explicit binders.\n", "kind": "markdown"}}
{"character": " ", "row": 1, "column": 26}
{"character": "T", "row": 1, "column": 27, "range": {"start": {"line": 1, "character": 27}, "end": {"line": 1, "character": 35}}, "contents": {"value": "A type universe. `Type ≡ Type 0`, `Type u ≡ Sort (u + 1)`. ", "kind": "markdown"}}
{"character": "y", "row": 1, "column": 28, "range": {"start": {"line": 1, "character": 27}, "end": {"line": 1, "character": 35}}, "contents": {"value": "A type universe. `Type ≡ Type 0`, `Type u ≡ Sort (u + 1)`. ", "kind": "markdown"}}
{"character": "p", "row": 1, "column": 29, "range": {"start": {"line": 1, "character": 27}, "end": {"line": 1, "character": 35}}, "contents": {"value": "A type universe. `Type ≡ Type 0`, `Type u ≡ Sort (u + 1)`. ", "kind": "markdown"}}
{"character": "e", "row": 1, "column": 30, "range": {"start": {"line": 1, "character": 27}, "end": {"line": 1, "character": 35}}, "contents": {"value": "A type universe. `Type ≡ Type 0`, `Type u ≡ Sort (u + 1)`. ", "kind": "markdown"}}
{"character": " ", "row": 1, "column": 31, "range": {"start": {"line": 1, "character": 27}, "end": {"line": 1, "character": 35}}, "contents": {"value": "A type universe. `Type ≡ Type 0`, `Type u ≡ Sort (u + 1)`. ", "kind": "markdown"}}
{"character": "u", "row": 1, "column": 32, "range": {"start": {"line": 1, "character": 27}, "end": {"line": 1, "character": 35}}, "contents": {"value": "A type universe. `Type ≡ Type 0`, `Type u ≡ Sort (u + 1)`. ", "kind": "markdown"}}
{"character": "_", "row": 1, "column": 33, "range": {"start": {"line": 1, "character": 27}, "end": {"line": 1, "character": 35}}, "contents": {"value": "A type universe. `Type ≡ Type 0`, `Type u ≡ Sort (u + 1)`. ", "kind": "markdown"}}
{"character": "1", "row": 1, "column": 34, "range": {"start": {"line": 1, "character": 27}, "end": {"line": 1, "character": 35}}, "contents": {"value": "A type universe. `Type ≡ Type 0`, `Type u ≡ Sort (u + 1)`. ", "kind": "markdown"}}
{"character": "}", "row": 1, "column": 35, "range": {"start": {"line": 1, "character": 22}, "end": {"line": 1, "character": 36}}, "contents": {"value": "Implicit binder, like `{x y : A}` or `{x y}`.\nIn regular applications, whenever all parameters before it have been specified,\nthen a `_` placeholder is automatically inserted for this parameter.\nImplicit parameters should be able to be determined from the other arguments and the return type\nby unification.\n\nIn `@` explicit mode, implicit binders behave like explicit binders.\n", "kind": "markdown"}}
{"character": " ", "row": 1, "column": 36}
{"character": "[", "row": 1, "column": 37, "range": {"start": {"line": 1, "character": 37}, "end": {"line": 1, "character": 46}}, "contents": {"value": "Instance-implicit binder, like `[C]` or `[inst : C]`.\nIn regular applications without `@` explicit mode, it is automatically inserted\nand solved for by typeclass inference for the specified class `C`.\nIn `@` explicit mode, if `_` is used for an instance-implicit parameter, then it is still solved for by typeclass inference;\nuse `(_)` to inhibit this and have it be solved for by unification instead, like an implicit argument.\n", "kind": "markdown"}}
{"character": "G", "row": 1, "column": 38, "range": {"start": {"line": 1, "character": 38}, "end": {"line": 1, "character": 43}}, "contents": {"value": "```lean\nGroup.{u} (G : Type u) : Type u\n```\n***\nA `Group` is a `Monoid` with an operation `⁻¹` satisfying `a⁻¹ * a = 1`.\n\nThere is also a division operation `/` such that `a / b = a * b⁻¹`,\nwith a default so that `a / b = a * b⁻¹` holds by definition.\n\nUse `Group.ofLeftAxioms` or `Group.ofRightAxioms` to define a group structure\non a type with the minimum proof obligations.\n\n***\n*import Mathlib.Algebra.Group.Defs*", "kind": "markdown"}}
{"character": "r", "row": 1, "column": 39, "range": {"start": {"line": 1, "character": 38}, "end": {"line": 1, "character": 43}}, "contents": {"value": "```lean\nGroup.{u} (G : Type u) : Type u\n```\n***\nA `Group` is a `Monoid` with an operation `⁻¹` satisfying `a⁻¹ * a = 1`.\n\nThere is also a division operation `/` such that `a / b = a * b⁻¹`,\nwith a default so that `a / b = a * b⁻¹` holds by definition.\n\nUse `Group.ofLeftAxioms` or `Group.ofRightAxioms` to define a group structure\non a type with the minimum proof obligations.\n\n***\n*import Mathlib.Algebra.Group.Defs*", "kind": "markdown"}}
{"character": "o", "row": 1, "column": 40, "range": {"start": {"line": 1, "character": 38}, "end": {"line": 1, "character": 43}}, "contents": {"value": "```lean\nGroup.{u} (G : Type u) : Type u\n```\n***\nA `Group` is a `Monoid` with an operation `⁻¹` satisfying `a⁻¹ * a = 1`.\n\nThere is also a division operation `/` such that `a / b = a * b⁻¹`,\nwith a default so that `a / b = a * b⁻¹` holds by definition.\n\nUse `Group.ofLeftAxioms` or `Group.ofRightAxioms` to define a group structure\non a type with the minimum proof obligations.\n\n***\n*import Mathlib.Algebra.Group.Defs*", "kind": "markdown"}}
{"character": "u", "row": 1, "column": 41, "range": {"start": {"line": 1, "character": 38}, "end": {"line": 1, "character": 43}}, "contents": {"value": "```lean\nGroup.{u} (G : Type u) : Type u\n```\n***\nA `Group` is a `Monoid` with an operation `⁻¹` satisfying `a⁻¹ * a = 1`.\n\nThere is also a division operation `/` such that `a / b = a * b⁻¹`,\nwith a default so that `a / b = a * b⁻¹` holds by definition.\n\nUse `Group.ofLeftAxioms` or `Group.ofRightAxioms` to define a group structure\non a type with the minimum proof obligations.\n\n***\n*import Mathlib.Algebra.Group.Defs*", "kind": "markdown"}}
{"character": "p", "row": 1, "column": 42, "range": {"start": {"line": 1, "character": 38}, "end": {"line": 1, "character": 43}}, "contents": {"value": "```lean\nGroup.{u} (G : Type u) : Type u\n```\n***\nA `Group` is a `Monoid` with an operation `⁻¹` satisfying `a⁻¹ * a = 1`.\n\nThere is also a division operation `/` such that `a / b = a * b⁻¹`,\nwith a default so that `a / b = a * b⁻¹` holds by definition.\n\nUse `Group.ofLeftAxioms` or `Group.ofRightAxioms` to define a group structure\non a type with the minimum proof obligations.\n\n***\n*import Mathlib.Algebra.Group.Defs*", "kind": "markdown"}}
{"character": " ", "row": 1, "column": 43, "range": {"start": {"line": 1, "character": 38}, "end": {"line": 1, "character": 45}}, "contents": {"value": "```lean\nType u_1\n```", "kind": "markdown"}}
{"character": "G", "row": 1, "column": 44, "range": {"start": {"line": 1, "character": 44}, "end": {"line": 1, "character": 45}}, "contents": {"value": "```lean\nG : Type u_1\n```", "kind": "markdown"}}
{"character": "]", "row": 1, "column": 45, "range": {"start": {"line": 1, "character": 37}, "end": {"line": 1, "character": 46}}, "contents": {"value": "Instance-implicit binder, like `[C]` or `[inst : C]`.\nIn regular applications without `@` explicit mode, it is automatically inserted\nand solved for by typeclass inference for the specified class `C`.\nIn `@` explicit mode, if `_` is used for an instance-implicit parameter, then it is still solved for by typeclass inference;\nuse `(_)` to inhibit this and have it be solved for by unification instead, like an implicit argument.\n", "kind": "markdown"}}
{"character": " ", "row": 1, "column": 46}
{"character": "(", "row": 1, "column": 47, "range": {"start": {"line": 1, "character": 47}, "end": {"line": 1, "character": 63}}, "contents": {"value": "Explicit binder, like `(x y : A)` or `(x y)`.\nDefault values can be specified using `(x : A := v)` syntax, and tactics using `(x : A := by tac)`.\n", "kind": "markdown"}}
{"character": "H", "row": 1, "column": 48, "range": {"start": {"line": 1, "character": 48}, "end": {"line": 1, "character": 49}}, "contents": {"value": "```lean\nH : Subgroup G\n```", "kind": "markdown"}}
{"character": " ", "row": 1, "column": 49}
{"character": ":", "row": 1, "column": 50, "range": {"start": {"line": 1, "character": 47}, "end": {"line": 1, "character": 63}}, "contents": {"value": "Explicit binder, like `(x y : A)` or `(x y)`.\nDefault values can be specified using `(x : A := v)` syntax, and tactics using `(x : A := by tac)`.\n", "kind": "markdown"}}
{"character": " ", "row": 1, "column": 51}
{"character": "S", "row": 1, "column": 52, "range": {"start": {"line": 1, "character": 52}, "end": {"line": 1, "character": 60}}, "contents": {"value": "```lean\nSubgroup.{u_3} (G : Type u_3) [Group G] : Type u_3\n```\n***\nA subgroup of a group `G` is a subset containing 1, closed under multiplication\nand closed under multiplicative inverse. \n***\n*import Mathlib.Algebra.Group.Subgroup.Defs*", "kind": "markdown"}}
{"character": "u", "row": 1, "column": 53, "range": {"start": {"line": 1, "character": 52}, "end": {"line": 1, "character": 60}}, "contents": {"value": "```lean\nSubgroup.{u_3} (G : Type u_3) [Group G] : Type u_3\n```\n***\nA subgroup of a group `G` is a subset containing 1, closed under multiplication\nand closed under multiplicative inverse. \n***\n*import Mathlib.Algebra.Group.Subgroup.Defs*", "kind": "markdown"}}
{"character": "b", "row": 1, "column": 54, "range": {"start": {"line": 1, "character": 52}, "end": {"line": 1, "character": 60}}, "contents": {"value": "```lean\nSubgroup.{u_3} (G : Type u_3) [Group G] : Type u_3\n```\n***\nA subgroup of a group `G` is a subset containing 1, closed under multiplication\nand closed under multiplicative inverse. \n***\n*import Mathlib.Algebra.Group.Subgroup.Defs*", "kind": "markdown"}}
{"character": "g", "row": 1, "column": 55, "range": {"start": {"line": 1, "character": 52}, "end": {"line": 1, "character": 60}}, "contents": {"value": "```lean\nSubgroup.{u_3} (G : Type u_3) [Group G] : Type u_3\n```\n***\nA subgroup of a group `G` is a subset containing 1, closed under multiplication\nand closed under multiplicative inverse. \n***\n*import Mathlib.Algebra.Group.Subgroup.Defs*", "kind": "markdown"}}
{"character": "r", "row": 1, "column": 56, "range": {"start": {"line": 1, "character": 52}, "end": {"line": 1, "character": 60}}, "contents": {"value": "```lean\nSubgroup.{u_3} (G : Type u_3) [Group G] : Type u_3\n```\n***\nA subgroup of a group `G` is a subset containing 1, closed under multiplication\nand closed under multiplicative inverse. \n***\n*import Mathlib.Algebra.Group.Subgroup.Defs*", "kind": "markdown"}}
{"character": "o", "row": 1, "column": 57, "range": {"start": {"line": 1, "character": 52}, "end": {"line": 1, "character": 60}}, "contents": {"value": "```lean\nSubgroup.{u_3} (G : Type u_3) [Group G] : Type u_3\n```\n***\nA subgroup of a group `G` is a subset containing 1, closed under multiplication\nand closed under multiplicative inverse. \n***\n*import Mathlib.Algebra.Group.Subgroup.Defs*", "kind": "markdown"}}
{"character": "u", "row": 1, "column": 58, "range": {"start": {"line": 1, "character": 52}, "end": {"line": 1, "character": 60}}, "contents": {"value": "```lean\nSubgroup.{u_3} (G : Type u_3) [Group G] : Type u_3\n```\n***\nA subgroup of a group `G` is a subset containing 1, closed under multiplication\nand closed under multiplicative inverse. \n***\n*import Mathlib.Algebra.Group.Subgroup.Defs*", "kind": "markdown"}}
{"character": "p", "row": 1, "column": 59, "range": {"start": {"line": 1, "character": 52}, "end": {"line": 1, "character": 60}}, "contents": {"value": "```lean\nSubgroup.{u_3} (G : Type u_3) [Group G] : Type u_3\n```\n***\nA subgroup of a group `G` is a subset containing 1, closed under multiplication\nand closed under multiplicative inverse. \n***\n*import Mathlib.Algebra.Group.Subgroup.Defs*", "kind": "markdown"}}
{"character": " ", "row": 1, "column": 60, "range": {"start": {"line": 1, "character": 52}, "end": {"line": 1, "character": 62}}, "contents": {"value": "```lean\nType u_1\n```", "kind": "markdown"}}
{"character": "G", "row": 1, "column": 61, "range": {"start": {"line": 1, "character": 61}, "end": {"line": 1, "character": 62}}, "contents": {"value": "```lean\nG : Type u_1\n```", "kind": "markdown"}}
{"character": ")", "row": 1, "column": 62, "range": {"start": {"line": 1, "character": 47}, "end": {"line": 1, "character": 63}}, "contents": {"value": "Explicit binder, like `(x y : A)` or `(x y)`.\nDefault values can be specified using `(x : A := v)` syntax, and tactics using `(x : A := by tac)`.\n", "kind": "markdown"}}
{"character": " ", "row": 1, "column": 63}
{"character": "(", "row": 1, "column": 64, "range": {"start": {"line": 1, "character": 64}, "end": {"line": 1, "character": 80}}, "contents": {"value": "Explicit binder, like `(x y : A)` or `(x y)`.\nDefault values can be specified using `(x : A := v)` syntax, and tactics using `(x : A := by tac)`.\n", "kind": "markdown"}}
{"character": "K", "row": 1, "column": 65, "range": {"start": {"line": 1, "character": 65}, "end": {"line": 1, "character": 66}}, "contents": {"value": "```lean\nK : Subgroup G\n```", "kind": "markdown"}}
{"character": " ", "row": 1, "column": 66}
{"character": ":", "row": 1, "column": 67, "range": {"start": {"line": 1, "character": 64}, "end": {"line": 1, "character": 80}}, "contents": {"value": "Explicit binder, like `(x y : A)` or `(x y)`.\nDefault values can be specified using `(x : A := v)` syntax, and tactics using `(x : A := by tac)`.\n", "kind": "markdown"}}
{"character": " ", "row": 1, "column": 68}
{"character": "S", "row": 1, "column": 69, "range": {"start": {"line": 1, "character": 69}, "end": {"line": 1, "character": 77}}, "contents": {"value": "```lean\nSubgroup.{u_3} (G : Type u_3) [Group G] : Type u_3\n```\n***\nA subgroup of a group `G` is a subset containing 1, closed under multiplication\nand closed under multiplicative inverse. \n***\n*import Mathlib.Algebra.Group.Subgroup.Defs*", "kind": "markdown"}}
{"character": "u", "row": 1, "column": 70, "range": {"start": {"line": 1, "character": 69}, "end": {"line": 1, "character": 77}}, "contents": {"value": "```lean\nSubgroup.{u_3} (G : Type u_3) [Group G] : Type u_3\n```\n***\nA subgroup of a group `G` is a subset containing 1, closed under multiplication\nand closed under multiplicative inverse. \n***\n*import Mathlib.Algebra.Group.Subgroup.Defs*", "kind": "markdown"}}
{"character": "b", "row": 1, "column": 71, "range": {"start": {"line": 1, "character": 69}, "end": {"line": 1, "character": 77}}, "contents": {"value": "```lean\nSubgroup.{u_3} (G : Type u_3) [Group G] : Type u_3\n```\n***\nA subgroup of a group `G` is a subset containing 1, closed under multiplication\nand closed under multiplicative inverse. \n***\n*import Mathlib.Algebra.Group.Subgroup.Defs*", "kind": "markdown"}}
{"character": "g", "row": 1, "column": 72, "range": {"start": {"line": 1, "character": 69}, "end": {"line": 1, "character": 77}}, "contents": {"value": "```lean\nSubgroup.{u_3} (G : Type u_3) [Group G] : Type u_3\n```\n***\nA subgroup of a group `G` is a subset containing 1, closed under multiplication\nand closed under multiplicative inverse. \n***\n*import Mathlib.Algebra.Group.Subgroup.Defs*", "kind": "markdown"}}
{"character": "r", "row": 1, "column": 73, "range": {"start": {"line": 1, "character": 69}, "end": {"line": 1, "character": 77}}, "contents": {"value": "```lean\nSubgroup.{u_3} (G : Type u_3) [Group G] : Type u_3\n```\n***\nA subgroup of a group `G` is a subset containing 1, closed under multiplication\nand closed under multiplicative inverse. \n***\n*import Mathlib.Algebra.Group.Subgroup.Defs*", "kind": "markdown"}}
{"character": "o", "row": 1, "column": 74, "range": {"start": {"line": 1, "character": 69}, "end": {"line": 1, "character": 77}}, "contents": {"value": "```lean\nSubgroup.{u_3} (G : Type u_3) [Group G] : Type u_3\n```\n***\nA subgroup of a group `G` is a subset containing 1, closed under multiplication\nand closed under multiplicative inverse. \n***\n*import Mathlib.Algebra.Group.Subgroup.Defs*", "kind": "markdown"}}
{"character": "u", "row": 1, "column": 75, "range": {"start": {"line": 1, "character": 69}, "end": {"line": 1, "character": 77}}, "contents": {"value": "```lean\nSubgroup.{u_3} (G : Type u_3) [Group G] : Type u_3\n```\n***\nA subgroup of a group `G` is a subset containing 1, closed under multiplication\nand closed under multiplicative inverse. \n***\n*import Mathlib.Algebra.Group.Subgroup.Defs*", "kind": "markdown"}}
{"character": "p", "row": 1, "column": 76, "range": {"start": {"line": 1, "character": 69}, "end": {"line": 1, "character": 77}}, "contents": {"value": "```lean\nSubgroup.{u_3} (G : Type u_3) [Group G] : Type u_3\n```\n***\nA subgroup of a group `G` is a subset containing 1, closed under multiplication\nand closed under multiplicative inverse. \n***\n*import Mathlib.Algebra.Group.Subgroup.Defs*", "kind": "markdown"}}
{"character": " ", "row": 1, "column": 77, "range": {"start": {"line": 1, "character": 69}, "end": {"line": 1, "character": 79}}, "contents": {"value": "```lean\nType u_1\n```", "kind": "markdown"}}
{"character": "G", "row": 1, "column": 78, "range": {"start": {"line": 1, "character": 78}, "end": {"line": 1, "character": 79}}, "contents": {"value": "```lean\nG : Type u_1\n```", "kind": "markdown"}}
{"character": ")", "row": 1, "column": 79, "range": {"start": {"line": 1, "character": 64}, "end": {"line": 1, "character": 80}}, "contents": {"value": "Explicit binder, like `(x y : A)` or `(x y)`.\nDefault values can be specified using `(x : A := v)` syntax, and tactics using `(x : A := by tac)`.\n", "kind": "markdown"}}
{"character": " ", "row": 1, "column": 80}
{"character": "(", "row": 1, "column": 81, "range": {"start": {"line": 1, "character": 81}, "end": {"line": 1, "character": 93}}, "contents": {"value": "Explicit binder, like `(x y : A)` or `(x y)`.\nDefault values can be specified using `(x : A := v)` syntax, and tactics using `(x : A := by tac)`.\n", "kind": "markdown"}}
{"character": "h", "row": 1, "column": 82, "range": {"start": {"line": 1, "character": 82}, "end": {"line": 1, "character": 84}}, "contents": {"value": "```lean\nh₁ : H ≤ K\n```", "kind": "markdown"}}
{"character": "₁", "row": 1, "column": 83, "range": {"start": {"line": 1, "character": 82}, "end": {"line": 1, "character": 84}}, "contents": {"value": "```lean\nh₁ : H ≤ K\n```", "kind": "markdown"}}
{"character": " ", "row": 1, "column": 84}
{"character": ":", "row": 1, "column": 85, "range": {"start": {"line": 1, "character": 81}, "end": {"line": 1, "character": 93}}, "contents": {"value": "Explicit binder, like `(x y : A)` or `(x y)`.\nDefault values can be specified using `(x : A := v)` syntax, and tactics using `(x : A := by tac)`.\n", "kind": "markdown"}}
{"character": " ", "row": 1, "column": 86}
{"character": "H", "row": 1, "column": 87, "range": {"start": {"line": 1, "character": 87}, "end": {"line": 1, "character": 88}}, "contents": {"value": "```lean\nH : Subgroup G\n```", "kind": "markdown"}}
{"character": " ", "row": 1, "column": 88, "range": {"start": {"line": 1, "character": 87}, "end": {"line": 1, "character": 92}}, "contents": {"value": "```lean\nProp\n```\n***\nThe less-equal relation: `x ≤ y` \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `≤` in identifiers is `le`.", "kind": "markdown"}}
{"character": "≤", "row": 1, "column": 89, "range": {"start": {"line": 1, "character": 87}, "end": {"line": 1, "character": 92}}, "contents": {"value": "```lean\nProp\n```\n***\nThe less-equal relation: `x ≤ y` \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `≤` in identifiers is `le`.", "kind": "markdown"}}
{"character": " ", "row": 1, "column": 90, "range": {"start": {"line": 1, "character": 87}, "end": {"line": 1, "character": 92}}, "contents": {"value": "```lean\nProp\n```\n***\nThe less-equal relation: `x ≤ y` \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `≤` in identifiers is `le`.", "kind": "markdown"}}
{"character": "K", "row": 1, "column": 91, "range": {"start": {"line": 1, "character": 91}, "end": {"line": 1, "character": 92}}, "contents": {"value": "```lean\nK : Subgroup G\n```", "kind": "markdown"}}
{"character": ")", "row": 1, "column": 92, "range": {"start": {"line": 1, "character": 81}, "end": {"line": 1, "character": 93}}, "contents": {"value": "Explicit binder, like `(x y : A)` or `(x y)`.\nDefault values can be specified using `(x : A := v)` syntax, and tactics using `(x : A := by tac)`.\n", "kind": "markdown"}}
{"character": " ", "row": 1, "column": 93}
{"character": "(", "row": 1, "column": 94, "range": {"start": {"line": 1, "character": 94}, "end": {"line": 1, "character": 109}}, "contents": {"value": "Explicit binder, like `(x y : A)` or `(x y)`.\nDefault values can be specified using `(x : A := v)` syntax, and tactics using `(x : A := by tac)`.\n", "kind": "markdown"}}
{"character": "h", "row": 1, "column": 95, "range": {"start": {"line": 1, "character": 95}, "end": {"line": 1, "character": 97}}, "contents": {"value": "```lean\nh₂ : K.Normal\n```", "kind": "markdown"}}
{"character": "₂", "row": 1, "column": 96, "range": {"start": {"line": 1, "character": 95}, "end": {"line": 1, "character": 97}}, "contents": {"value": "```lean\nh₂ : K.Normal\n```", "kind": "markdown"}}
{"character": " ", "row": 1, "column": 97}
{"character": ":", "row": 1, "column": 98, "range": {"start": {"line": 1, "character": 94}, "end": {"line": 1, "character": 109}}, "contents": {"value": "Explicit binder, like `(x y : A)` or `(x y)`.\nDefault values can be specified using `(x : A := v)` syntax, and tactics using `(x : A := by tac)`.\n", "kind": "markdown"}}
{"character": " ", "row": 1, "column": 99}
{"character": "K", "row": 1, "column": 100, "range": {"start": {"line": 1, "character": 100}, "end": {"line": 1, "character": 101}}, "contents": {"value": "```lean\nK : Subgroup G\n```", "kind": "markdown"}}
{"character": ".", "row": 1, "column": 101, "range": {"start": {"line": 1, "character": 100}, "end": {"line": 1, "character": 108}}, "contents": {"value": "```lean\nProp\n```", "kind": "markdown"}}
{"character": "N", "row": 1, "column": 102, "range": {"start": {"line": 1, "character": 102}, "end": {"line": 1, "character": 108}}, "contents": {"value": "```lean\nSubgroup.Normal.{u_1} {G : Type u_1} [Group G] (H : Subgroup G) : Prop\n```\n***\nA subgroup is normal if whenever `n ∈ H`, then `g * n * g⁻¹ ∈ H` for every `g : G` \n***\n*import Mathlib.Algebra.Group.Subgroup.Defs*", "kind": "markdown"}}
{"character": "o", "row": 1, "column": 103, "range": {"start": {"line": 1, "character": 102}, "end": {"line": 1, "character": 108}}, "contents": {"value": "```lean\nSubgroup.Normal.{u_1} {G : Type u_1} [Group G] (H : Subgroup G) : Prop\n```\n***\nA subgroup is normal if whenever `n ∈ H`, then `g * n * g⁻¹ ∈ H` for every `g : G` \n***\n*import Mathlib.Algebra.Group.Subgroup.Defs*", "kind": "markdown"}}
{"character": "r", "row": 1, "column": 104, "range": {"start": {"line": 1, "character": 102}, "end": {"line": 1, "character": 108}}, "contents": {"value": "```lean\nSubgroup.Normal.{u_1} {G : Type u_1} [Group G] (H : Subgroup G) : Prop\n```\n***\nA subgroup is normal if whenever `n ∈ H`, then `g * n * g⁻¹ ∈ H` for every `g : G` \n***\n*import Mathlib.Algebra.Group.Subgroup.Defs*", "kind": "markdown"}}
{"character": "m", "row": 1, "column": 105, "range": {"start": {"line": 1, "character": 102}, "end": {"line": 1, "character": 108}}, "contents": {"value": "```lean\nSubgroup.Normal.{u_1} {G : Type u_1} [Group G] (H : Subgroup G) : Prop\n```\n***\nA subgroup is normal if whenever `n ∈ H`, then `g * n * g⁻¹ ∈ H` for every `g : G` \n***\n*import Mathlib.Algebra.Group.Subgroup.Defs*", "kind": "markdown"}}
{"character": "a", "row": 1, "column": 106, "range": {"start": {"line": 1, "character": 102}, "end": {"line": 1, "character": 108}}, "contents": {"value": "```lean\nSubgroup.Normal.{u_1} {G : Type u_1} [Group G] (H : Subgroup G) : Prop\n```\n***\nA subgroup is normal if whenever `n ∈ H`, then `g * n * g⁻¹ ∈ H` for every `g : G` \n***\n*import Mathlib.Algebra.Group.Subgroup.Defs*", "kind": "markdown"}}
{"character": "l", "row": 1, "column": 107, "range": {"start": {"line": 1, "character": 102}, "end": {"line": 1, "character": 108}}, "contents": {"value": "```lean\nSubgroup.Normal.{u_1} {G : Type u_1} [Group G] (H : Subgroup G) : Prop\n```\n***\nA subgroup is normal if whenever `n ∈ H`, then `g * n * g⁻¹ ∈ H` for every `g : G` \n***\n*import Mathlib.Algebra.Group.Subgroup.Defs*", "kind": "markdown"}}
{"character": ")", "row": 1, "column": 108, "range": {"start": {"line": 1, "character": 94}, "end": {"line": 1, "character": 109}}, "contents": {"value": "Explicit binder, like `(x y : A)` or `(x y)`.\nDefault values can be specified using `(x : A := v)` syntax, and tactics using `(x : A := by tac)`.\n", "kind": "markdown"}}
{"character": " ", "row": 1, "column": 109}
{"character": ":", "row": 1, "column": 110, "range": {"start": {"line": 1, "character": 22}, "end": {"line": 1, "character": 120}}, "contents": {"value": "`declSig` matches the signature of a declaration with required type: a list of binders and then `: type` ", "kind": "markdown"}}
{"character": " ", "row": 1, "column": 111}
{"character": "H", "row": 1, "column": 112, "range": {"start": {"line": 1, "character": 112}, "end": {"line": 1, "character": 113}}, "contents": {"value": "```lean\nH : Subgroup G\n```", "kind": "markdown"}}
{"character": ".", "row": 1, "column": 113, "range": {"start": {"line": 1, "character": 112}, "end": {"line": 1, "character": 120}}, "contents": {"value": "```lean\nProp\n```", "kind": "markdown"}}
{"character": "N", "row": 1, "column": 114, "range": {"start": {"line": 1, "character": 114}, "end": {"line": 1, "character": 120}}, "contents": {"value": "```lean\nSubgroup.Normal.{u_1} {G : Type u_1} [Group G] (H : Subgroup G) : Prop\n```\n***\nA subgroup is normal if whenever `n ∈ H`, then `g * n * g⁻¹ ∈ H` for every `g : G` \n***\n*import Mathlib.Algebra.Group.Subgroup.Defs*", "kind": "markdown"}}
{"character": "o", "row": 1, "column": 115, "range": {"start": {"line": 1, "character": 114}, "end": {"line": 1, "character": 120}}, "contents": {"value": "```lean\nSubgroup.Normal.{u_1} {G : Type u_1} [Group G] (H : Subgroup G) : Prop\n```\n***\nA subgroup is normal if whenever `n ∈ H`, then `g * n * g⁻¹ ∈ H` for every `g : G` \n***\n*import Mathlib.Algebra.Group.Subgroup.Defs*", "kind": "markdown"}}
{"character": "r", "row": 1, "column": 116, "range": {"start": {"line": 1, "character": 114}, "end": {"line": 1, "character": 120}}, "contents": {"value": "```lean\nSubgroup.Normal.{u_1} {G : Type u_1} [Group G] (H : Subgroup G) : Prop\n```\n***\nA subgroup is normal if whenever `n ∈ H`, then `g * n * g⁻¹ ∈ H` for every `g : G` \n***\n*import Mathlib.Algebra.Group.Subgroup.Defs*", "kind": "markdown"}}
{"character": "m", "row": 1, "column": 117, "range": {"start": {"line": 1, "character": 114}, "end": {"line": 1, "character": 120}}, "contents": {"value": "```lean\nSubgroup.Normal.{u_1} {G : Type u_1} [Group G] (H : Subgroup G) : Prop\n```\n***\nA subgroup is normal if whenever `n ∈ H`, then `g * n * g⁻¹ ∈ H` for every `g : G` \n***\n*import Mathlib.Algebra.Group.Subgroup.Defs*", "kind": "markdown"}}
{"character": "a", "row": 1, "column": 118, "range": {"start": {"line": 1, "character": 114}, "end": {"line": 1, "character": 120}}, "contents": {"value": "```lean\nSubgroup.Normal.{u_1} {G : Type u_1} [Group G] (H : Subgroup G) : Prop\n```\n***\nA subgroup is normal if whenever `n ∈ H`, then `g * n * g⁻¹ ∈ H` for every `g : G` \n***\n*import Mathlib.Algebra.Group.Subgroup.Defs*", "kind": "markdown"}}
{"character": "l", "row": 1, "column": 119, "range": {"start": {"line": 1, "character": 114}, "end": {"line": 1, "character": 120}}, "contents": {"value": "```lean\nSubgroup.Normal.{u_1} {G : Type u_1} [Group G] (H : Subgroup G) : Prop\n```\n***\nA subgroup is normal if whenever `n ∈ H`, then `g * n * g⁻¹ ∈ H` for every `g : G` \n***\n*import Mathlib.Algebra.Group.Subgroup.Defs*", "kind": "markdown"}}
{"character": " ", "row": 1, "column": 120}
{"character": ":", "row": 1, "column": 121}
{"character": "=", "row": 1, "column": 122}
{"character": " ", "row": 1, "column": 123}
{"character": "b", "row": 1, "column": 124, "range": {"start": {"line": 1, "character": 124}, "end": {"line": 1, "character": 132}}, "contents": {"value": "`by tac` constructs a term of the expected type by running the tactic(s) `tac`. ", "kind": "markdown"}}
{"character": "y", "row": 1, "column": 125, "range": {"start": {"line": 1, "character": 124}, "end": {"line": 1, "character": 132}}, "contents": {"value": "`by tac` constructs a term of the expected type by running the tactic(s) `tac`. ", "kind": "markdown"}}
{"character": " ", "row": 1, "column": 126, "range": {"start": {"line": 1, "character": 124}, "end": {"line": 1, "character": 132}}, "contents": {"value": "`by tac` constructs a term of the expected type by running the tactic(s) `tac`. ", "kind": "markdown"}}
{"character": "s", "row": 1, "column": 127, "range": {"start": {"line": 1, "character": 127}, "end": {"line": 1, "character": 132}}, "contents": {"value": "The `sorry` tactic is a temporary placeholder for an incomplete tactic proof,\nclosing the main goal using `exact sorry`.\n\nThis is intended for stubbing-out incomplete parts of a proof while still having a syntactically correct proof skeleton.\nLean will give a warning whenever a proof uses `sorry`, so you aren't likely to miss it,\nbut you can double check if a theorem depends on `sorry` by looking for `sorryAx` in the output\nof the `#print axioms my_thm` command, the axiom used by the implementation of `sorry`.\n", "kind": "markdown"}}
{"character": "o", "row": 1, "column": 128, "range": {"start": {"line": 1, "character": 127}, "end": {"line": 1, "character": 132}}, "contents": {"value": "The `sorry` tactic is a temporary placeholder for an incomplete tactic proof,\nclosing the main goal using `exact sorry`.\n\nThis is intended for stubbing-out incomplete parts of a proof while still having a syntactically correct proof skeleton.\nLean will give a warning whenever a proof uses `sorry`, so you aren't likely to miss it,\nbut you can double check if a theorem depends on `sorry` by looking for `sorryAx` in the output\nof the `#print axioms my_thm` command, the axiom used by the implementation of `sorry`.\n", "kind": "markdown"}}
{"character": "r", "row": 1, "column": 129, "range": {"start": {"line": 1, "character": 127}, "end": {"line": 1, "character": 132}}, "contents": {"value": "The `sorry` tactic is a temporary placeholder for an incomplete tactic proof,\nclosing the main goal using `exact sorry`.\n\nThis is intended for stubbing-out incomplete parts of a proof while still having a syntactically correct proof skeleton.\nLean will give a warning whenever a proof uses `sorry`, so you aren't likely to miss it,\nbut you can double check if a theorem depends on `sorry` by looking for `sorryAx` in the output\nof the `#print axioms my_thm` command, the axiom used by the implementation of `sorry`.\n", "kind": "markdown"}}
{"character": "r", "row": 1, "column": 130, "range": {"start": {"line": 1, "character": 127}, "end": {"line": 1, "character": 132}}, "contents": {"value": "The `sorry` tactic is a temporary placeholder for an incomplete tactic proof,\nclosing the main goal using `exact sorry`.\n\nThis is intended for stubbing-out incomplete parts of a proof while still having a syntactically correct proof skeleton.\nLean will give a warning whenever a proof uses `sorry`, so you aren't likely to miss it,\nbut you can double check if a theorem depends on `sorry` by looking for `sorryAx` in the output\nof the `#print axioms my_thm` command, the axiom used by the implementation of `sorry`.\n", "kind": "markdown"}}
{"character": "y", "row": 1, "column": 131, "range": {"start": {"line": 1, "character": 127}, "end": {"line": 1, "character": 132}}, "contents": {"value": "The `sorry` tactic is a temporary placeholder for an incomplete tactic proof,\nclosing the main goal using `exact sorry`.\n\nThis is intended for stubbing-out incomplete parts of a proof while still having a syntactically correct proof skeleton.\nLean will give a warning whenever a proof uses `sorry`, so you aren't likely to miss it,\nbut you can double check if a theorem depends on `sorry` by looking for `sorryAx` in the output\nof the `#print axioms my_thm` command, the axiom used by the implementation of `sorry`.\n", "kind": "markdown"}}
