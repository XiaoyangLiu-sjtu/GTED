{"character": "i", "row": 0, "column": 0}
{"character": "m", "row": 0, "column": 1}
{"character": "p", "row": 0, "column": 2}
{"character": "o", "row": 0, "column": 3}
{"character": "r", "row": 0, "column": 4}
{"character": "t", "row": 0, "column": 5}
{"character": " ", "row": 0, "column": 6}
{"character": "M", "row": 0, "column": 7}
{"character": "a", "row": 0, "column": 8}
{"character": "t", "row": 0, "column": 9}
{"character": "h", "row": 0, "column": 10}
{"character": "l", "row": 0, "column": 11}
{"character": "i", "row": 0, "column": 12}
{"character": "b", "row": 0, "column": 13}
{"character": "t", "row": 2, "column": 0}
{"character": "h", "row": 2, "column": 1}
{"character": "e", "row": 2, "column": 2}
{"character": "o", "row": 2, "column": 3}
{"character": "r", "row": 2, "column": 4}
{"character": "e", "row": 2, "column": 5}
{"character": "m", "row": 2, "column": 6}
{"character": " ", "row": 2, "column": 7}
{"character": "i", "row": 2, "column": 8, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 23}}, "contents": {"value": "```lean\nisConj_mul_comm.{u_1} {G : Type u_1} (a b : G) [Group G] : IsConj (a * b) (b * a)\n```", "kind": "markdown"}}
{"character": "s", "row": 2, "column": 9, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 23}}, "contents": {"value": "```lean\nisConj_mul_comm.{u_1} {G : Type u_1} (a b : G) [Group G] : IsConj (a * b) (b * a)\n```", "kind": "markdown"}}
{"character": "C", "row": 2, "column": 10, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 23}}, "contents": {"value": "```lean\nisConj_mul_comm.{u_1} {G : Type u_1} (a b : G) [Group G] : IsConj (a * b) (b * a)\n```", "kind": "markdown"}}
{"character": "o", "row": 2, "column": 11, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 23}}, "contents": {"value": "```lean\nisConj_mul_comm.{u_1} {G : Type u_1} (a b : G) [Group G] : IsConj (a * b) (b * a)\n```", "kind": "markdown"}}
{"character": "n", "row": 2, "column": 12, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 23}}, "contents": {"value": "```lean\nisConj_mul_comm.{u_1} {G : Type u_1} (a b : G) [Group G] : IsConj (a * b) (b * a)\n```", "kind": "markdown"}}
{"character": "j", "row": 2, "column": 13, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 23}}, "contents": {"value": "```lean\nisConj_mul_comm.{u_1} {G : Type u_1} (a b : G) [Group G] : IsConj (a * b) (b * a)\n```", "kind": "markdown"}}
{"character": "_", "row": 2, "column": 14, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 23}}, "contents": {"value": "```lean\nisConj_mul_comm.{u_1} {G : Type u_1} (a b : G) [Group G] : IsConj (a * b) (b * a)\n```", "kind": "markdown"}}
{"character": "m", "row": 2, "column": 15, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 23}}, "contents": {"value": "```lean\nisConj_mul_comm.{u_1} {G : Type u_1} (a b : G) [Group G] : IsConj (a * b) (b * a)\n```", "kind": "markdown"}}
{"character": "u", "row": 2, "column": 16, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 23}}, "contents": {"value": "```lean\nisConj_mul_comm.{u_1} {G : Type u_1} (a b : G) [Group G] : IsConj (a * b) (b * a)\n```", "kind": "markdown"}}
{"character": "l", "row": 2, "column": 17, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 23}}, "contents": {"value": "```lean\nisConj_mul_comm.{u_1} {G : Type u_1} (a b : G) [Group G] : IsConj (a * b) (b * a)\n```", "kind": "markdown"}}
{"character": "_", "row": 2, "column": 18, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 23}}, "contents": {"value": "```lean\nisConj_mul_comm.{u_1} {G : Type u_1} (a b : G) [Group G] : IsConj (a * b) (b * a)\n```", "kind": "markdown"}}
{"character": "c", "row": 2, "column": 19, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 23}}, "contents": {"value": "```lean\nisConj_mul_comm.{u_1} {G : Type u_1} (a b : G) [Group G] : IsConj (a * b) (b * a)\n```", "kind": "markdown"}}
{"character": "o", "row": 2, "column": 20, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 23}}, "contents": {"value": "```lean\nisConj_mul_comm.{u_1} {G : Type u_1} (a b : G) [Group G] : IsConj (a * b) (b * a)\n```", "kind": "markdown"}}
{"character": "m", "row": 2, "column": 21, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 23}}, "contents": {"value": "```lean\nisConj_mul_comm.{u_1} {G : Type u_1} (a b : G) [Group G] : IsConj (a * b) (b * a)\n```", "kind": "markdown"}}
{"character": "m", "row": 2, "column": 22, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 23}}, "contents": {"value": "```lean\nisConj_mul_comm.{u_1} {G : Type u_1} (a b : G) [Group G] : IsConj (a * b) (b * a)\n```", "kind": "markdown"}}
{"character": ".", "row": 2, "column": 23, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 29}}, "contents": {"value": "```lean\nisConj_mul_comm : ∀ {G : Type u_1} (a b : G) [inst : Group G], IsConj (a * b) (b * a)\n```\n***\n`declId` matches `foo` or `foo.{u,v}`: an identifier possibly followed by a list of universe names ", "kind": "markdown"}}
{"character": "{", "row": 2, "column": 24, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 29}}, "contents": {"value": "```lean\nisConj_mul_comm : ∀ {G : Type u_1} (a b : G) [inst : Group G], IsConj (a * b) (b * a)\n```\n***\n`declId` matches `foo` or `foo.{u,v}`: an identifier possibly followed by a list of universe names ", "kind": "markdown"}}
{"character": "u", "row": 2, "column": 25, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 29}}, "contents": {"value": "```lean\nisConj_mul_comm : ∀ {G : Type u_1} (a b : G) [inst : Group G], IsConj (a * b) (b * a)\n```\n***\n`declId` matches `foo` or `foo.{u,v}`: an identifier possibly followed by a list of universe names ", "kind": "markdown"}}
{"character": "_", "row": 2, "column": 26, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 29}}, "contents": {"value": "```lean\nisConj_mul_comm : ∀ {G : Type u_1} (a b : G) [inst : Group G], IsConj (a * b) (b * a)\n```\n***\n`declId` matches `foo` or `foo.{u,v}`: an identifier possibly followed by a list of universe names ", "kind": "markdown"}}
{"character": "1", "row": 2, "column": 27, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 29}}, "contents": {"value": "```lean\nisConj_mul_comm : ∀ {G : Type u_1} (a b : G) [inst : Group G], IsConj (a * b) (b * a)\n```\n***\n`declId` matches `foo` or `foo.{u,v}`: an identifier possibly followed by a list of universe names ", "kind": "markdown"}}
{"character": "}", "row": 2, "column": 28, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 29}}, "contents": {"value": "```lean\nisConj_mul_comm : ∀ {G : Type u_1} (a b : G) [inst : Group G], IsConj (a * b) (b * a)\n```\n***\n`declId` matches `foo` or `foo.{u,v}`: an identifier possibly followed by a list of universe names ", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 29}
{"character": "{", "row": 2, "column": 30, "range": {"start": {"line": 2, "character": 30}, "end": {"line": 2, "character": 44}}, "contents": {"value": "Implicit binder, like `{x y : A}` or `{x y}`.\nIn regular applications, whenever all parameters before it have been specified,\nthen a `_` placeholder is automatically inserted for this parameter.\nImplicit parameters should be able to be determined from the other arguments and the return type\nby unification.\n\nIn `@` explicit mode, implicit binders behave like explicit binders.\n", "kind": "markdown"}}
{"character": "G", "row": 2, "column": 31, "range": {"start": {"line": 2, "character": 31}, "end": {"line": 2, "character": 32}}, "contents": {"value": "```lean\nG : Type u_1\n```", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 32}
{"character": ":", "row": 2, "column": 33, "range": {"start": {"line": 2, "character": 30}, "end": {"line": 2, "character": 44}}, "contents": {"value": "Implicit binder, like `{x y : A}` or `{x y}`.\nIn regular applications, whenever all parameters before it have been specified,\nthen a `_` placeholder is automatically inserted for this parameter.\nImplicit parameters should be able to be determined from the other arguments and the return type\nby unification.\n\nIn `@` explicit mode, implicit binders behave like explicit binders.\n", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 34}
{"character": "T", "row": 2, "column": 35, "range": {"start": {"line": 2, "character": 35}, "end": {"line": 2, "character": 43}}, "contents": {"value": "A type universe. `Type ≡ Type 0`, `Type u ≡ Sort (u + 1)`. ", "kind": "markdown"}}
{"character": "y", "row": 2, "column": 36, "range": {"start": {"line": 2, "character": 35}, "end": {"line": 2, "character": 43}}, "contents": {"value": "A type universe. `Type ≡ Type 0`, `Type u ≡ Sort (u + 1)`. ", "kind": "markdown"}}
{"character": "p", "row": 2, "column": 37, "range": {"start": {"line": 2, "character": 35}, "end": {"line": 2, "character": 43}}, "contents": {"value": "A type universe. `Type ≡ Type 0`, `Type u ≡ Sort (u + 1)`. ", "kind": "markdown"}}
{"character": "e", "row": 2, "column": 38, "range": {"start": {"line": 2, "character": 35}, "end": {"line": 2, "character": 43}}, "contents": {"value": "A type universe. `Type ≡ Type 0`, `Type u ≡ Sort (u + 1)`. ", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 39, "range": {"start": {"line": 2, "character": 35}, "end": {"line": 2, "character": 43}}, "contents": {"value": "A type universe. `Type ≡ Type 0`, `Type u ≡ Sort (u + 1)`. ", "kind": "markdown"}}
{"character": "u", "row": 2, "column": 40, "range": {"start": {"line": 2, "character": 35}, "end": {"line": 2, "character": 43}}, "contents": {"value": "A type universe. `Type ≡ Type 0`, `Type u ≡ Sort (u + 1)`. ", "kind": "markdown"}}
{"character": "_", "row": 2, "column": 41, "range": {"start": {"line": 2, "character": 35}, "end": {"line": 2, "character": 43}}, "contents": {"value": "A type universe. `Type ≡ Type 0`, `Type u ≡ Sort (u + 1)`. ", "kind": "markdown"}}
{"character": "1", "row": 2, "column": 42, "range": {"start": {"line": 2, "character": 35}, "end": {"line": 2, "character": 43}}, "contents": {"value": "A type universe. `Type ≡ Type 0`, `Type u ≡ Sort (u + 1)`. ", "kind": "markdown"}}
{"character": "}", "row": 2, "column": 43, "range": {"start": {"line": 2, "character": 30}, "end": {"line": 2, "character": 44}}, "contents": {"value": "Implicit binder, like `{x y : A}` or `{x y}`.\nIn regular applications, whenever all parameters before it have been specified,\nthen a `_` placeholder is automatically inserted for this parameter.\nImplicit parameters should be able to be determined from the other arguments and the return type\nby unification.\n\nIn `@` explicit mode, implicit binders behave like explicit binders.\n", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 44}
{"character": "(", "row": 2, "column": 45, "range": {"start": {"line": 2, "character": 45}, "end": {"line": 2, "character": 52}}, "contents": {"value": "Explicit binder, like `(x y : A)` or `(x y)`.\nDefault values can be specified using `(x : A := v)` syntax, and tactics using `(x : A := by tac)`.\n", "kind": "markdown"}}
{"character": "a", "row": 2, "column": 46, "range": {"start": {"line": 2, "character": 46}, "end": {"line": 2, "character": 47}}, "contents": {"value": "```lean\na : G\n```", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 47}
{"character": ":", "row": 2, "column": 48, "range": {"start": {"line": 2, "character": 45}, "end": {"line": 2, "character": 52}}, "contents": {"value": "Explicit binder, like `(x y : A)` or `(x y)`.\nDefault values can be specified using `(x : A := v)` syntax, and tactics using `(x : A := by tac)`.\n", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 49}
{"character": "G", "row": 2, "column": 50, "range": {"start": {"line": 2, "character": 50}, "end": {"line": 2, "character": 51}}, "contents": {"value": "```lean\nG : Type u_1\n```", "kind": "markdown"}}
{"character": ")", "row": 2, "column": 51, "range": {"start": {"line": 2, "character": 45}, "end": {"line": 2, "character": 52}}, "contents": {"value": "Explicit binder, like `(x y : A)` or `(x y)`.\nDefault values can be specified using `(x : A := v)` syntax, and tactics using `(x : A := by tac)`.\n", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 52}
{"character": "(", "row": 2, "column": 53, "range": {"start": {"line": 2, "character": 53}, "end": {"line": 2, "character": 60}}, "contents": {"value": "Explicit binder, like `(x y : A)` or `(x y)`.\nDefault values can be specified using `(x : A := v)` syntax, and tactics using `(x : A := by tac)`.\n", "kind": "markdown"}}
{"character": "b", "row": 2, "column": 54, "range": {"start": {"line": 2, "character": 54}, "end": {"line": 2, "character": 55}}, "contents": {"value": "```lean\nb : G\n```", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 55}
{"character": ":", "row": 2, "column": 56, "range": {"start": {"line": 2, "character": 53}, "end": {"line": 2, "character": 60}}, "contents": {"value": "Explicit binder, like `(x y : A)` or `(x y)`.\nDefault values can be specified using `(x : A := v)` syntax, and tactics using `(x : A := by tac)`.\n", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 57}
{"character": "G", "row": 2, "column": 58, "range": {"start": {"line": 2, "character": 58}, "end": {"line": 2, "character": 59}}, "contents": {"value": "```lean\nG : Type u_1\n```", "kind": "markdown"}}
{"character": ")", "row": 2, "column": 59, "range": {"start": {"line": 2, "character": 53}, "end": {"line": 2, "character": 60}}, "contents": {"value": "Explicit binder, like `(x y : A)` or `(x y)`.\nDefault values can be specified using `(x : A := v)` syntax, and tactics using `(x : A := by tac)`.\n", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 60}
{"character": "[", "row": 2, "column": 61, "range": {"start": {"line": 2, "character": 61}, "end": {"line": 2, "character": 70}}, "contents": {"value": "Instance-implicit binder, like `[C]` or `[inst : C]`.\nIn regular applications without `@` explicit mode, it is automatically inserted\nand solved for by typeclass inference for the specified class `C`.\nIn `@` explicit mode, if `_` is used for an instance-implicit parameter, then it is still solved for by typeclass inference;\nuse `(_)` to inhibit this and have it be solved for by unification instead, like an implicit argument.\n", "kind": "markdown"}}
{"character": "G", "row": 2, "column": 62, "range": {"start": {"line": 2, "character": 62}, "end": {"line": 2, "character": 67}}, "contents": {"value": "```lean\nGroup.{u} (G : Type u) : Type u\n```\n***\nA `Group` is a `Monoid` with an operation `⁻¹` satisfying `a⁻¹ * a = 1`.\n\nThere is also a division operation `/` such that `a / b = a * b⁻¹`,\nwith a default so that `a / b = a * b⁻¹` holds by definition.\n\nUse `Group.ofLeftAxioms` or `Group.ofRightAxioms` to define a group structure\non a type with the minimum proof obligations.\n\n***\n*import Mathlib.Algebra.Group.Defs*", "kind": "markdown"}}
{"character": "r", "row": 2, "column": 63, "range": {"start": {"line": 2, "character": 62}, "end": {"line": 2, "character": 67}}, "contents": {"value": "```lean\nGroup.{u} (G : Type u) : Type u\n```\n***\nA `Group` is a `Monoid` with an operation `⁻¹` satisfying `a⁻¹ * a = 1`.\n\nThere is also a division operation `/` such that `a / b = a * b⁻¹`,\nwith a default so that `a / b = a * b⁻¹` holds by definition.\n\nUse `Group.ofLeftAxioms` or `Group.ofRightAxioms` to define a group structure\non a type with the minimum proof obligations.\n\n***\n*import Mathlib.Algebra.Group.Defs*", "kind": "markdown"}}
{"character": "o", "row": 2, "column": 64, "range": {"start": {"line": 2, "character": 62}, "end": {"line": 2, "character": 67}}, "contents": {"value": "```lean\nGroup.{u} (G : Type u) : Type u\n```\n***\nA `Group` is a `Monoid` with an operation `⁻¹` satisfying `a⁻¹ * a = 1`.\n\nThere is also a division operation `/` such that `a / b = a * b⁻¹`,\nwith a default so that `a / b = a * b⁻¹` holds by definition.\n\nUse `Group.ofLeftAxioms` or `Group.ofRightAxioms` to define a group structure\non a type with the minimum proof obligations.\n\n***\n*import Mathlib.Algebra.Group.Defs*", "kind": "markdown"}}
{"character": "u", "row": 2, "column": 65, "range": {"start": {"line": 2, "character": 62}, "end": {"line": 2, "character": 67}}, "contents": {"value": "```lean\nGroup.{u} (G : Type u) : Type u\n```\n***\nA `Group` is a `Monoid` with an operation `⁻¹` satisfying `a⁻¹ * a = 1`.\n\nThere is also a division operation `/` such that `a / b = a * b⁻¹`,\nwith a default so that `a / b = a * b⁻¹` holds by definition.\n\nUse `Group.ofLeftAxioms` or `Group.ofRightAxioms` to define a group structure\non a type with the minimum proof obligations.\n\n***\n*import Mathlib.Algebra.Group.Defs*", "kind": "markdown"}}
{"character": "p", "row": 2, "column": 66, "range": {"start": {"line": 2, "character": 62}, "end": {"line": 2, "character": 67}}, "contents": {"value": "```lean\nGroup.{u} (G : Type u) : Type u\n```\n***\nA `Group` is a `Monoid` with an operation `⁻¹` satisfying `a⁻¹ * a = 1`.\n\nThere is also a division operation `/` such that `a / b = a * b⁻¹`,\nwith a default so that `a / b = a * b⁻¹` holds by definition.\n\nUse `Group.ofLeftAxioms` or `Group.ofRightAxioms` to define a group structure\non a type with the minimum proof obligations.\n\n***\n*import Mathlib.Algebra.Group.Defs*", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 67, "range": {"start": {"line": 2, "character": 62}, "end": {"line": 2, "character": 69}}, "contents": {"value": "```lean\nType u_1\n```", "kind": "markdown"}}
{"character": "G", "row": 2, "column": 68, "range": {"start": {"line": 2, "character": 68}, "end": {"line": 2, "character": 69}}, "contents": {"value": "```lean\nG : Type u_1\n```", "kind": "markdown"}}
{"character": "]", "row": 2, "column": 69, "range": {"start": {"line": 2, "character": 61}, "end": {"line": 2, "character": 70}}, "contents": {"value": "Instance-implicit binder, like `[C]` or `[inst : C]`.\nIn regular applications without `@` explicit mode, it is automatically inserted\nand solved for by typeclass inference for the specified class `C`.\nIn `@` explicit mode, if `_` is used for an instance-implicit parameter, then it is still solved for by typeclass inference;\nuse `(_)` to inhibit this and have it be solved for by unification instead, like an implicit argument.\n", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 70}
{"character": ":", "row": 2, "column": 71, "range": {"start": {"line": 2, "character": 30}, "end": {"line": 2, "character": 95}}, "contents": {"value": "`declSig` matches the signature of a declaration with required type: a list of binders and then `: type` ", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 72}
{"character": "I", "row": 2, "column": 73, "range": {"start": {"line": 2, "character": 73}, "end": {"line": 2, "character": 79}}, "contents": {"value": "```lean\nIsConj.{u} {α : Type u} [Monoid α] (a b : α) : Prop\n```\n***\nWe say that `a` is conjugate to `b` if for some unit `c` we have `c * a * c⁻¹ = b`. \n***\n*import Mathlib.Algebra.Group.Conj*", "kind": "markdown"}}
{"character": "s", "row": 2, "column": 74, "range": {"start": {"line": 2, "character": 73}, "end": {"line": 2, "character": 79}}, "contents": {"value": "```lean\nIsConj.{u} {α : Type u} [Monoid α] (a b : α) : Prop\n```\n***\nWe say that `a` is conjugate to `b` if for some unit `c` we have `c * a * c⁻¹ = b`. \n***\n*import Mathlib.Algebra.Group.Conj*", "kind": "markdown"}}
{"character": "C", "row": 2, "column": 75, "range": {"start": {"line": 2, "character": 73}, "end": {"line": 2, "character": 79}}, "contents": {"value": "```lean\nIsConj.{u} {α : Type u} [Monoid α] (a b : α) : Prop\n```\n***\nWe say that `a` is conjugate to `b` if for some unit `c` we have `c * a * c⁻¹ = b`. \n***\n*import Mathlib.Algebra.Group.Conj*", "kind": "markdown"}}
{"character": "o", "row": 2, "column": 76, "range": {"start": {"line": 2, "character": 73}, "end": {"line": 2, "character": 79}}, "contents": {"value": "```lean\nIsConj.{u} {α : Type u} [Monoid α] (a b : α) : Prop\n```\n***\nWe say that `a` is conjugate to `b` if for some unit `c` we have `c * a * c⁻¹ = b`. \n***\n*import Mathlib.Algebra.Group.Conj*", "kind": "markdown"}}
{"character": "n", "row": 2, "column": 77, "range": {"start": {"line": 2, "character": 73}, "end": {"line": 2, "character": 79}}, "contents": {"value": "```lean\nIsConj.{u} {α : Type u} [Monoid α] (a b : α) : Prop\n```\n***\nWe say that `a` is conjugate to `b` if for some unit `c` we have `c * a * c⁻¹ = b`. \n***\n*import Mathlib.Algebra.Group.Conj*", "kind": "markdown"}}
{"character": "j", "row": 2, "column": 78, "range": {"start": {"line": 2, "character": 73}, "end": {"line": 2, "character": 79}}, "contents": {"value": "```lean\nIsConj.{u} {α : Type u} [Monoid α] (a b : α) : Prop\n```\n***\nWe say that `a` is conjugate to `b` if for some unit `c` we have `c * a * c⁻¹ = b`. \n***\n*import Mathlib.Algebra.Group.Conj*", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 79, "range": {"start": {"line": 2, "character": 73}, "end": {"line": 2, "character": 95}}, "contents": {"value": "```lean\nProp\n```", "kind": "markdown"}}
{"character": "(", "row": 2, "column": 80, "range": {"start": {"line": 2, "character": 80}, "end": {"line": 2, "character": 87}}, "contents": {"value": "```lean\nG\n```\n***\nParentheses, used for grouping expressions (e.g., `a * (b + c)`).\nCan also be used for creating simple functions when combined with `·`. Here are some examples:\n  - `(· + 1)` is shorthand for `fun x => x + 1`\n  - `(· + ·)` is shorthand for `fun x y => x + y`\n  - `(f · a b)` is shorthand for `fun x => f x a b`\n  - `(h (· + 1) ·)` is shorthand for `fun x => h (fun y => y + 1) x`\n  - also applies to other parentheses-like notations such as `(·, 1)`\n", "kind": "markdown"}}
{"character": "a", "row": 2, "column": 81, "range": {"start": {"line": 2, "character": 81}, "end": {"line": 2, "character": 82}}, "contents": {"value": "```lean\na : G\n```", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 82, "range": {"start": {"line": 2, "character": 81}, "end": {"line": 2, "character": 86}}, "contents": {"value": "```lean\nG\n```\n***\n`a * b` computes the product of `a` and `b`.\nThe meaning of this notation is type-dependent. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `*` in identifiers is `mul`.", "kind": "markdown"}}
{"character": "*", "row": 2, "column": 83, "range": {"start": {"line": 2, "character": 81}, "end": {"line": 2, "character": 86}}, "contents": {"value": "```lean\nG\n```\n***\n`a * b` computes the product of `a` and `b`.\nThe meaning of this notation is type-dependent. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `*` in identifiers is `mul`.", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 84, "range": {"start": {"line": 2, "character": 81}, "end": {"line": 2, "character": 86}}, "contents": {"value": "```lean\nG\n```\n***\n`a * b` computes the product of `a` and `b`.\nThe meaning of this notation is type-dependent. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `*` in identifiers is `mul`.", "kind": "markdown"}}
{"character": "b", "row": 2, "column": 85, "range": {"start": {"line": 2, "character": 85}, "end": {"line": 2, "character": 86}}, "contents": {"value": "```lean\nb : G\n```", "kind": "markdown"}}
{"character": ")", "row": 2, "column": 86, "range": {"start": {"line": 2, "character": 80}, "end": {"line": 2, "character": 87}}, "contents": {"value": "```lean\nG\n```\n***\nParentheses, used for grouping expressions (e.g., `a * (b + c)`).\nCan also be used for creating simple functions when combined with `·`. Here are some examples:\n  - `(· + 1)` is shorthand for `fun x => x + 1`\n  - `(· + ·)` is shorthand for `fun x y => x + y`\n  - `(f · a b)` is shorthand for `fun x => f x a b`\n  - `(h (· + 1) ·)` is shorthand for `fun x => h (fun y => y + 1) x`\n  - also applies to other parentheses-like notations such as `(·, 1)`\n", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 87, "range": {"start": {"line": 2, "character": 73}, "end": {"line": 2, "character": 95}}, "contents": {"value": "```lean\nProp\n```", "kind": "markdown"}}
{"character": "(", "row": 2, "column": 88, "range": {"start": {"line": 2, "character": 88}, "end": {"line": 2, "character": 95}}, "contents": {"value": "```lean\nG\n```\n***\nParentheses, used for grouping expressions (e.g., `a * (b + c)`).\nCan also be used for creating simple functions when combined with `·`. Here are some examples:\n  - `(· + 1)` is shorthand for `fun x => x + 1`\n  - `(· + ·)` is shorthand for `fun x y => x + y`\n  - `(f · a b)` is shorthand for `fun x => f x a b`\n  - `(h (· + 1) ·)` is shorthand for `fun x => h (fun y => y + 1) x`\n  - also applies to other parentheses-like notations such as `(·, 1)`\n", "kind": "markdown"}}
{"character": "b", "row": 2, "column": 89, "range": {"start": {"line": 2, "character": 89}, "end": {"line": 2, "character": 90}}, "contents": {"value": "```lean\nb : G\n```", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 90, "range": {"start": {"line": 2, "character": 89}, "end": {"line": 2, "character": 94}}, "contents": {"value": "```lean\nG\n```\n***\n`a * b` computes the product of `a` and `b`.\nThe meaning of this notation is type-dependent. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `*` in identifiers is `mul`.", "kind": "markdown"}}
{"character": "*", "row": 2, "column": 91, "range": {"start": {"line": 2, "character": 89}, "end": {"line": 2, "character": 94}}, "contents": {"value": "```lean\nG\n```\n***\n`a * b` computes the product of `a` and `b`.\nThe meaning of this notation is type-dependent. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `*` in identifiers is `mul`.", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 92, "range": {"start": {"line": 2, "character": 89}, "end": {"line": 2, "character": 94}}, "contents": {"value": "```lean\nG\n```\n***\n`a * b` computes the product of `a` and `b`.\nThe meaning of this notation is type-dependent. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `*` in identifiers is `mul`.", "kind": "markdown"}}
{"character": "a", "row": 2, "column": 93, "range": {"start": {"line": 2, "character": 93}, "end": {"line": 2, "character": 94}}, "contents": {"value": "```lean\na : G\n```", "kind": "markdown"}}
{"character": ")", "row": 2, "column": 94, "range": {"start": {"line": 2, "character": 88}, "end": {"line": 2, "character": 95}}, "contents": {"value": "```lean\nG\n```\n***\nParentheses, used for grouping expressions (e.g., `a * (b + c)`).\nCan also be used for creating simple functions when combined with `·`. Here are some examples:\n  - `(· + 1)` is shorthand for `fun x => x + 1`\n  - `(· + ·)` is shorthand for `fun x y => x + y`\n  - `(f · a b)` is shorthand for `fun x => f x a b`\n  - `(h (· + 1) ·)` is shorthand for `fun x => h (fun y => y + 1) x`\n  - also applies to other parentheses-like notations such as `(·, 1)`\n", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 95}
{"character": ":", "row": 2, "column": 96}
{"character": "=", "row": 2, "column": 97}
{"character": " ", "row": 2, "column": 98}
{"character": "b", "row": 2, "column": 99, "range": {"start": {"line": 2, "character": 99}, "end": {"line": 2, "character": 107}}, "contents": {"value": "`by tac` constructs a term of the expected type by running the tactic(s) `tac`. ", "kind": "markdown"}}
{"character": "y", "row": 2, "column": 100, "range": {"start": {"line": 2, "character": 99}, "end": {"line": 2, "character": 107}}, "contents": {"value": "`by tac` constructs a term of the expected type by running the tactic(s) `tac`. ", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 101, "range": {"start": {"line": 2, "character": 99}, "end": {"line": 2, "character": 107}}, "contents": {"value": "`by tac` constructs a term of the expected type by running the tactic(s) `tac`. ", "kind": "markdown"}}
{"character": "s", "row": 2, "column": 102, "range": {"start": {"line": 2, "character": 102}, "end": {"line": 2, "character": 107}}, "contents": {"value": "The `sorry` tactic is a temporary placeholder for an incomplete tactic proof,\nclosing the main goal using `exact sorry`.\n\nThis is intended for stubbing-out incomplete parts of a proof while still having a syntactically correct proof skeleton.\nLean will give a warning whenever a proof uses `sorry`, so you aren't likely to miss it,\nbut you can double check if a theorem depends on `sorry` by looking for `sorryAx` in the output\nof the `#print axioms my_thm` command, the axiom used by the implementation of `sorry`.\n", "kind": "markdown"}}
{"character": "o", "row": 2, "column": 103, "range": {"start": {"line": 2, "character": 102}, "end": {"line": 2, "character": 107}}, "contents": {"value": "The `sorry` tactic is a temporary placeholder for an incomplete tactic proof,\nclosing the main goal using `exact sorry`.\n\nThis is intended for stubbing-out incomplete parts of a proof while still having a syntactically correct proof skeleton.\nLean will give a warning whenever a proof uses `sorry`, so you aren't likely to miss it,\nbut you can double check if a theorem depends on `sorry` by looking for `sorryAx` in the output\nof the `#print axioms my_thm` command, the axiom used by the implementation of `sorry`.\n", "kind": "markdown"}}
{"character": "r", "row": 2, "column": 104, "range": {"start": {"line": 2, "character": 102}, "end": {"line": 2, "character": 107}}, "contents": {"value": "The `sorry` tactic is a temporary placeholder for an incomplete tactic proof,\nclosing the main goal using `exact sorry`.\n\nThis is intended for stubbing-out incomplete parts of a proof while still having a syntactically correct proof skeleton.\nLean will give a warning whenever a proof uses `sorry`, so you aren't likely to miss it,\nbut you can double check if a theorem depends on `sorry` by looking for `sorryAx` in the output\nof the `#print axioms my_thm` command, the axiom used by the implementation of `sorry`.\n", "kind": "markdown"}}
{"character": "r", "row": 2, "column": 105, "range": {"start": {"line": 2, "character": 102}, "end": {"line": 2, "character": 107}}, "contents": {"value": "The `sorry` tactic is a temporary placeholder for an incomplete tactic proof,\nclosing the main goal using `exact sorry`.\n\nThis is intended for stubbing-out incomplete parts of a proof while still having a syntactically correct proof skeleton.\nLean will give a warning whenever a proof uses `sorry`, so you aren't likely to miss it,\nbut you can double check if a theorem depends on `sorry` by looking for `sorryAx` in the output\nof the `#print axioms my_thm` command, the axiom used by the implementation of `sorry`.\n", "kind": "markdown"}}
{"character": "y", "row": 2, "column": 106, "range": {"start": {"line": 2, "character": 102}, "end": {"line": 2, "character": 107}}, "contents": {"value": "The `sorry` tactic is a temporary placeholder for an incomplete tactic proof,\nclosing the main goal using `exact sorry`.\n\nThis is intended for stubbing-out incomplete parts of a proof while still having a syntactically correct proof skeleton.\nLean will give a warning whenever a proof uses `sorry`, so you aren't likely to miss it,\nbut you can double check if a theorem depends on `sorry` by looking for `sorryAx` in the output\nof the `#print axioms my_thm` command, the axiom used by the implementation of `sorry`.\n", "kind": "markdown"}}
