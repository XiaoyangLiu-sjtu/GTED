{"character": "i", "row": 0, "column": 0}
{"character": "m", "row": 0, "column": 1}
{"character": "p", "row": 0, "column": 2}
{"character": "o", "row": 0, "column": 3}
{"character": "r", "row": 0, "column": 4}
{"character": "t", "row": 0, "column": 5}
{"character": " ", "row": 0, "column": 6}
{"character": "M", "row": 0, "column": 7}
{"character": "a", "row": 0, "column": 8}
{"character": "t", "row": 0, "column": 9}
{"character": "h", "row": 0, "column": 10}
{"character": "l", "row": 0, "column": 11}
{"character": "i", "row": 0, "column": 12}
{"character": "b", "row": 0, "column": 13}
{"character": "t", "row": 2, "column": 0}
{"character": "h", "row": 2, "column": 1}
{"character": "e", "row": 2, "column": 2}
{"character": "o", "row": 2, "column": 3}
{"character": "r", "row": 2, "column": 4}
{"character": "e", "row": 2, "column": 5}
{"character": "m", "row": 2, "column": 6}
{"character": " ", "row": 2, "column": 7}
{"character": "m", "row": 2, "column": 8, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 21}}, "contents": {"value": "```lean\nmul_assoc_ext (n : ℕ) (a b c : ZMod n) : a * b * c = a * (b * c)\n```", "kind": "markdown"}}
{"character": "u", "row": 2, "column": 9, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 21}}, "contents": {"value": "```lean\nmul_assoc_ext (n : ℕ) (a b c : ZMod n) : a * b * c = a * (b * c)\n```", "kind": "markdown"}}
{"character": "l", "row": 2, "column": 10, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 21}}, "contents": {"value": "```lean\nmul_assoc_ext (n : ℕ) (a b c : ZMod n) : a * b * c = a * (b * c)\n```", "kind": "markdown"}}
{"character": "_", "row": 2, "column": 11, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 21}}, "contents": {"value": "```lean\nmul_assoc_ext (n : ℕ) (a b c : ZMod n) : a * b * c = a * (b * c)\n```", "kind": "markdown"}}
{"character": "a", "row": 2, "column": 12, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 21}}, "contents": {"value": "```lean\nmul_assoc_ext (n : ℕ) (a b c : ZMod n) : a * b * c = a * (b * c)\n```", "kind": "markdown"}}
{"character": "s", "row": 2, "column": 13, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 21}}, "contents": {"value": "```lean\nmul_assoc_ext (n : ℕ) (a b c : ZMod n) : a * b * c = a * (b * c)\n```", "kind": "markdown"}}
{"character": "s", "row": 2, "column": 14, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 21}}, "contents": {"value": "```lean\nmul_assoc_ext (n : ℕ) (a b c : ZMod n) : a * b * c = a * (b * c)\n```", "kind": "markdown"}}
{"character": "o", "row": 2, "column": 15, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 21}}, "contents": {"value": "```lean\nmul_assoc_ext (n : ℕ) (a b c : ZMod n) : a * b * c = a * (b * c)\n```", "kind": "markdown"}}
{"character": "c", "row": 2, "column": 16, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 21}}, "contents": {"value": "```lean\nmul_assoc_ext (n : ℕ) (a b c : ZMod n) : a * b * c = a * (b * c)\n```", "kind": "markdown"}}
{"character": "_", "row": 2, "column": 17, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 21}}, "contents": {"value": "```lean\nmul_assoc_ext (n : ℕ) (a b c : ZMod n) : a * b * c = a * (b * c)\n```", "kind": "markdown"}}
{"character": "e", "row": 2, "column": 18, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 21}}, "contents": {"value": "```lean\nmul_assoc_ext (n : ℕ) (a b c : ZMod n) : a * b * c = a * (b * c)\n```", "kind": "markdown"}}
{"character": "x", "row": 2, "column": 19, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 21}}, "contents": {"value": "```lean\nmul_assoc_ext (n : ℕ) (a b c : ZMod n) : a * b * c = a * (b * c)\n```", "kind": "markdown"}}
{"character": "t", "row": 2, "column": 20, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 21}}, "contents": {"value": "```lean\nmul_assoc_ext (n : ℕ) (a b c : ZMod n) : a * b * c = a * (b * c)\n```", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 21}
{"character": "(", "row": 2, "column": 22, "range": {"start": {"line": 2, "character": 22}, "end": {"line": 2, "character": 29}}, "contents": {"value": "Explicit binder, like `(x y : A)` or `(x y)`.\nDefault values can be specified using `(x : A := v)` syntax, and tactics using `(x : A := by tac)`.\n", "kind": "markdown"}}
{"character": "n", "row": 2, "column": 23, "range": {"start": {"line": 2, "character": 23}, "end": {"line": 2, "character": 24}}, "contents": {"value": "```lean\nn : ℕ\n```", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 24}
{"character": ":", "row": 2, "column": 25, "range": {"start": {"line": 2, "character": 22}, "end": {"line": 2, "character": 29}}, "contents": {"value": "Explicit binder, like `(x y : A)` or `(x y)`.\nDefault values can be specified using `(x : A := v)` syntax, and tactics using `(x : A := by tac)`.\n", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 26}
{"character": "ℕ", "row": 2, "column": 27, "range": {"start": {"line": 2, "character": 27}, "end": {"line": 2, "character": 28}}, "contents": {"value": "```lean\nNat : Type\n```\n***\nThe natural numbers, starting at zero.\n\nThis type is special-cased by both the kernel and the compiler, and overridden with an efficient\nimplementation. Both use a fast arbitrary-precision arithmetic library (usually\n[GMP](https://gmplib.org/)); at runtime, `Nat` values that are sufficiently small are unboxed.\n\n***\n*import Init.Prelude*", "kind": "markdown"}}
{"character": ")", "row": 2, "column": 28, "range": {"start": {"line": 2, "character": 22}, "end": {"line": 2, "character": 29}}, "contents": {"value": "Explicit binder, like `(x y : A)` or `(x y)`.\nDefault values can be specified using `(x : A := v)` syntax, and tactics using `(x : A := by tac)`.\n", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 29}
{"character": "(", "row": 2, "column": 30, "range": {"start": {"line": 2, "character": 30}, "end": {"line": 2, "character": 42}}, "contents": {"value": "Explicit binder, like `(x y : A)` or `(x y)`.\nDefault values can be specified using `(x : A := v)` syntax, and tactics using `(x : A := by tac)`.\n", "kind": "markdown"}}
{"character": "a", "row": 2, "column": 31, "range": {"start": {"line": 2, "character": 31}, "end": {"line": 2, "character": 32}}, "contents": {"value": "```lean\na : ZMod n\n```", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 32}
{"character": ":", "row": 2, "column": 33, "range": {"start": {"line": 2, "character": 30}, "end": {"line": 2, "character": 42}}, "contents": {"value": "Explicit binder, like `(x y : A)` or `(x y)`.\nDefault values can be specified using `(x : A := v)` syntax, and tactics using `(x : A := by tac)`.\n", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 34}
{"character": "Z", "row": 2, "column": 35, "range": {"start": {"line": 2, "character": 35}, "end": {"line": 2, "character": 39}}, "contents": {"value": "```lean\nZMod : ℕ → Type\n```\n***\nThe integers modulo `n : ℕ`. \n***\n*import Mathlib.Data.ZMod.Defs*", "kind": "markdown"}}
{"character": "M", "row": 2, "column": 36, "range": {"start": {"line": 2, "character": 35}, "end": {"line": 2, "character": 39}}, "contents": {"value": "```lean\nZMod : ℕ → Type\n```\n***\nThe integers modulo `n : ℕ`. \n***\n*import Mathlib.Data.ZMod.Defs*", "kind": "markdown"}}
{"character": "o", "row": 2, "column": 37, "range": {"start": {"line": 2, "character": 35}, "end": {"line": 2, "character": 39}}, "contents": {"value": "```lean\nZMod : ℕ → Type\n```\n***\nThe integers modulo `n : ℕ`. \n***\n*import Mathlib.Data.ZMod.Defs*", "kind": "markdown"}}
{"character": "d", "row": 2, "column": 38, "range": {"start": {"line": 2, "character": 35}, "end": {"line": 2, "character": 39}}, "contents": {"value": "```lean\nZMod : ℕ → Type\n```\n***\nThe integers modulo `n : ℕ`. \n***\n*import Mathlib.Data.ZMod.Defs*", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 39, "range": {"start": {"line": 2, "character": 35}, "end": {"line": 2, "character": 41}}, "contents": {"value": "```lean\nType\n```", "kind": "markdown"}}
{"character": "n", "row": 2, "column": 40, "range": {"start": {"line": 2, "character": 40}, "end": {"line": 2, "character": 41}}, "contents": {"value": "```lean\nn : ℕ\n```", "kind": "markdown"}}
{"character": ")", "row": 2, "column": 41, "range": {"start": {"line": 2, "character": 30}, "end": {"line": 2, "character": 42}}, "contents": {"value": "Explicit binder, like `(x y : A)` or `(x y)`.\nDefault values can be specified using `(x : A := v)` syntax, and tactics using `(x : A := by tac)`.\n", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 42}
{"character": "(", "row": 2, "column": 43, "range": {"start": {"line": 2, "character": 43}, "end": {"line": 2, "character": 55}}, "contents": {"value": "Explicit binder, like `(x y : A)` or `(x y)`.\nDefault values can be specified using `(x : A := v)` syntax, and tactics using `(x : A := by tac)`.\n", "kind": "markdown"}}
{"character": "b", "row": 2, "column": 44, "range": {"start": {"line": 2, "character": 44}, "end": {"line": 2, "character": 45}}, "contents": {"value": "```lean\nb : ZMod n\n```", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 45}
{"character": ":", "row": 2, "column": 46, "range": {"start": {"line": 2, "character": 43}, "end": {"line": 2, "character": 55}}, "contents": {"value": "Explicit binder, like `(x y : A)` or `(x y)`.\nDefault values can be specified using `(x : A := v)` syntax, and tactics using `(x : A := by tac)`.\n", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 47}
{"character": "Z", "row": 2, "column": 48, "range": {"start": {"line": 2, "character": 48}, "end": {"line": 2, "character": 52}}, "contents": {"value": "```lean\nZMod : ℕ → Type\n```\n***\nThe integers modulo `n : ℕ`. \n***\n*import Mathlib.Data.ZMod.Defs*", "kind": "markdown"}}
{"character": "M", "row": 2, "column": 49, "range": {"start": {"line": 2, "character": 48}, "end": {"line": 2, "character": 52}}, "contents": {"value": "```lean\nZMod : ℕ → Type\n```\n***\nThe integers modulo `n : ℕ`. \n***\n*import Mathlib.Data.ZMod.Defs*", "kind": "markdown"}}
{"character": "o", "row": 2, "column": 50, "range": {"start": {"line": 2, "character": 48}, "end": {"line": 2, "character": 52}}, "contents": {"value": "```lean\nZMod : ℕ → Type\n```\n***\nThe integers modulo `n : ℕ`. \n***\n*import Mathlib.Data.ZMod.Defs*", "kind": "markdown"}}
{"character": "d", "row": 2, "column": 51, "range": {"start": {"line": 2, "character": 48}, "end": {"line": 2, "character": 52}}, "contents": {"value": "```lean\nZMod : ℕ → Type\n```\n***\nThe integers modulo `n : ℕ`. \n***\n*import Mathlib.Data.ZMod.Defs*", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 52, "range": {"start": {"line": 2, "character": 48}, "end": {"line": 2, "character": 54}}, "contents": {"value": "```lean\nType\n```", "kind": "markdown"}}
{"character": "n", "row": 2, "column": 53, "range": {"start": {"line": 2, "character": 53}, "end": {"line": 2, "character": 54}}, "contents": {"value": "```lean\nn : ℕ\n```", "kind": "markdown"}}
{"character": ")", "row": 2, "column": 54, "range": {"start": {"line": 2, "character": 43}, "end": {"line": 2, "character": 55}}, "contents": {"value": "Explicit binder, like `(x y : A)` or `(x y)`.\nDefault values can be specified using `(x : A := v)` syntax, and tactics using `(x : A := by tac)`.\n", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 55}
{"character": "(", "row": 2, "column": 56, "range": {"start": {"line": 2, "character": 56}, "end": {"line": 2, "character": 68}}, "contents": {"value": "Explicit binder, like `(x y : A)` or `(x y)`.\nDefault values can be specified using `(x : A := v)` syntax, and tactics using `(x : A := by tac)`.\n", "kind": "markdown"}}
{"character": "c", "row": 2, "column": 57, "range": {"start": {"line": 2, "character": 57}, "end": {"line": 2, "character": 58}}, "contents": {"value": "```lean\nc : ZMod n\n```", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 58}
{"character": ":", "row": 2, "column": 59, "range": {"start": {"line": 2, "character": 56}, "end": {"line": 2, "character": 68}}, "contents": {"value": "Explicit binder, like `(x y : A)` or `(x y)`.\nDefault values can be specified using `(x : A := v)` syntax, and tactics using `(x : A := by tac)`.\n", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 60}
{"character": "Z", "row": 2, "column": 61, "range": {"start": {"line": 2, "character": 61}, "end": {"line": 2, "character": 65}}, "contents": {"value": "```lean\nZMod : ℕ → Type\n```\n***\nThe integers modulo `n : ℕ`. \n***\n*import Mathlib.Data.ZMod.Defs*", "kind": "markdown"}}
{"character": "M", "row": 2, "column": 62, "range": {"start": {"line": 2, "character": 61}, "end": {"line": 2, "character": 65}}, "contents": {"value": "```lean\nZMod : ℕ → Type\n```\n***\nThe integers modulo `n : ℕ`. \n***\n*import Mathlib.Data.ZMod.Defs*", "kind": "markdown"}}
{"character": "o", "row": 2, "column": 63, "range": {"start": {"line": 2, "character": 61}, "end": {"line": 2, "character": 65}}, "contents": {"value": "```lean\nZMod : ℕ → Type\n```\n***\nThe integers modulo `n : ℕ`. \n***\n*import Mathlib.Data.ZMod.Defs*", "kind": "markdown"}}
{"character": "d", "row": 2, "column": 64, "range": {"start": {"line": 2, "character": 61}, "end": {"line": 2, "character": 65}}, "contents": {"value": "```lean\nZMod : ℕ → Type\n```\n***\nThe integers modulo `n : ℕ`. \n***\n*import Mathlib.Data.ZMod.Defs*", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 65, "range": {"start": {"line": 2, "character": 61}, "end": {"line": 2, "character": 67}}, "contents": {"value": "```lean\nType\n```", "kind": "markdown"}}
{"character": "n", "row": 2, "column": 66, "range": {"start": {"line": 2, "character": 66}, "end": {"line": 2, "character": 67}}, "contents": {"value": "```lean\nn : ℕ\n```", "kind": "markdown"}}
{"character": ")", "row": 2, "column": 67, "range": {"start": {"line": 2, "character": 56}, "end": {"line": 2, "character": 68}}, "contents": {"value": "Explicit binder, like `(x y : A)` or `(x y)`.\nDefault values can be specified using `(x : A := v)` syntax, and tactics using `(x : A := by tac)`.\n", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 68}
{"character": ":", "row": 2, "column": 69, "range": {"start": {"line": 2, "character": 22}, "end": {"line": 2, "character": 94}}, "contents": {"value": "`declSig` matches the signature of a declaration with required type: a list of binders and then `: type` ", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 70}
{"character": "a", "row": 2, "column": 71, "range": {"start": {"line": 2, "character": 71}, "end": {"line": 2, "character": 72}}, "contents": {"value": "```lean\na : ZMod n\n```", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 72, "range": {"start": {"line": 2, "character": 71}, "end": {"line": 2, "character": 76}}, "contents": {"value": "```lean\nZMod n\n```\n***\n`a * b` computes the product of `a` and `b`.\nThe meaning of this notation is type-dependent. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `*` in identifiers is `mul`.", "kind": "markdown"}}
{"character": "*", "row": 2, "column": 73, "range": {"start": {"line": 2, "character": 71}, "end": {"line": 2, "character": 76}}, "contents": {"value": "```lean\nZMod n\n```\n***\n`a * b` computes the product of `a` and `b`.\nThe meaning of this notation is type-dependent. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `*` in identifiers is `mul`.", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 74, "range": {"start": {"line": 2, "character": 71}, "end": {"line": 2, "character": 76}}, "contents": {"value": "```lean\nZMod n\n```\n***\n`a * b` computes the product of `a` and `b`.\nThe meaning of this notation is type-dependent. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `*` in identifiers is `mul`.", "kind": "markdown"}}
{"character": "b", "row": 2, "column": 75, "range": {"start": {"line": 2, "character": 75}, "end": {"line": 2, "character": 76}}, "contents": {"value": "```lean\nb : ZMod n\n```", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 76, "range": {"start": {"line": 2, "character": 71}, "end": {"line": 2, "character": 80}}, "contents": {"value": "```lean\nZMod n\n```\n***\n`a * b` computes the product of `a` and `b`.\nThe meaning of this notation is type-dependent. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `*` in identifiers is `mul`.", "kind": "markdown"}}
{"character": "*", "row": 2, "column": 77, "range": {"start": {"line": 2, "character": 71}, "end": {"line": 2, "character": 80}}, "contents": {"value": "```lean\nZMod n\n```\n***\n`a * b` computes the product of `a` and `b`.\nThe meaning of this notation is type-dependent. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `*` in identifiers is `mul`.", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 78, "range": {"start": {"line": 2, "character": 71}, "end": {"line": 2, "character": 80}}, "contents": {"value": "```lean\nZMod n\n```\n***\n`a * b` computes the product of `a` and `b`.\nThe meaning of this notation is type-dependent. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `*` in identifiers is `mul`.", "kind": "markdown"}}
{"character": "c", "row": 2, "column": 79, "range": {"start": {"line": 2, "character": 79}, "end": {"line": 2, "character": 80}}, "contents": {"value": "```lean\nc : ZMod n\n```", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 80, "range": {"start": {"line": 2, "character": 71}, "end": {"line": 2, "character": 94}}, "contents": {"value": "```lean\nProp\n```\n***\nThe equality relation. It has one introduction rule, `Eq.refl`.\nWe use `a = b` as notation for `Eq a b`.\nA fundamental property of equality is that it is an equivalence relation.\n```\nvariable (α : Type) (a b c d : α)\nvariable (hab : a = b) (hcb : c = b) (hcd : c = d)\n\nexample : a = d :=\n  Eq.trans (Eq.trans hab (Eq.symm hcb)) hcd\n```\nEquality is much more than an equivalence relation, however. It has the important property that every assertion\nrespects the equivalence, in the sense that we can substitute equal expressions without changing the truth value.\nThat is, given `h1 : a = b` and `h2 : p a`, we can construct a proof for `p b` using substitution: `Eq.subst h1 h2`.\nExample:\n```\nexample (α : Type) (a b : α) (p : α → Prop)\n        (h1 : a = b) (h2 : p a) : p b :=\n  Eq.subst h1 h2\n\nexample (α : Type) (a b : α) (p : α → Prop)\n    (h1 : a = b) (h2 : p a) : p b :=\n  h1 ▸ h2\n```\nThe triangle in the second presentation is a macro built on top of `Eq.subst` and `Eq.symm`, and you can enter it by typing `\\t`.\nFor more information: [Equality](https://lean-lang.org/theorem_proving_in_lean4/quantifiers_and_equality.html#equality)\n\n\nConventions for notations in identifiers:\n\n * The recommended spelling of `=` in identifiers is `eq`.", "kind": "markdown"}}
{"character": "=", "row": 2, "column": 81, "range": {"start": {"line": 2, "character": 71}, "end": {"line": 2, "character": 94}}, "contents": {"value": "```lean\nProp\n```\n***\nThe equality relation. It has one introduction rule, `Eq.refl`.\nWe use `a = b` as notation for `Eq a b`.\nA fundamental property of equality is that it is an equivalence relation.\n```\nvariable (α : Type) (a b c d : α)\nvariable (hab : a = b) (hcb : c = b) (hcd : c = d)\n\nexample : a = d :=\n  Eq.trans (Eq.trans hab (Eq.symm hcb)) hcd\n```\nEquality is much more than an equivalence relation, however. It has the important property that every assertion\nrespects the equivalence, in the sense that we can substitute equal expressions without changing the truth value.\nThat is, given `h1 : a = b` and `h2 : p a`, we can construct a proof for `p b` using substitution: `Eq.subst h1 h2`.\nExample:\n```\nexample (α : Type) (a b : α) (p : α → Prop)\n        (h1 : a = b) (h2 : p a) : p b :=\n  Eq.subst h1 h2\n\nexample (α : Type) (a b : α) (p : α → Prop)\n    (h1 : a = b) (h2 : p a) : p b :=\n  h1 ▸ h2\n```\nThe triangle in the second presentation is a macro built on top of `Eq.subst` and `Eq.symm`, and you can enter it by typing `\\t`.\nFor more information: [Equality](https://lean-lang.org/theorem_proving_in_lean4/quantifiers_and_equality.html#equality)\n\n\nConventions for notations in identifiers:\n\n * The recommended spelling of `=` in identifiers is `eq`.", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 82, "range": {"start": {"line": 2, "character": 71}, "end": {"line": 2, "character": 94}}, "contents": {"value": "```lean\nProp\n```\n***\nThe equality relation. It has one introduction rule, `Eq.refl`.\nWe use `a = b` as notation for `Eq a b`.\nA fundamental property of equality is that it is an equivalence relation.\n```\nvariable (α : Type) (a b c d : α)\nvariable (hab : a = b) (hcb : c = b) (hcd : c = d)\n\nexample : a = d :=\n  Eq.trans (Eq.trans hab (Eq.symm hcb)) hcd\n```\nEquality is much more than an equivalence relation, however. It has the important property that every assertion\nrespects the equivalence, in the sense that we can substitute equal expressions without changing the truth value.\nThat is, given `h1 : a = b` and `h2 : p a`, we can construct a proof for `p b` using substitution: `Eq.subst h1 h2`.\nExample:\n```\nexample (α : Type) (a b : α) (p : α → Prop)\n        (h1 : a = b) (h2 : p a) : p b :=\n  Eq.subst h1 h2\n\nexample (α : Type) (a b : α) (p : α → Prop)\n    (h1 : a = b) (h2 : p a) : p b :=\n  h1 ▸ h2\n```\nThe triangle in the second presentation is a macro built on top of `Eq.subst` and `Eq.symm`, and you can enter it by typing `\\t`.\nFor more information: [Equality](https://lean-lang.org/theorem_proving_in_lean4/quantifiers_and_equality.html#equality)\n\n\nConventions for notations in identifiers:\n\n * The recommended spelling of `=` in identifiers is `eq`.", "kind": "markdown"}}
{"character": "a", "row": 2, "column": 83, "range": {"start": {"line": 2, "character": 83}, "end": {"line": 2, "character": 84}}, "contents": {"value": "```lean\na : ZMod n\n```", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 84, "range": {"start": {"line": 2, "character": 83}, "end": {"line": 2, "character": 94}}, "contents": {"value": "```lean\nZMod n\n```\n***\n`a * b` computes the product of `a` and `b`.\nThe meaning of this notation is type-dependent. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `*` in identifiers is `mul`.", "kind": "markdown"}}
{"character": "*", "row": 2, "column": 85, "range": {"start": {"line": 2, "character": 83}, "end": {"line": 2, "character": 94}}, "contents": {"value": "```lean\nZMod n\n```\n***\n`a * b` computes the product of `a` and `b`.\nThe meaning of this notation is type-dependent. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `*` in identifiers is `mul`.", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 86, "range": {"start": {"line": 2, "character": 83}, "end": {"line": 2, "character": 94}}, "contents": {"value": "```lean\nZMod n\n```\n***\n`a * b` computes the product of `a` and `b`.\nThe meaning of this notation is type-dependent. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `*` in identifiers is `mul`.", "kind": "markdown"}}
{"character": "(", "row": 2, "column": 87, "range": {"start": {"line": 2, "character": 87}, "end": {"line": 2, "character": 94}}, "contents": {"value": "Parentheses, used for grouping expressions (e.g., `a * (b + c)`).\nCan also be used for creating simple functions when combined with `·`. Here are some examples:\n  - `(· + 1)` is shorthand for `fun x => x + 1`\n  - `(· + ·)` is shorthand for `fun x y => x + y`\n  - `(f · a b)` is shorthand for `fun x => f x a b`\n  - `(h (· + 1) ·)` is shorthand for `fun x => h (fun y => y + 1) x`\n  - also applies to other parentheses-like notations such as `(·, 1)`\n", "kind": "markdown"}}
{"character": "b", "row": 2, "column": 88, "range": {"start": {"line": 2, "character": 88}, "end": {"line": 2, "character": 89}}, "contents": {"value": "```lean\nb : ZMod n\n```", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 89, "range": {"start": {"line": 2, "character": 88}, "end": {"line": 2, "character": 93}}, "contents": {"value": "```lean\nZMod n\n```\n***\n`a * b` computes the product of `a` and `b`.\nThe meaning of this notation is type-dependent. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `*` in identifiers is `mul`.", "kind": "markdown"}}
{"character": "*", "row": 2, "column": 90, "range": {"start": {"line": 2, "character": 88}, "end": {"line": 2, "character": 93}}, "contents": {"value": "```lean\nZMod n\n```\n***\n`a * b` computes the product of `a` and `b`.\nThe meaning of this notation is type-dependent. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `*` in identifiers is `mul`.", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 91, "range": {"start": {"line": 2, "character": 88}, "end": {"line": 2, "character": 93}}, "contents": {"value": "```lean\nZMod n\n```\n***\n`a * b` computes the product of `a` and `b`.\nThe meaning of this notation is type-dependent. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `*` in identifiers is `mul`.", "kind": "markdown"}}
{"character": "c", "row": 2, "column": 92, "range": {"start": {"line": 2, "character": 92}, "end": {"line": 2, "character": 93}}, "contents": {"value": "```lean\nc : ZMod n\n```", "kind": "markdown"}}
{"character": ")", "row": 2, "column": 93, "range": {"start": {"line": 2, "character": 87}, "end": {"line": 2, "character": 94}}, "contents": {"value": "Parentheses, used for grouping expressions (e.g., `a * (b + c)`).\nCan also be used for creating simple functions when combined with `·`. Here are some examples:\n  - `(· + 1)` is shorthand for `fun x => x + 1`\n  - `(· + ·)` is shorthand for `fun x y => x + y`\n  - `(f · a b)` is shorthand for `fun x => f x a b`\n  - `(h (· + 1) ·)` is shorthand for `fun x => h (fun y => y + 1) x`\n  - also applies to other parentheses-like notations such as `(·, 1)`\n", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 94}
{"character": ":", "row": 2, "column": 95}
{"character": "=", "row": 2, "column": 96}
{"character": " ", "row": 2, "column": 97}
{"character": "b", "row": 2, "column": 98, "range": {"start": {"line": 2, "character": 98}, "end": {"line": 2, "character": 106}}, "contents": {"value": "`by tac` constructs a term of the expected type by running the tactic(s) `tac`. ", "kind": "markdown"}}
{"character": "y", "row": 2, "column": 99, "range": {"start": {"line": 2, "character": 98}, "end": {"line": 2, "character": 106}}, "contents": {"value": "`by tac` constructs a term of the expected type by running the tactic(s) `tac`. ", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 100, "range": {"start": {"line": 2, "character": 98}, "end": {"line": 2, "character": 106}}, "contents": {"value": "`by tac` constructs a term of the expected type by running the tactic(s) `tac`. ", "kind": "markdown"}}
{"character": "s", "row": 2, "column": 101, "range": {"start": {"line": 2, "character": 101}, "end": {"line": 2, "character": 106}}, "contents": {"value": "The `sorry` tactic is a temporary placeholder for an incomplete tactic proof,\nclosing the main goal using `exact sorry`.\n\nThis is intended for stubbing-out incomplete parts of a proof while still having a syntactically correct proof skeleton.\nLean will give a warning whenever a proof uses `sorry`, so you aren't likely to miss it,\nbut you can double check if a theorem depends on `sorry` by looking for `sorryAx` in the output\nof the `#print axioms my_thm` command, the axiom used by the implementation of `sorry`.\n", "kind": "markdown"}}
{"character": "o", "row": 2, "column": 102, "range": {"start": {"line": 2, "character": 101}, "end": {"line": 2, "character": 106}}, "contents": {"value": "The `sorry` tactic is a temporary placeholder for an incomplete tactic proof,\nclosing the main goal using `exact sorry`.\n\nThis is intended for stubbing-out incomplete parts of a proof while still having a syntactically correct proof skeleton.\nLean will give a warning whenever a proof uses `sorry`, so you aren't likely to miss it,\nbut you can double check if a theorem depends on `sorry` by looking for `sorryAx` in the output\nof the `#print axioms my_thm` command, the axiom used by the implementation of `sorry`.\n", "kind": "markdown"}}
{"character": "r", "row": 2, "column": 103, "range": {"start": {"line": 2, "character": 101}, "end": {"line": 2, "character": 106}}, "contents": {"value": "The `sorry` tactic is a temporary placeholder for an incomplete tactic proof,\nclosing the main goal using `exact sorry`.\n\nThis is intended for stubbing-out incomplete parts of a proof while still having a syntactically correct proof skeleton.\nLean will give a warning whenever a proof uses `sorry`, so you aren't likely to miss it,\nbut you can double check if a theorem depends on `sorry` by looking for `sorryAx` in the output\nof the `#print axioms my_thm` command, the axiom used by the implementation of `sorry`.\n", "kind": "markdown"}}
{"character": "r", "row": 2, "column": 104, "range": {"start": {"line": 2, "character": 101}, "end": {"line": 2, "character": 106}}, "contents": {"value": "The `sorry` tactic is a temporary placeholder for an incomplete tactic proof,\nclosing the main goal using `exact sorry`.\n\nThis is intended for stubbing-out incomplete parts of a proof while still having a syntactically correct proof skeleton.\nLean will give a warning whenever a proof uses `sorry`, so you aren't likely to miss it,\nbut you can double check if a theorem depends on `sorry` by looking for `sorryAx` in the output\nof the `#print axioms my_thm` command, the axiom used by the implementation of `sorry`.\n", "kind": "markdown"}}
{"character": "y", "row": 2, "column": 105, "range": {"start": {"line": 2, "character": 101}, "end": {"line": 2, "character": 106}}, "contents": {"value": "The `sorry` tactic is a temporary placeholder for an incomplete tactic proof,\nclosing the main goal using `exact sorry`.\n\nThis is intended for stubbing-out incomplete parts of a proof while still having a syntactically correct proof skeleton.\nLean will give a warning whenever a proof uses `sorry`, so you aren't likely to miss it,\nbut you can double check if a theorem depends on `sorry` by looking for `sorryAx` in the output\nof the `#print axioms my_thm` command, the axiom used by the implementation of `sorry`.\n", "kind": "markdown"}}
