{"character": "i", "row": 0, "column": 0}
{"character": "m", "row": 0, "column": 1}
{"character": "p", "row": 0, "column": 2}
{"character": "o", "row": 0, "column": 3}
{"character": "r", "row": 0, "column": 4}
{"character": "t", "row": 0, "column": 5}
{"character": " ", "row": 0, "column": 6}
{"character": "M", "row": 0, "column": 7}
{"character": "a", "row": 0, "column": 8}
{"character": "t", "row": 0, "column": 9}
{"character": "h", "row": 0, "column": 10}
{"character": "l", "row": 0, "column": 11}
{"character": "i", "row": 0, "column": 12}
{"character": "b", "row": 0, "column": 13}
{"character": "o", "row": 1, "column": 0, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 13}}, "contents": {"value": "Makes names from other namespaces visible without writing the namespace prefix.\n\nNames that are made available with `open` are visible within the current `section` or `namespace`\nblock. This makes referring to (type) definitions and theorems easier, but note that it can also\nmake [scoped instances], notations, and attributes from a different namespace available.\n\nThe `open` command can be used in a few different ways:\n\n* `open Some.Namespace.Path1 Some.Namespace.Path2` makes all non-protected names in\n  `Some.Namespace.Path1` and `Some.Namespace.Path2` available without the prefix, so that\n  `Some.Namespace.Path1.x` and `Some.Namespace.Path2.y` can be referred to by writing only `x` and\n  `y`.\n\n* `open Some.Namespace.Path hiding def1 def2` opens all non-protected names in `Some.Namespace.Path`\n  except `def1` and `def2`.\n\n* `open Some.Namespace.Path (def1 def2)` only makes `Some.Namespace.Path.def1` and\n  `Some.Namespace.Path.def2` available without the full prefix, so `Some.Namespace.Path.def3` would\n  be unaffected.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open Some.Namespace.Path renaming def1 → def1', def2 → def2'` same as `open Some.Namespace.Path\n  (def1 def2)` but `def1`/`def2`'s names are changed to `def1'`/`def2'`.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open scoped Some.Namespace.Path1 Some.Namespace.Path2` **only** opens [scoped instances],\n  notations, and attributes from `Namespace1` and `Namespace2`; it does **not** make any other name\n  available.\n\n* `open <any of the open shapes above> in` makes the names `open`-ed visible only in the next\n  command or expression.\n\n[scoped instance]: https://lean-lang.org/theorem_proving_in_lean4/type_classes.html#scoped-instances\n(Scoped instances in Theorem Proving in Lean)\n\n\n## Examples\n\n```lean\n/-- SKI combinators https://en.wikipedia.org/wiki/SKI_combinator_calculus -/\nnamespace Combinator.Calculus\n  def I (a : α) : α := a\n  def K (a : α) : β → α := fun _ => a\n  def S (x : α → β → γ) (y : α → β) (z : α) : γ := x z (y z)\nend Combinator.Calculus\n\nsection\n  -- open everything under `Combinator.Calculus`, *i.e.* `I`, `K` and `S`,\n  -- until the section ends\n  open Combinator.Calculus\n\n  theorem SKx_eq_K : S K x = I := rfl\nend\n\n-- open everything under `Combinator.Calculus` only for the next command (the next `theorem`, here)\nopen Combinator.Calculus in\ntheorem SKx_eq_K' : S K x = I := rfl\n\nsection\n  -- open only `S` and `K` under `Combinator.Calculus`\n  open Combinator.Calculus (S K)\n\n  theorem SKxy_eq_y : S K x y = y := rfl\n\n  -- `I` is not in scope, we have to use its full path\n  theorem SKxy_eq_Iy : S K x y = Combinator.Calculus.I y := rfl\nend\n\nsection\n  open Combinator.Calculus\n    renaming\n      I → identity,\n      K → konstant\n\n  #check identity\n  #check konstant\nend\n\nsection\n  open Combinator.Calculus\n    hiding S\n\n  #check I\n  #check K\nend\n\nsection\n  namespace Demo\n    inductive MyType\n    | val\n\n    namespace N1\n      scoped infix:68 \" ≋ \" => BEq.beq\n\n      scoped instance : BEq MyType where\n        beq _ _ := true\n\n      def Alias := MyType\n    end N1\n  end Demo\n\n  -- bring `≋` and the instance in scope, but not `Alias`\n  open scoped Demo.N1\n\n  #check Demo.MyType.val == Demo.MyType.val\n  #check Demo.MyType.val ≋ Demo.MyType.val\n  -- #check Alias -- unknown identifier 'Alias'\nend\n```\n", "kind": "markdown"}}
{"character": "p", "row": 1, "column": 1, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 13}}, "contents": {"value": "Makes names from other namespaces visible without writing the namespace prefix.\n\nNames that are made available with `open` are visible within the current `section` or `namespace`\nblock. This makes referring to (type) definitions and theorems easier, but note that it can also\nmake [scoped instances], notations, and attributes from a different namespace available.\n\nThe `open` command can be used in a few different ways:\n\n* `open Some.Namespace.Path1 Some.Namespace.Path2` makes all non-protected names in\n  `Some.Namespace.Path1` and `Some.Namespace.Path2` available without the prefix, so that\n  `Some.Namespace.Path1.x` and `Some.Namespace.Path2.y` can be referred to by writing only `x` and\n  `y`.\n\n* `open Some.Namespace.Path hiding def1 def2` opens all non-protected names in `Some.Namespace.Path`\n  except `def1` and `def2`.\n\n* `open Some.Namespace.Path (def1 def2)` only makes `Some.Namespace.Path.def1` and\n  `Some.Namespace.Path.def2` available without the full prefix, so `Some.Namespace.Path.def3` would\n  be unaffected.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open Some.Namespace.Path renaming def1 → def1', def2 → def2'` same as `open Some.Namespace.Path\n  (def1 def2)` but `def1`/`def2`'s names are changed to `def1'`/`def2'`.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open scoped Some.Namespace.Path1 Some.Namespace.Path2` **only** opens [scoped instances],\n  notations, and attributes from `Namespace1` and `Namespace2`; it does **not** make any other name\n  available.\n\n* `open <any of the open shapes above> in` makes the names `open`-ed visible only in the next\n  command or expression.\n\n[scoped instance]: https://lean-lang.org/theorem_proving_in_lean4/type_classes.html#scoped-instances\n(Scoped instances in Theorem Proving in Lean)\n\n\n## Examples\n\n```lean\n/-- SKI combinators https://en.wikipedia.org/wiki/SKI_combinator_calculus -/\nnamespace Combinator.Calculus\n  def I (a : α) : α := a\n  def K (a : α) : β → α := fun _ => a\n  def S (x : α → β → γ) (y : α → β) (z : α) : γ := x z (y z)\nend Combinator.Calculus\n\nsection\n  -- open everything under `Combinator.Calculus`, *i.e.* `I`, `K` and `S`,\n  -- until the section ends\n  open Combinator.Calculus\n\n  theorem SKx_eq_K : S K x = I := rfl\nend\n\n-- open everything under `Combinator.Calculus` only for the next command (the next `theorem`, here)\nopen Combinator.Calculus in\ntheorem SKx_eq_K' : S K x = I := rfl\n\nsection\n  -- open only `S` and `K` under `Combinator.Calculus`\n  open Combinator.Calculus (S K)\n\n  theorem SKxy_eq_y : S K x y = y := rfl\n\n  -- `I` is not in scope, we have to use its full path\n  theorem SKxy_eq_Iy : S K x y = Combinator.Calculus.I y := rfl\nend\n\nsection\n  open Combinator.Calculus\n    renaming\n      I → identity,\n      K → konstant\n\n  #check identity\n  #check konstant\nend\n\nsection\n  open Combinator.Calculus\n    hiding S\n\n  #check I\n  #check K\nend\n\nsection\n  namespace Demo\n    inductive MyType\n    | val\n\n    namespace N1\n      scoped infix:68 \" ≋ \" => BEq.beq\n\n      scoped instance : BEq MyType where\n        beq _ _ := true\n\n      def Alias := MyType\n    end N1\n  end Demo\n\n  -- bring `≋` and the instance in scope, but not `Alias`\n  open scoped Demo.N1\n\n  #check Demo.MyType.val == Demo.MyType.val\n  #check Demo.MyType.val ≋ Demo.MyType.val\n  -- #check Alias -- unknown identifier 'Alias'\nend\n```\n", "kind": "markdown"}}
{"character": "e", "row": 1, "column": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 13}}, "contents": {"value": "Makes names from other namespaces visible without writing the namespace prefix.\n\nNames that are made available with `open` are visible within the current `section` or `namespace`\nblock. This makes referring to (type) definitions and theorems easier, but note that it can also\nmake [scoped instances], notations, and attributes from a different namespace available.\n\nThe `open` command can be used in a few different ways:\n\n* `open Some.Namespace.Path1 Some.Namespace.Path2` makes all non-protected names in\n  `Some.Namespace.Path1` and `Some.Namespace.Path2` available without the prefix, so that\n  `Some.Namespace.Path1.x` and `Some.Namespace.Path2.y` can be referred to by writing only `x` and\n  `y`.\n\n* `open Some.Namespace.Path hiding def1 def2` opens all non-protected names in `Some.Namespace.Path`\n  except `def1` and `def2`.\n\n* `open Some.Namespace.Path (def1 def2)` only makes `Some.Namespace.Path.def1` and\n  `Some.Namespace.Path.def2` available without the full prefix, so `Some.Namespace.Path.def3` would\n  be unaffected.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open Some.Namespace.Path renaming def1 → def1', def2 → def2'` same as `open Some.Namespace.Path\n  (def1 def2)` but `def1`/`def2`'s names are changed to `def1'`/`def2'`.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open scoped Some.Namespace.Path1 Some.Namespace.Path2` **only** opens [scoped instances],\n  notations, and attributes from `Namespace1` and `Namespace2`; it does **not** make any other name\n  available.\n\n* `open <any of the open shapes above> in` makes the names `open`-ed visible only in the next\n  command or expression.\n\n[scoped instance]: https://lean-lang.org/theorem_proving_in_lean4/type_classes.html#scoped-instances\n(Scoped instances in Theorem Proving in Lean)\n\n\n## Examples\n\n```lean\n/-- SKI combinators https://en.wikipedia.org/wiki/SKI_combinator_calculus -/\nnamespace Combinator.Calculus\n  def I (a : α) : α := a\n  def K (a : α) : β → α := fun _ => a\n  def S (x : α → β → γ) (y : α → β) (z : α) : γ := x z (y z)\nend Combinator.Calculus\n\nsection\n  -- open everything under `Combinator.Calculus`, *i.e.* `I`, `K` and `S`,\n  -- until the section ends\n  open Combinator.Calculus\n\n  theorem SKx_eq_K : S K x = I := rfl\nend\n\n-- open everything under `Combinator.Calculus` only for the next command (the next `theorem`, here)\nopen Combinator.Calculus in\ntheorem SKx_eq_K' : S K x = I := rfl\n\nsection\n  -- open only `S` and `K` under `Combinator.Calculus`\n  open Combinator.Calculus (S K)\n\n  theorem SKxy_eq_y : S K x y = y := rfl\n\n  -- `I` is not in scope, we have to use its full path\n  theorem SKxy_eq_Iy : S K x y = Combinator.Calculus.I y := rfl\nend\n\nsection\n  open Combinator.Calculus\n    renaming\n      I → identity,\n      K → konstant\n\n  #check identity\n  #check konstant\nend\n\nsection\n  open Combinator.Calculus\n    hiding S\n\n  #check I\n  #check K\nend\n\nsection\n  namespace Demo\n    inductive MyType\n    | val\n\n    namespace N1\n      scoped infix:68 \" ≋ \" => BEq.beq\n\n      scoped instance : BEq MyType where\n        beq _ _ := true\n\n      def Alias := MyType\n    end N1\n  end Demo\n\n  -- bring `≋` and the instance in scope, but not `Alias`\n  open scoped Demo.N1\n\n  #check Demo.MyType.val == Demo.MyType.val\n  #check Demo.MyType.val ≋ Demo.MyType.val\n  -- #check Alias -- unknown identifier 'Alias'\nend\n```\n", "kind": "markdown"}}
{"character": "n", "row": 1, "column": 3, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 13}}, "contents": {"value": "Makes names from other namespaces visible without writing the namespace prefix.\n\nNames that are made available with `open` are visible within the current `section` or `namespace`\nblock. This makes referring to (type) definitions and theorems easier, but note that it can also\nmake [scoped instances], notations, and attributes from a different namespace available.\n\nThe `open` command can be used in a few different ways:\n\n* `open Some.Namespace.Path1 Some.Namespace.Path2` makes all non-protected names in\n  `Some.Namespace.Path1` and `Some.Namespace.Path2` available without the prefix, so that\n  `Some.Namespace.Path1.x` and `Some.Namespace.Path2.y` can be referred to by writing only `x` and\n  `y`.\n\n* `open Some.Namespace.Path hiding def1 def2` opens all non-protected names in `Some.Namespace.Path`\n  except `def1` and `def2`.\n\n* `open Some.Namespace.Path (def1 def2)` only makes `Some.Namespace.Path.def1` and\n  `Some.Namespace.Path.def2` available without the full prefix, so `Some.Namespace.Path.def3` would\n  be unaffected.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open Some.Namespace.Path renaming def1 → def1', def2 → def2'` same as `open Some.Namespace.Path\n  (def1 def2)` but `def1`/`def2`'s names are changed to `def1'`/`def2'`.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open scoped Some.Namespace.Path1 Some.Namespace.Path2` **only** opens [scoped instances],\n  notations, and attributes from `Namespace1` and `Namespace2`; it does **not** make any other name\n  available.\n\n* `open <any of the open shapes above> in` makes the names `open`-ed visible only in the next\n  command or expression.\n\n[scoped instance]: https://lean-lang.org/theorem_proving_in_lean4/type_classes.html#scoped-instances\n(Scoped instances in Theorem Proving in Lean)\n\n\n## Examples\n\n```lean\n/-- SKI combinators https://en.wikipedia.org/wiki/SKI_combinator_calculus -/\nnamespace Combinator.Calculus\n  def I (a : α) : α := a\n  def K (a : α) : β → α := fun _ => a\n  def S (x : α → β → γ) (y : α → β) (z : α) : γ := x z (y z)\nend Combinator.Calculus\n\nsection\n  -- open everything under `Combinator.Calculus`, *i.e.* `I`, `K` and `S`,\n  -- until the section ends\n  open Combinator.Calculus\n\n  theorem SKx_eq_K : S K x = I := rfl\nend\n\n-- open everything under `Combinator.Calculus` only for the next command (the next `theorem`, here)\nopen Combinator.Calculus in\ntheorem SKx_eq_K' : S K x = I := rfl\n\nsection\n  -- open only `S` and `K` under `Combinator.Calculus`\n  open Combinator.Calculus (S K)\n\n  theorem SKxy_eq_y : S K x y = y := rfl\n\n  -- `I` is not in scope, we have to use its full path\n  theorem SKxy_eq_Iy : S K x y = Combinator.Calculus.I y := rfl\nend\n\nsection\n  open Combinator.Calculus\n    renaming\n      I → identity,\n      K → konstant\n\n  #check identity\n  #check konstant\nend\n\nsection\n  open Combinator.Calculus\n    hiding S\n\n  #check I\n  #check K\nend\n\nsection\n  namespace Demo\n    inductive MyType\n    | val\n\n    namespace N1\n      scoped infix:68 \" ≋ \" => BEq.beq\n\n      scoped instance : BEq MyType where\n        beq _ _ := true\n\n      def Alias := MyType\n    end N1\n  end Demo\n\n  -- bring `≋` and the instance in scope, but not `Alias`\n  open scoped Demo.N1\n\n  #check Demo.MyType.val == Demo.MyType.val\n  #check Demo.MyType.val ≋ Demo.MyType.val\n  -- #check Alias -- unknown identifier 'Alias'\nend\n```\n", "kind": "markdown"}}
{"character": " ", "row": 1, "column": 4, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 13}}, "contents": {"value": "Makes names from other namespaces visible without writing the namespace prefix.\n\nNames that are made available with `open` are visible within the current `section` or `namespace`\nblock. This makes referring to (type) definitions and theorems easier, but note that it can also\nmake [scoped instances], notations, and attributes from a different namespace available.\n\nThe `open` command can be used in a few different ways:\n\n* `open Some.Namespace.Path1 Some.Namespace.Path2` makes all non-protected names in\n  `Some.Namespace.Path1` and `Some.Namespace.Path2` available without the prefix, so that\n  `Some.Namespace.Path1.x` and `Some.Namespace.Path2.y` can be referred to by writing only `x` and\n  `y`.\n\n* `open Some.Namespace.Path hiding def1 def2` opens all non-protected names in `Some.Namespace.Path`\n  except `def1` and `def2`.\n\n* `open Some.Namespace.Path (def1 def2)` only makes `Some.Namespace.Path.def1` and\n  `Some.Namespace.Path.def2` available without the full prefix, so `Some.Namespace.Path.def3` would\n  be unaffected.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open Some.Namespace.Path renaming def1 → def1', def2 → def2'` same as `open Some.Namespace.Path\n  (def1 def2)` but `def1`/`def2`'s names are changed to `def1'`/`def2'`.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open scoped Some.Namespace.Path1 Some.Namespace.Path2` **only** opens [scoped instances],\n  notations, and attributes from `Namespace1` and `Namespace2`; it does **not** make any other name\n  available.\n\n* `open <any of the open shapes above> in` makes the names `open`-ed visible only in the next\n  command or expression.\n\n[scoped instance]: https://lean-lang.org/theorem_proving_in_lean4/type_classes.html#scoped-instances\n(Scoped instances in Theorem Proving in Lean)\n\n\n## Examples\n\n```lean\n/-- SKI combinators https://en.wikipedia.org/wiki/SKI_combinator_calculus -/\nnamespace Combinator.Calculus\n  def I (a : α) : α := a\n  def K (a : α) : β → α := fun _ => a\n  def S (x : α → β → γ) (y : α → β) (z : α) : γ := x z (y z)\nend Combinator.Calculus\n\nsection\n  -- open everything under `Combinator.Calculus`, *i.e.* `I`, `K` and `S`,\n  -- until the section ends\n  open Combinator.Calculus\n\n  theorem SKx_eq_K : S K x = I := rfl\nend\n\n-- open everything under `Combinator.Calculus` only for the next command (the next `theorem`, here)\nopen Combinator.Calculus in\ntheorem SKx_eq_K' : S K x = I := rfl\n\nsection\n  -- open only `S` and `K` under `Combinator.Calculus`\n  open Combinator.Calculus (S K)\n\n  theorem SKxy_eq_y : S K x y = y := rfl\n\n  -- `I` is not in scope, we have to use its full path\n  theorem SKxy_eq_Iy : S K x y = Combinator.Calculus.I y := rfl\nend\n\nsection\n  open Combinator.Calculus\n    renaming\n      I → identity,\n      K → konstant\n\n  #check identity\n  #check konstant\nend\n\nsection\n  open Combinator.Calculus\n    hiding S\n\n  #check I\n  #check K\nend\n\nsection\n  namespace Demo\n    inductive MyType\n    | val\n\n    namespace N1\n      scoped infix:68 \" ≋ \" => BEq.beq\n\n      scoped instance : BEq MyType where\n        beq _ _ := true\n\n      def Alias := MyType\n    end N1\n  end Demo\n\n  -- bring `≋` and the instance in scope, but not `Alias`\n  open scoped Demo.N1\n\n  #check Demo.MyType.val == Demo.MyType.val\n  #check Demo.MyType.val ≋ Demo.MyType.val\n  -- #check Alias -- unknown identifier 'Alias'\nend\n```\n", "kind": "markdown"}}
{"character": "S", "row": 1, "column": 5, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 13}}, "contents": {"value": "Makes names from other namespaces visible without writing the namespace prefix.\n\nNames that are made available with `open` are visible within the current `section` or `namespace`\nblock. This makes referring to (type) definitions and theorems easier, but note that it can also\nmake [scoped instances], notations, and attributes from a different namespace available.\n\nThe `open` command can be used in a few different ways:\n\n* `open Some.Namespace.Path1 Some.Namespace.Path2` makes all non-protected names in\n  `Some.Namespace.Path1` and `Some.Namespace.Path2` available without the prefix, so that\n  `Some.Namespace.Path1.x` and `Some.Namespace.Path2.y` can be referred to by writing only `x` and\n  `y`.\n\n* `open Some.Namespace.Path hiding def1 def2` opens all non-protected names in `Some.Namespace.Path`\n  except `def1` and `def2`.\n\n* `open Some.Namespace.Path (def1 def2)` only makes `Some.Namespace.Path.def1` and\n  `Some.Namespace.Path.def2` available without the full prefix, so `Some.Namespace.Path.def3` would\n  be unaffected.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open Some.Namespace.Path renaming def1 → def1', def2 → def2'` same as `open Some.Namespace.Path\n  (def1 def2)` but `def1`/`def2`'s names are changed to `def1'`/`def2'`.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open scoped Some.Namespace.Path1 Some.Namespace.Path2` **only** opens [scoped instances],\n  notations, and attributes from `Namespace1` and `Namespace2`; it does **not** make any other name\n  available.\n\n* `open <any of the open shapes above> in` makes the names `open`-ed visible only in the next\n  command or expression.\n\n[scoped instance]: https://lean-lang.org/theorem_proving_in_lean4/type_classes.html#scoped-instances\n(Scoped instances in Theorem Proving in Lean)\n\n\n## Examples\n\n```lean\n/-- SKI combinators https://en.wikipedia.org/wiki/SKI_combinator_calculus -/\nnamespace Combinator.Calculus\n  def I (a : α) : α := a\n  def K (a : α) : β → α := fun _ => a\n  def S (x : α → β → γ) (y : α → β) (z : α) : γ := x z (y z)\nend Combinator.Calculus\n\nsection\n  -- open everything under `Combinator.Calculus`, *i.e.* `I`, `K` and `S`,\n  -- until the section ends\n  open Combinator.Calculus\n\n  theorem SKx_eq_K : S K x = I := rfl\nend\n\n-- open everything under `Combinator.Calculus` only for the next command (the next `theorem`, here)\nopen Combinator.Calculus in\ntheorem SKx_eq_K' : S K x = I := rfl\n\nsection\n  -- open only `S` and `K` under `Combinator.Calculus`\n  open Combinator.Calculus (S K)\n\n  theorem SKxy_eq_y : S K x y = y := rfl\n\n  -- `I` is not in scope, we have to use its full path\n  theorem SKxy_eq_Iy : S K x y = Combinator.Calculus.I y := rfl\nend\n\nsection\n  open Combinator.Calculus\n    renaming\n      I → identity,\n      K → konstant\n\n  #check identity\n  #check konstant\nend\n\nsection\n  open Combinator.Calculus\n    hiding S\n\n  #check I\n  #check K\nend\n\nsection\n  namespace Demo\n    inductive MyType\n    | val\n\n    namespace N1\n      scoped infix:68 \" ≋ \" => BEq.beq\n\n      scoped instance : BEq MyType where\n        beq _ _ := true\n\n      def Alias := MyType\n    end N1\n  end Demo\n\n  -- bring `≋` and the instance in scope, but not `Alias`\n  open scoped Demo.N1\n\n  #check Demo.MyType.val == Demo.MyType.val\n  #check Demo.MyType.val ≋ Demo.MyType.val\n  -- #check Alias -- unknown identifier 'Alias'\nend\n```\n", "kind": "markdown"}}
{"character": "u", "row": 1, "column": 6, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 13}}, "contents": {"value": "Makes names from other namespaces visible without writing the namespace prefix.\n\nNames that are made available with `open` are visible within the current `section` or `namespace`\nblock. This makes referring to (type) definitions and theorems easier, but note that it can also\nmake [scoped instances], notations, and attributes from a different namespace available.\n\nThe `open` command can be used in a few different ways:\n\n* `open Some.Namespace.Path1 Some.Namespace.Path2` makes all non-protected names in\n  `Some.Namespace.Path1` and `Some.Namespace.Path2` available without the prefix, so that\n  `Some.Namespace.Path1.x` and `Some.Namespace.Path2.y` can be referred to by writing only `x` and\n  `y`.\n\n* `open Some.Namespace.Path hiding def1 def2` opens all non-protected names in `Some.Namespace.Path`\n  except `def1` and `def2`.\n\n* `open Some.Namespace.Path (def1 def2)` only makes `Some.Namespace.Path.def1` and\n  `Some.Namespace.Path.def2` available without the full prefix, so `Some.Namespace.Path.def3` would\n  be unaffected.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open Some.Namespace.Path renaming def1 → def1', def2 → def2'` same as `open Some.Namespace.Path\n  (def1 def2)` but `def1`/`def2`'s names are changed to `def1'`/`def2'`.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open scoped Some.Namespace.Path1 Some.Namespace.Path2` **only** opens [scoped instances],\n  notations, and attributes from `Namespace1` and `Namespace2`; it does **not** make any other name\n  available.\n\n* `open <any of the open shapes above> in` makes the names `open`-ed visible only in the next\n  command or expression.\n\n[scoped instance]: https://lean-lang.org/theorem_proving_in_lean4/type_classes.html#scoped-instances\n(Scoped instances in Theorem Proving in Lean)\n\n\n## Examples\n\n```lean\n/-- SKI combinators https://en.wikipedia.org/wiki/SKI_combinator_calculus -/\nnamespace Combinator.Calculus\n  def I (a : α) : α := a\n  def K (a : α) : β → α := fun _ => a\n  def S (x : α → β → γ) (y : α → β) (z : α) : γ := x z (y z)\nend Combinator.Calculus\n\nsection\n  -- open everything under `Combinator.Calculus`, *i.e.* `I`, `K` and `S`,\n  -- until the section ends\n  open Combinator.Calculus\n\n  theorem SKx_eq_K : S K x = I := rfl\nend\n\n-- open everything under `Combinator.Calculus` only for the next command (the next `theorem`, here)\nopen Combinator.Calculus in\ntheorem SKx_eq_K' : S K x = I := rfl\n\nsection\n  -- open only `S` and `K` under `Combinator.Calculus`\n  open Combinator.Calculus (S K)\n\n  theorem SKxy_eq_y : S K x y = y := rfl\n\n  -- `I` is not in scope, we have to use its full path\n  theorem SKxy_eq_Iy : S K x y = Combinator.Calculus.I y := rfl\nend\n\nsection\n  open Combinator.Calculus\n    renaming\n      I → identity,\n      K → konstant\n\n  #check identity\n  #check konstant\nend\n\nsection\n  open Combinator.Calculus\n    hiding S\n\n  #check I\n  #check K\nend\n\nsection\n  namespace Demo\n    inductive MyType\n    | val\n\n    namespace N1\n      scoped infix:68 \" ≋ \" => BEq.beq\n\n      scoped instance : BEq MyType where\n        beq _ _ := true\n\n      def Alias := MyType\n    end N1\n  end Demo\n\n  -- bring `≋` and the instance in scope, but not `Alias`\n  open scoped Demo.N1\n\n  #check Demo.MyType.val == Demo.MyType.val\n  #check Demo.MyType.val ≋ Demo.MyType.val\n  -- #check Alias -- unknown identifier 'Alias'\nend\n```\n", "kind": "markdown"}}
{"character": "b", "row": 1, "column": 7, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 13}}, "contents": {"value": "Makes names from other namespaces visible without writing the namespace prefix.\n\nNames that are made available with `open` are visible within the current `section` or `namespace`\nblock. This makes referring to (type) definitions and theorems easier, but note that it can also\nmake [scoped instances], notations, and attributes from a different namespace available.\n\nThe `open` command can be used in a few different ways:\n\n* `open Some.Namespace.Path1 Some.Namespace.Path2` makes all non-protected names in\n  `Some.Namespace.Path1` and `Some.Namespace.Path2` available without the prefix, so that\n  `Some.Namespace.Path1.x` and `Some.Namespace.Path2.y` can be referred to by writing only `x` and\n  `y`.\n\n* `open Some.Namespace.Path hiding def1 def2` opens all non-protected names in `Some.Namespace.Path`\n  except `def1` and `def2`.\n\n* `open Some.Namespace.Path (def1 def2)` only makes `Some.Namespace.Path.def1` and\n  `Some.Namespace.Path.def2` available without the full prefix, so `Some.Namespace.Path.def3` would\n  be unaffected.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open Some.Namespace.Path renaming def1 → def1', def2 → def2'` same as `open Some.Namespace.Path\n  (def1 def2)` but `def1`/`def2`'s names are changed to `def1'`/`def2'`.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open scoped Some.Namespace.Path1 Some.Namespace.Path2` **only** opens [scoped instances],\n  notations, and attributes from `Namespace1` and `Namespace2`; it does **not** make any other name\n  available.\n\n* `open <any of the open shapes above> in` makes the names `open`-ed visible only in the next\n  command or expression.\n\n[scoped instance]: https://lean-lang.org/theorem_proving_in_lean4/type_classes.html#scoped-instances\n(Scoped instances in Theorem Proving in Lean)\n\n\n## Examples\n\n```lean\n/-- SKI combinators https://en.wikipedia.org/wiki/SKI_combinator_calculus -/\nnamespace Combinator.Calculus\n  def I (a : α) : α := a\n  def K (a : α) : β → α := fun _ => a\n  def S (x : α → β → γ) (y : α → β) (z : α) : γ := x z (y z)\nend Combinator.Calculus\n\nsection\n  -- open everything under `Combinator.Calculus`, *i.e.* `I`, `K` and `S`,\n  -- until the section ends\n  open Combinator.Calculus\n\n  theorem SKx_eq_K : S K x = I := rfl\nend\n\n-- open everything under `Combinator.Calculus` only for the next command (the next `theorem`, here)\nopen Combinator.Calculus in\ntheorem SKx_eq_K' : S K x = I := rfl\n\nsection\n  -- open only `S` and `K` under `Combinator.Calculus`\n  open Combinator.Calculus (S K)\n\n  theorem SKxy_eq_y : S K x y = y := rfl\n\n  -- `I` is not in scope, we have to use its full path\n  theorem SKxy_eq_Iy : S K x y = Combinator.Calculus.I y := rfl\nend\n\nsection\n  open Combinator.Calculus\n    renaming\n      I → identity,\n      K → konstant\n\n  #check identity\n  #check konstant\nend\n\nsection\n  open Combinator.Calculus\n    hiding S\n\n  #check I\n  #check K\nend\n\nsection\n  namespace Demo\n    inductive MyType\n    | val\n\n    namespace N1\n      scoped infix:68 \" ≋ \" => BEq.beq\n\n      scoped instance : BEq MyType where\n        beq _ _ := true\n\n      def Alias := MyType\n    end N1\n  end Demo\n\n  -- bring `≋` and the instance in scope, but not `Alias`\n  open scoped Demo.N1\n\n  #check Demo.MyType.val == Demo.MyType.val\n  #check Demo.MyType.val ≋ Demo.MyType.val\n  -- #check Alias -- unknown identifier 'Alias'\nend\n```\n", "kind": "markdown"}}
{"character": "g", "row": 1, "column": 8, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 13}}, "contents": {"value": "Makes names from other namespaces visible without writing the namespace prefix.\n\nNames that are made available with `open` are visible within the current `section` or `namespace`\nblock. This makes referring to (type) definitions and theorems easier, but note that it can also\nmake [scoped instances], notations, and attributes from a different namespace available.\n\nThe `open` command can be used in a few different ways:\n\n* `open Some.Namespace.Path1 Some.Namespace.Path2` makes all non-protected names in\n  `Some.Namespace.Path1` and `Some.Namespace.Path2` available without the prefix, so that\n  `Some.Namespace.Path1.x` and `Some.Namespace.Path2.y` can be referred to by writing only `x` and\n  `y`.\n\n* `open Some.Namespace.Path hiding def1 def2` opens all non-protected names in `Some.Namespace.Path`\n  except `def1` and `def2`.\n\n* `open Some.Namespace.Path (def1 def2)` only makes `Some.Namespace.Path.def1` and\n  `Some.Namespace.Path.def2` available without the full prefix, so `Some.Namespace.Path.def3` would\n  be unaffected.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open Some.Namespace.Path renaming def1 → def1', def2 → def2'` same as `open Some.Namespace.Path\n  (def1 def2)` but `def1`/`def2`'s names are changed to `def1'`/`def2'`.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open scoped Some.Namespace.Path1 Some.Namespace.Path2` **only** opens [scoped instances],\n  notations, and attributes from `Namespace1` and `Namespace2`; it does **not** make any other name\n  available.\n\n* `open <any of the open shapes above> in` makes the names `open`-ed visible only in the next\n  command or expression.\n\n[scoped instance]: https://lean-lang.org/theorem_proving_in_lean4/type_classes.html#scoped-instances\n(Scoped instances in Theorem Proving in Lean)\n\n\n## Examples\n\n```lean\n/-- SKI combinators https://en.wikipedia.org/wiki/SKI_combinator_calculus -/\nnamespace Combinator.Calculus\n  def I (a : α) : α := a\n  def K (a : α) : β → α := fun _ => a\n  def S (x : α → β → γ) (y : α → β) (z : α) : γ := x z (y z)\nend Combinator.Calculus\n\nsection\n  -- open everything under `Combinator.Calculus`, *i.e.* `I`, `K` and `S`,\n  -- until the section ends\n  open Combinator.Calculus\n\n  theorem SKx_eq_K : S K x = I := rfl\nend\n\n-- open everything under `Combinator.Calculus` only for the next command (the next `theorem`, here)\nopen Combinator.Calculus in\ntheorem SKx_eq_K' : S K x = I := rfl\n\nsection\n  -- open only `S` and `K` under `Combinator.Calculus`\n  open Combinator.Calculus (S K)\n\n  theorem SKxy_eq_y : S K x y = y := rfl\n\n  -- `I` is not in scope, we have to use its full path\n  theorem SKxy_eq_Iy : S K x y = Combinator.Calculus.I y := rfl\nend\n\nsection\n  open Combinator.Calculus\n    renaming\n      I → identity,\n      K → konstant\n\n  #check identity\n  #check konstant\nend\n\nsection\n  open Combinator.Calculus\n    hiding S\n\n  #check I\n  #check K\nend\n\nsection\n  namespace Demo\n    inductive MyType\n    | val\n\n    namespace N1\n      scoped infix:68 \" ≋ \" => BEq.beq\n\n      scoped instance : BEq MyType where\n        beq _ _ := true\n\n      def Alias := MyType\n    end N1\n  end Demo\n\n  -- bring `≋` and the instance in scope, but not `Alias`\n  open scoped Demo.N1\n\n  #check Demo.MyType.val == Demo.MyType.val\n  #check Demo.MyType.val ≋ Demo.MyType.val\n  -- #check Alias -- unknown identifier 'Alias'\nend\n```\n", "kind": "markdown"}}
{"character": "r", "row": 1, "column": 9, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 13}}, "contents": {"value": "Makes names from other namespaces visible without writing the namespace prefix.\n\nNames that are made available with `open` are visible within the current `section` or `namespace`\nblock. This makes referring to (type) definitions and theorems easier, but note that it can also\nmake [scoped instances], notations, and attributes from a different namespace available.\n\nThe `open` command can be used in a few different ways:\n\n* `open Some.Namespace.Path1 Some.Namespace.Path2` makes all non-protected names in\n  `Some.Namespace.Path1` and `Some.Namespace.Path2` available without the prefix, so that\n  `Some.Namespace.Path1.x` and `Some.Namespace.Path2.y` can be referred to by writing only `x` and\n  `y`.\n\n* `open Some.Namespace.Path hiding def1 def2` opens all non-protected names in `Some.Namespace.Path`\n  except `def1` and `def2`.\n\n* `open Some.Namespace.Path (def1 def2)` only makes `Some.Namespace.Path.def1` and\n  `Some.Namespace.Path.def2` available without the full prefix, so `Some.Namespace.Path.def3` would\n  be unaffected.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open Some.Namespace.Path renaming def1 → def1', def2 → def2'` same as `open Some.Namespace.Path\n  (def1 def2)` but `def1`/`def2`'s names are changed to `def1'`/`def2'`.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open scoped Some.Namespace.Path1 Some.Namespace.Path2` **only** opens [scoped instances],\n  notations, and attributes from `Namespace1` and `Namespace2`; it does **not** make any other name\n  available.\n\n* `open <any of the open shapes above> in` makes the names `open`-ed visible only in the next\n  command or expression.\n\n[scoped instance]: https://lean-lang.org/theorem_proving_in_lean4/type_classes.html#scoped-instances\n(Scoped instances in Theorem Proving in Lean)\n\n\n## Examples\n\n```lean\n/-- SKI combinators https://en.wikipedia.org/wiki/SKI_combinator_calculus -/\nnamespace Combinator.Calculus\n  def I (a : α) : α := a\n  def K (a : α) : β → α := fun _ => a\n  def S (x : α → β → γ) (y : α → β) (z : α) : γ := x z (y z)\nend Combinator.Calculus\n\nsection\n  -- open everything under `Combinator.Calculus`, *i.e.* `I`, `K` and `S`,\n  -- until the section ends\n  open Combinator.Calculus\n\n  theorem SKx_eq_K : S K x = I := rfl\nend\n\n-- open everything under `Combinator.Calculus` only for the next command (the next `theorem`, here)\nopen Combinator.Calculus in\ntheorem SKx_eq_K' : S K x = I := rfl\n\nsection\n  -- open only `S` and `K` under `Combinator.Calculus`\n  open Combinator.Calculus (S K)\n\n  theorem SKxy_eq_y : S K x y = y := rfl\n\n  -- `I` is not in scope, we have to use its full path\n  theorem SKxy_eq_Iy : S K x y = Combinator.Calculus.I y := rfl\nend\n\nsection\n  open Combinator.Calculus\n    renaming\n      I → identity,\n      K → konstant\n\n  #check identity\n  #check konstant\nend\n\nsection\n  open Combinator.Calculus\n    hiding S\n\n  #check I\n  #check K\nend\n\nsection\n  namespace Demo\n    inductive MyType\n    | val\n\n    namespace N1\n      scoped infix:68 \" ≋ \" => BEq.beq\n\n      scoped instance : BEq MyType where\n        beq _ _ := true\n\n      def Alias := MyType\n    end N1\n  end Demo\n\n  -- bring `≋` and the instance in scope, but not `Alias`\n  open scoped Demo.N1\n\n  #check Demo.MyType.val == Demo.MyType.val\n  #check Demo.MyType.val ≋ Demo.MyType.val\n  -- #check Alias -- unknown identifier 'Alias'\nend\n```\n", "kind": "markdown"}}
{"character": "o", "row": 1, "column": 10, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 13}}, "contents": {"value": "Makes names from other namespaces visible without writing the namespace prefix.\n\nNames that are made available with `open` are visible within the current `section` or `namespace`\nblock. This makes referring to (type) definitions and theorems easier, but note that it can also\nmake [scoped instances], notations, and attributes from a different namespace available.\n\nThe `open` command can be used in a few different ways:\n\n* `open Some.Namespace.Path1 Some.Namespace.Path2` makes all non-protected names in\n  `Some.Namespace.Path1` and `Some.Namespace.Path2` available without the prefix, so that\n  `Some.Namespace.Path1.x` and `Some.Namespace.Path2.y` can be referred to by writing only `x` and\n  `y`.\n\n* `open Some.Namespace.Path hiding def1 def2` opens all non-protected names in `Some.Namespace.Path`\n  except `def1` and `def2`.\n\n* `open Some.Namespace.Path (def1 def2)` only makes `Some.Namespace.Path.def1` and\n  `Some.Namespace.Path.def2` available without the full prefix, so `Some.Namespace.Path.def3` would\n  be unaffected.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open Some.Namespace.Path renaming def1 → def1', def2 → def2'` same as `open Some.Namespace.Path\n  (def1 def2)` but `def1`/`def2`'s names are changed to `def1'`/`def2'`.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open scoped Some.Namespace.Path1 Some.Namespace.Path2` **only** opens [scoped instances],\n  notations, and attributes from `Namespace1` and `Namespace2`; it does **not** make any other name\n  available.\n\n* `open <any of the open shapes above> in` makes the names `open`-ed visible only in the next\n  command or expression.\n\n[scoped instance]: https://lean-lang.org/theorem_proving_in_lean4/type_classes.html#scoped-instances\n(Scoped instances in Theorem Proving in Lean)\n\n\n## Examples\n\n```lean\n/-- SKI combinators https://en.wikipedia.org/wiki/SKI_combinator_calculus -/\nnamespace Combinator.Calculus\n  def I (a : α) : α := a\n  def K (a : α) : β → α := fun _ => a\n  def S (x : α → β → γ) (y : α → β) (z : α) : γ := x z (y z)\nend Combinator.Calculus\n\nsection\n  -- open everything under `Combinator.Calculus`, *i.e.* `I`, `K` and `S`,\n  -- until the section ends\n  open Combinator.Calculus\n\n  theorem SKx_eq_K : S K x = I := rfl\nend\n\n-- open everything under `Combinator.Calculus` only for the next command (the next `theorem`, here)\nopen Combinator.Calculus in\ntheorem SKx_eq_K' : S K x = I := rfl\n\nsection\n  -- open only `S` and `K` under `Combinator.Calculus`\n  open Combinator.Calculus (S K)\n\n  theorem SKxy_eq_y : S K x y = y := rfl\n\n  -- `I` is not in scope, we have to use its full path\n  theorem SKxy_eq_Iy : S K x y = Combinator.Calculus.I y := rfl\nend\n\nsection\n  open Combinator.Calculus\n    renaming\n      I → identity,\n      K → konstant\n\n  #check identity\n  #check konstant\nend\n\nsection\n  open Combinator.Calculus\n    hiding S\n\n  #check I\n  #check K\nend\n\nsection\n  namespace Demo\n    inductive MyType\n    | val\n\n    namespace N1\n      scoped infix:68 \" ≋ \" => BEq.beq\n\n      scoped instance : BEq MyType where\n        beq _ _ := true\n\n      def Alias := MyType\n    end N1\n  end Demo\n\n  -- bring `≋` and the instance in scope, but not `Alias`\n  open scoped Demo.N1\n\n  #check Demo.MyType.val == Demo.MyType.val\n  #check Demo.MyType.val ≋ Demo.MyType.val\n  -- #check Alias -- unknown identifier 'Alias'\nend\n```\n", "kind": "markdown"}}
{"character": "u", "row": 1, "column": 11, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 13}}, "contents": {"value": "Makes names from other namespaces visible without writing the namespace prefix.\n\nNames that are made available with `open` are visible within the current `section` or `namespace`\nblock. This makes referring to (type) definitions and theorems easier, but note that it can also\nmake [scoped instances], notations, and attributes from a different namespace available.\n\nThe `open` command can be used in a few different ways:\n\n* `open Some.Namespace.Path1 Some.Namespace.Path2` makes all non-protected names in\n  `Some.Namespace.Path1` and `Some.Namespace.Path2` available without the prefix, so that\n  `Some.Namespace.Path1.x` and `Some.Namespace.Path2.y` can be referred to by writing only `x` and\n  `y`.\n\n* `open Some.Namespace.Path hiding def1 def2` opens all non-protected names in `Some.Namespace.Path`\n  except `def1` and `def2`.\n\n* `open Some.Namespace.Path (def1 def2)` only makes `Some.Namespace.Path.def1` and\n  `Some.Namespace.Path.def2` available without the full prefix, so `Some.Namespace.Path.def3` would\n  be unaffected.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open Some.Namespace.Path renaming def1 → def1', def2 → def2'` same as `open Some.Namespace.Path\n  (def1 def2)` but `def1`/`def2`'s names are changed to `def1'`/`def2'`.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open scoped Some.Namespace.Path1 Some.Namespace.Path2` **only** opens [scoped instances],\n  notations, and attributes from `Namespace1` and `Namespace2`; it does **not** make any other name\n  available.\n\n* `open <any of the open shapes above> in` makes the names `open`-ed visible only in the next\n  command or expression.\n\n[scoped instance]: https://lean-lang.org/theorem_proving_in_lean4/type_classes.html#scoped-instances\n(Scoped instances in Theorem Proving in Lean)\n\n\n## Examples\n\n```lean\n/-- SKI combinators https://en.wikipedia.org/wiki/SKI_combinator_calculus -/\nnamespace Combinator.Calculus\n  def I (a : α) : α := a\n  def K (a : α) : β → α := fun _ => a\n  def S (x : α → β → γ) (y : α → β) (z : α) : γ := x z (y z)\nend Combinator.Calculus\n\nsection\n  -- open everything under `Combinator.Calculus`, *i.e.* `I`, `K` and `S`,\n  -- until the section ends\n  open Combinator.Calculus\n\n  theorem SKx_eq_K : S K x = I := rfl\nend\n\n-- open everything under `Combinator.Calculus` only for the next command (the next `theorem`, here)\nopen Combinator.Calculus in\ntheorem SKx_eq_K' : S K x = I := rfl\n\nsection\n  -- open only `S` and `K` under `Combinator.Calculus`\n  open Combinator.Calculus (S K)\n\n  theorem SKxy_eq_y : S K x y = y := rfl\n\n  -- `I` is not in scope, we have to use its full path\n  theorem SKxy_eq_Iy : S K x y = Combinator.Calculus.I y := rfl\nend\n\nsection\n  open Combinator.Calculus\n    renaming\n      I → identity,\n      K → konstant\n\n  #check identity\n  #check konstant\nend\n\nsection\n  open Combinator.Calculus\n    hiding S\n\n  #check I\n  #check K\nend\n\nsection\n  namespace Demo\n    inductive MyType\n    | val\n\n    namespace N1\n      scoped infix:68 \" ≋ \" => BEq.beq\n\n      scoped instance : BEq MyType where\n        beq _ _ := true\n\n      def Alias := MyType\n    end N1\n  end Demo\n\n  -- bring `≋` and the instance in scope, but not `Alias`\n  open scoped Demo.N1\n\n  #check Demo.MyType.val == Demo.MyType.val\n  #check Demo.MyType.val ≋ Demo.MyType.val\n  -- #check Alias -- unknown identifier 'Alias'\nend\n```\n", "kind": "markdown"}}
{"character": "p", "row": 1, "column": 12, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 13}}, "contents": {"value": "Makes names from other namespaces visible without writing the namespace prefix.\n\nNames that are made available with `open` are visible within the current `section` or `namespace`\nblock. This makes referring to (type) definitions and theorems easier, but note that it can also\nmake [scoped instances], notations, and attributes from a different namespace available.\n\nThe `open` command can be used in a few different ways:\n\n* `open Some.Namespace.Path1 Some.Namespace.Path2` makes all non-protected names in\n  `Some.Namespace.Path1` and `Some.Namespace.Path2` available without the prefix, so that\n  `Some.Namespace.Path1.x` and `Some.Namespace.Path2.y` can be referred to by writing only `x` and\n  `y`.\n\n* `open Some.Namespace.Path hiding def1 def2` opens all non-protected names in `Some.Namespace.Path`\n  except `def1` and `def2`.\n\n* `open Some.Namespace.Path (def1 def2)` only makes `Some.Namespace.Path.def1` and\n  `Some.Namespace.Path.def2` available without the full prefix, so `Some.Namespace.Path.def3` would\n  be unaffected.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open Some.Namespace.Path renaming def1 → def1', def2 → def2'` same as `open Some.Namespace.Path\n  (def1 def2)` but `def1`/`def2`'s names are changed to `def1'`/`def2'`.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open scoped Some.Namespace.Path1 Some.Namespace.Path2` **only** opens [scoped instances],\n  notations, and attributes from `Namespace1` and `Namespace2`; it does **not** make any other name\n  available.\n\n* `open <any of the open shapes above> in` makes the names `open`-ed visible only in the next\n  command or expression.\n\n[scoped instance]: https://lean-lang.org/theorem_proving_in_lean4/type_classes.html#scoped-instances\n(Scoped instances in Theorem Proving in Lean)\n\n\n## Examples\n\n```lean\n/-- SKI combinators https://en.wikipedia.org/wiki/SKI_combinator_calculus -/\nnamespace Combinator.Calculus\n  def I (a : α) : α := a\n  def K (a : α) : β → α := fun _ => a\n  def S (x : α → β → γ) (y : α → β) (z : α) : γ := x z (y z)\nend Combinator.Calculus\n\nsection\n  -- open everything under `Combinator.Calculus`, *i.e.* `I`, `K` and `S`,\n  -- until the section ends\n  open Combinator.Calculus\n\n  theorem SKx_eq_K : S K x = I := rfl\nend\n\n-- open everything under `Combinator.Calculus` only for the next command (the next `theorem`, here)\nopen Combinator.Calculus in\ntheorem SKx_eq_K' : S K x = I := rfl\n\nsection\n  -- open only `S` and `K` under `Combinator.Calculus`\n  open Combinator.Calculus (S K)\n\n  theorem SKxy_eq_y : S K x y = y := rfl\n\n  -- `I` is not in scope, we have to use its full path\n  theorem SKxy_eq_Iy : S K x y = Combinator.Calculus.I y := rfl\nend\n\nsection\n  open Combinator.Calculus\n    renaming\n      I → identity,\n      K → konstant\n\n  #check identity\n  #check konstant\nend\n\nsection\n  open Combinator.Calculus\n    hiding S\n\n  #check I\n  #check K\nend\n\nsection\n  namespace Demo\n    inductive MyType\n    | val\n\n    namespace N1\n      scoped infix:68 \" ≋ \" => BEq.beq\n\n      scoped instance : BEq MyType where\n        beq _ _ := true\n\n      def Alias := MyType\n    end N1\n  end Demo\n\n  -- bring `≋` and the instance in scope, but not `Alias`\n  open scoped Demo.N1\n\n  #check Demo.MyType.val == Demo.MyType.val\n  #check Demo.MyType.val ≋ Demo.MyType.val\n  -- #check Alias -- unknown identifier 'Alias'\nend\n```\n", "kind": "markdown"}}
{"character": "t", "row": 2, "column": 0}
{"character": "h", "row": 2, "column": 1}
{"character": "e", "row": 2, "column": 2}
{"character": "o", "row": 2, "column": 3}
{"character": "r", "row": 2, "column": 4}
{"character": "e", "row": 2, "column": 5}
{"character": "m", "row": 2, "column": 6}
{"character": " ", "row": 2, "column": 7}
{"character": "q", "row": 2, "column": 8, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 27}}, "contents": {"value": "```lean\nquotient_isSolvable.{u} (G : Type u) [Group G] [IsSolvable G] (N : Subgroup G) [h : N.Normal] : IsSolvable (G ⧸ N)\n```", "kind": "markdown"}}
{"character": "u", "row": 2, "column": 9, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 27}}, "contents": {"value": "```lean\nquotient_isSolvable.{u} (G : Type u) [Group G] [IsSolvable G] (N : Subgroup G) [h : N.Normal] : IsSolvable (G ⧸ N)\n```", "kind": "markdown"}}
{"character": "o", "row": 2, "column": 10, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 27}}, "contents": {"value": "```lean\nquotient_isSolvable.{u} (G : Type u) [Group G] [IsSolvable G] (N : Subgroup G) [h : N.Normal] : IsSolvable (G ⧸ N)\n```", "kind": "markdown"}}
{"character": "t", "row": 2, "column": 11, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 27}}, "contents": {"value": "```lean\nquotient_isSolvable.{u} (G : Type u) [Group G] [IsSolvable G] (N : Subgroup G) [h : N.Normal] : IsSolvable (G ⧸ N)\n```", "kind": "markdown"}}
{"character": "i", "row": 2, "column": 12, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 27}}, "contents": {"value": "```lean\nquotient_isSolvable.{u} (G : Type u) [Group G] [IsSolvable G] (N : Subgroup G) [h : N.Normal] : IsSolvable (G ⧸ N)\n```", "kind": "markdown"}}
{"character": "e", "row": 2, "column": 13, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 27}}, "contents": {"value": "```lean\nquotient_isSolvable.{u} (G : Type u) [Group G] [IsSolvable G] (N : Subgroup G) [h : N.Normal] : IsSolvable (G ⧸ N)\n```", "kind": "markdown"}}
{"character": "n", "row": 2, "column": 14, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 27}}, "contents": {"value": "```lean\nquotient_isSolvable.{u} (G : Type u) [Group G] [IsSolvable G] (N : Subgroup G) [h : N.Normal] : IsSolvable (G ⧸ N)\n```", "kind": "markdown"}}
{"character": "t", "row": 2, "column": 15, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 27}}, "contents": {"value": "```lean\nquotient_isSolvable.{u} (G : Type u) [Group G] [IsSolvable G] (N : Subgroup G) [h : N.Normal] : IsSolvable (G ⧸ N)\n```", "kind": "markdown"}}
{"character": "_", "row": 2, "column": 16, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 27}}, "contents": {"value": "```lean\nquotient_isSolvable.{u} (G : Type u) [Group G] [IsSolvable G] (N : Subgroup G) [h : N.Normal] : IsSolvable (G ⧸ N)\n```", "kind": "markdown"}}
{"character": "i", "row": 2, "column": 17, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 27}}, "contents": {"value": "```lean\nquotient_isSolvable.{u} (G : Type u) [Group G] [IsSolvable G] (N : Subgroup G) [h : N.Normal] : IsSolvable (G ⧸ N)\n```", "kind": "markdown"}}
{"character": "s", "row": 2, "column": 18, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 27}}, "contents": {"value": "```lean\nquotient_isSolvable.{u} (G : Type u) [Group G] [IsSolvable G] (N : Subgroup G) [h : N.Normal] : IsSolvable (G ⧸ N)\n```", "kind": "markdown"}}
{"character": "S", "row": 2, "column": 19, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 27}}, "contents": {"value": "```lean\nquotient_isSolvable.{u} (G : Type u) [Group G] [IsSolvable G] (N : Subgroup G) [h : N.Normal] : IsSolvable (G ⧸ N)\n```", "kind": "markdown"}}
{"character": "o", "row": 2, "column": 20, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 27}}, "contents": {"value": "```lean\nquotient_isSolvable.{u} (G : Type u) [Group G] [IsSolvable G] (N : Subgroup G) [h : N.Normal] : IsSolvable (G ⧸ N)\n```", "kind": "markdown"}}
{"character": "l", "row": 2, "column": 21, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 27}}, "contents": {"value": "```lean\nquotient_isSolvable.{u} (G : Type u) [Group G] [IsSolvable G] (N : Subgroup G) [h : N.Normal] : IsSolvable (G ⧸ N)\n```", "kind": "markdown"}}
{"character": "v", "row": 2, "column": 22, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 27}}, "contents": {"value": "```lean\nquotient_isSolvable.{u} (G : Type u) [Group G] [IsSolvable G] (N : Subgroup G) [h : N.Normal] : IsSolvable (G ⧸ N)\n```", "kind": "markdown"}}
{"character": "a", "row": 2, "column": 23, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 27}}, "contents": {"value": "```lean\nquotient_isSolvable.{u} (G : Type u) [Group G] [IsSolvable G] (N : Subgroup G) [h : N.Normal] : IsSolvable (G ⧸ N)\n```", "kind": "markdown"}}
{"character": "b", "row": 2, "column": 24, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 27}}, "contents": {"value": "```lean\nquotient_isSolvable.{u} (G : Type u) [Group G] [IsSolvable G] (N : Subgroup G) [h : N.Normal] : IsSolvable (G ⧸ N)\n```", "kind": "markdown"}}
{"character": "l", "row": 2, "column": 25, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 27}}, "contents": {"value": "```lean\nquotient_isSolvable.{u} (G : Type u) [Group G] [IsSolvable G] (N : Subgroup G) [h : N.Normal] : IsSolvable (G ⧸ N)\n```", "kind": "markdown"}}
{"character": "e", "row": 2, "column": 26, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 27}}, "contents": {"value": "```lean\nquotient_isSolvable.{u} (G : Type u) [Group G] [IsSolvable G] (N : Subgroup G) [h : N.Normal] : IsSolvable (G ⧸ N)\n```", "kind": "markdown"}}
{"character": ".", "row": 2, "column": 27, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 31}}, "contents": {"value": "```lean\nquotient_isSolvable : ∀ (G : Type u) [inst : Group G] [inst_1 : IsSolvable G] (N : Subgroup G) [h : N.Normal],\n  IsSolvable (G ⧸ N)\n```\n***\n`declId` matches `foo` or `foo.{u,v}`: an identifier possibly followed by a list of universe names ", "kind": "markdown"}}
{"character": "{", "row": 2, "column": 28, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 31}}, "contents": {"value": "```lean\nquotient_isSolvable : ∀ (G : Type u) [inst : Group G] [inst_1 : IsSolvable G] (N : Subgroup G) [h : N.Normal],\n  IsSolvable (G ⧸ N)\n```\n***\n`declId` matches `foo` or `foo.{u,v}`: an identifier possibly followed by a list of universe names ", "kind": "markdown"}}
{"character": "u", "row": 2, "column": 29, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 31}}, "contents": {"value": "```lean\nquotient_isSolvable : ∀ (G : Type u) [inst : Group G] [inst_1 : IsSolvable G] (N : Subgroup G) [h : N.Normal],\n  IsSolvable (G ⧸ N)\n```\n***\n`declId` matches `foo` or `foo.{u,v}`: an identifier possibly followed by a list of universe names ", "kind": "markdown"}}
{"character": "}", "row": 2, "column": 30, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 31}}, "contents": {"value": "```lean\nquotient_isSolvable : ∀ (G : Type u) [inst : Group G] [inst_1 : IsSolvable G] (N : Subgroup G) [h : N.Normal],\n  IsSolvable (G ⧸ N)\n```\n***\n`declId` matches `foo` or `foo.{u,v}`: an identifier possibly followed by a list of universe names ", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 31}
{"character": "(", "row": 2, "column": 32, "range": {"start": {"line": 2, "character": 32}, "end": {"line": 2, "character": 44}}, "contents": {"value": "Explicit binder, like `(x y : A)` or `(x y)`.\nDefault values can be specified using `(x : A := v)` syntax, and tactics using `(x : A := by tac)`.\n", "kind": "markdown"}}
{"character": "G", "row": 2, "column": 33, "range": {"start": {"line": 2, "character": 33}, "end": {"line": 2, "character": 34}}, "contents": {"value": "```lean\nG : Type u\n```", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 34}
{"character": ":", "row": 2, "column": 35, "range": {"start": {"line": 2, "character": 32}, "end": {"line": 2, "character": 44}}, "contents": {"value": "Explicit binder, like `(x y : A)` or `(x y)`.\nDefault values can be specified using `(x : A := v)` syntax, and tactics using `(x : A := by tac)`.\n", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 36}
{"character": "T", "row": 2, "column": 37, "range": {"start": {"line": 2, "character": 37}, "end": {"line": 2, "character": 43}}, "contents": {"value": "A type universe. `Type ≡ Type 0`, `Type u ≡ Sort (u + 1)`. ", "kind": "markdown"}}
{"character": "y", "row": 2, "column": 38, "range": {"start": {"line": 2, "character": 37}, "end": {"line": 2, "character": 43}}, "contents": {"value": "A type universe. `Type ≡ Type 0`, `Type u ≡ Sort (u + 1)`. ", "kind": "markdown"}}
{"character": "p", "row": 2, "column": 39, "range": {"start": {"line": 2, "character": 37}, "end": {"line": 2, "character": 43}}, "contents": {"value": "A type universe. `Type ≡ Type 0`, `Type u ≡ Sort (u + 1)`. ", "kind": "markdown"}}
{"character": "e", "row": 2, "column": 40, "range": {"start": {"line": 2, "character": 37}, "end": {"line": 2, "character": 43}}, "contents": {"value": "A type universe. `Type ≡ Type 0`, `Type u ≡ Sort (u + 1)`. ", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 41, "range": {"start": {"line": 2, "character": 37}, "end": {"line": 2, "character": 43}}, "contents": {"value": "A type universe. `Type ≡ Type 0`, `Type u ≡ Sort (u + 1)`. ", "kind": "markdown"}}
{"character": "u", "row": 2, "column": 42, "range": {"start": {"line": 2, "character": 37}, "end": {"line": 2, "character": 43}}, "contents": {"value": "A type universe. `Type ≡ Type 0`, `Type u ≡ Sort (u + 1)`. ", "kind": "markdown"}}
{"character": ")", "row": 2, "column": 43, "range": {"start": {"line": 2, "character": 32}, "end": {"line": 2, "character": 44}}, "contents": {"value": "Explicit binder, like `(x y : A)` or `(x y)`.\nDefault values can be specified using `(x : A := v)` syntax, and tactics using `(x : A := by tac)`.\n", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 44}
{"character": "[", "row": 2, "column": 45, "range": {"start": {"line": 2, "character": 45}, "end": {"line": 2, "character": 54}}, "contents": {"value": "Instance-implicit binder, like `[C]` or `[inst : C]`.\nIn regular applications without `@` explicit mode, it is automatically inserted\nand solved for by typeclass inference for the specified class `C`.\nIn `@` explicit mode, if `_` is used for an instance-implicit parameter, then it is still solved for by typeclass inference;\nuse `(_)` to inhibit this and have it be solved for by unification instead, like an implicit argument.\n", "kind": "markdown"}}
{"character": "G", "row": 2, "column": 46, "range": {"start": {"line": 2, "character": 46}, "end": {"line": 2, "character": 51}}, "contents": {"value": "```lean\nGroup.{u} (G : Type u) : Type u\n```\n***\nA `Group` is a `Monoid` with an operation `⁻¹` satisfying `a⁻¹ * a = 1`.\n\nThere is also a division operation `/` such that `a / b = a * b⁻¹`,\nwith a default so that `a / b = a * b⁻¹` holds by definition.\n\nUse `Group.ofLeftAxioms` or `Group.ofRightAxioms` to define a group structure\non a type with the minimum proof obligations.\n\n***\n*import Mathlib.Algebra.Group.Defs*", "kind": "markdown"}}
{"character": "r", "row": 2, "column": 47, "range": {"start": {"line": 2, "character": 46}, "end": {"line": 2, "character": 51}}, "contents": {"value": "```lean\nGroup.{u} (G : Type u) : Type u\n```\n***\nA `Group` is a `Monoid` with an operation `⁻¹` satisfying `a⁻¹ * a = 1`.\n\nThere is also a division operation `/` such that `a / b = a * b⁻¹`,\nwith a default so that `a / b = a * b⁻¹` holds by definition.\n\nUse `Group.ofLeftAxioms` or `Group.ofRightAxioms` to define a group structure\non a type with the minimum proof obligations.\n\n***\n*import Mathlib.Algebra.Group.Defs*", "kind": "markdown"}}
{"character": "o", "row": 2, "column": 48, "range": {"start": {"line": 2, "character": 46}, "end": {"line": 2, "character": 51}}, "contents": {"value": "```lean\nGroup.{u} (G : Type u) : Type u\n```\n***\nA `Group` is a `Monoid` with an operation `⁻¹` satisfying `a⁻¹ * a = 1`.\n\nThere is also a division operation `/` such that `a / b = a * b⁻¹`,\nwith a default so that `a / b = a * b⁻¹` holds by definition.\n\nUse `Group.ofLeftAxioms` or `Group.ofRightAxioms` to define a group structure\non a type with the minimum proof obligations.\n\n***\n*import Mathlib.Algebra.Group.Defs*", "kind": "markdown"}}
{"character": "u", "row": 2, "column": 49, "range": {"start": {"line": 2, "character": 46}, "end": {"line": 2, "character": 51}}, "contents": {"value": "```lean\nGroup.{u} (G : Type u) : Type u\n```\n***\nA `Group` is a `Monoid` with an operation `⁻¹` satisfying `a⁻¹ * a = 1`.\n\nThere is also a division operation `/` such that `a / b = a * b⁻¹`,\nwith a default so that `a / b = a * b⁻¹` holds by definition.\n\nUse `Group.ofLeftAxioms` or `Group.ofRightAxioms` to define a group structure\non a type with the minimum proof obligations.\n\n***\n*import Mathlib.Algebra.Group.Defs*", "kind": "markdown"}}
{"character": "p", "row": 2, "column": 50, "range": {"start": {"line": 2, "character": 46}, "end": {"line": 2, "character": 51}}, "contents": {"value": "```lean\nGroup.{u} (G : Type u) : Type u\n```\n***\nA `Group` is a `Monoid` with an operation `⁻¹` satisfying `a⁻¹ * a = 1`.\n\nThere is also a division operation `/` such that `a / b = a * b⁻¹`,\nwith a default so that `a / b = a * b⁻¹` holds by definition.\n\nUse `Group.ofLeftAxioms` or `Group.ofRightAxioms` to define a group structure\non a type with the minimum proof obligations.\n\n***\n*import Mathlib.Algebra.Group.Defs*", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 51, "range": {"start": {"line": 2, "character": 46}, "end": {"line": 2, "character": 53}}, "contents": {"value": "```lean\nType u\n```", "kind": "markdown"}}
{"character": "G", "row": 2, "column": 52, "range": {"start": {"line": 2, "character": 52}, "end": {"line": 2, "character": 53}}, "contents": {"value": "```lean\nG : Type u\n```", "kind": "markdown"}}
{"character": "]", "row": 2, "column": 53, "range": {"start": {"line": 2, "character": 45}, "end": {"line": 2, "character": 54}}, "contents": {"value": "Instance-implicit binder, like `[C]` or `[inst : C]`.\nIn regular applications without `@` explicit mode, it is automatically inserted\nand solved for by typeclass inference for the specified class `C`.\nIn `@` explicit mode, if `_` is used for an instance-implicit parameter, then it is still solved for by typeclass inference;\nuse `(_)` to inhibit this and have it be solved for by unification instead, like an implicit argument.\n", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 54}
{"character": "[", "row": 2, "column": 55, "range": {"start": {"line": 2, "character": 55}, "end": {"line": 2, "character": 69}}, "contents": {"value": "Instance-implicit binder, like `[C]` or `[inst : C]`.\nIn regular applications without `@` explicit mode, it is automatically inserted\nand solved for by typeclass inference for the specified class `C`.\nIn `@` explicit mode, if `_` is used for an instance-implicit parameter, then it is still solved for by typeclass inference;\nuse `(_)` to inhibit this and have it be solved for by unification instead, like an implicit argument.\n", "kind": "markdown"}}
{"character": "I", "row": 2, "column": 56, "range": {"start": {"line": 2, "character": 56}, "end": {"line": 2, "character": 66}}, "contents": {"value": "```lean\nIsSolvable.{u_1} (G : Type u_1) [Group G] : Prop\n```\n***\nA group `G` is solvable if its derived series is eventually trivial. We use this definition\nbecause it's the most convenient one to work with. \n***\n*import Mathlib.GroupTheory.Solvable*", "kind": "markdown"}}
{"character": "s", "row": 2, "column": 57, "range": {"start": {"line": 2, "character": 56}, "end": {"line": 2, "character": 66}}, "contents": {"value": "```lean\nIsSolvable.{u_1} (G : Type u_1) [Group G] : Prop\n```\n***\nA group `G` is solvable if its derived series is eventually trivial. We use this definition\nbecause it's the most convenient one to work with. \n***\n*import Mathlib.GroupTheory.Solvable*", "kind": "markdown"}}
{"character": "S", "row": 2, "column": 58, "range": {"start": {"line": 2, "character": 56}, "end": {"line": 2, "character": 66}}, "contents": {"value": "```lean\nIsSolvable.{u_1} (G : Type u_1) [Group G] : Prop\n```\n***\nA group `G` is solvable if its derived series is eventually trivial. We use this definition\nbecause it's the most convenient one to work with. \n***\n*import Mathlib.GroupTheory.Solvable*", "kind": "markdown"}}
{"character": "o", "row": 2, "column": 59, "range": {"start": {"line": 2, "character": 56}, "end": {"line": 2, "character": 66}}, "contents": {"value": "```lean\nIsSolvable.{u_1} (G : Type u_1) [Group G] : Prop\n```\n***\nA group `G` is solvable if its derived series is eventually trivial. We use this definition\nbecause it's the most convenient one to work with. \n***\n*import Mathlib.GroupTheory.Solvable*", "kind": "markdown"}}
{"character": "l", "row": 2, "column": 60, "range": {"start": {"line": 2, "character": 56}, "end": {"line": 2, "character": 66}}, "contents": {"value": "```lean\nIsSolvable.{u_1} (G : Type u_1) [Group G] : Prop\n```\n***\nA group `G` is solvable if its derived series is eventually trivial. We use this definition\nbecause it's the most convenient one to work with. \n***\n*import Mathlib.GroupTheory.Solvable*", "kind": "markdown"}}
{"character": "v", "row": 2, "column": 61, "range": {"start": {"line": 2, "character": 56}, "end": {"line": 2, "character": 66}}, "contents": {"value": "```lean\nIsSolvable.{u_1} (G : Type u_1) [Group G] : Prop\n```\n***\nA group `G` is solvable if its derived series is eventually trivial. We use this definition\nbecause it's the most convenient one to work with. \n***\n*import Mathlib.GroupTheory.Solvable*", "kind": "markdown"}}
{"character": "a", "row": 2, "column": 62, "range": {"start": {"line": 2, "character": 56}, "end": {"line": 2, "character": 66}}, "contents": {"value": "```lean\nIsSolvable.{u_1} (G : Type u_1) [Group G] : Prop\n```\n***\nA group `G` is solvable if its derived series is eventually trivial. We use this definition\nbecause it's the most convenient one to work with. \n***\n*import Mathlib.GroupTheory.Solvable*", "kind": "markdown"}}
{"character": "b", "row": 2, "column": 63, "range": {"start": {"line": 2, "character": 56}, "end": {"line": 2, "character": 66}}, "contents": {"value": "```lean\nIsSolvable.{u_1} (G : Type u_1) [Group G] : Prop\n```\n***\nA group `G` is solvable if its derived series is eventually trivial. We use this definition\nbecause it's the most convenient one to work with. \n***\n*import Mathlib.GroupTheory.Solvable*", "kind": "markdown"}}
{"character": "l", "row": 2, "column": 64, "range": {"start": {"line": 2, "character": 56}, "end": {"line": 2, "character": 66}}, "contents": {"value": "```lean\nIsSolvable.{u_1} (G : Type u_1) [Group G] : Prop\n```\n***\nA group `G` is solvable if its derived series is eventually trivial. We use this definition\nbecause it's the most convenient one to work with. \n***\n*import Mathlib.GroupTheory.Solvable*", "kind": "markdown"}}
{"character": "e", "row": 2, "column": 65, "range": {"start": {"line": 2, "character": 56}, "end": {"line": 2, "character": 66}}, "contents": {"value": "```lean\nIsSolvable.{u_1} (G : Type u_1) [Group G] : Prop\n```\n***\nA group `G` is solvable if its derived series is eventually trivial. We use this definition\nbecause it's the most convenient one to work with. \n***\n*import Mathlib.GroupTheory.Solvable*", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 66, "range": {"start": {"line": 2, "character": 56}, "end": {"line": 2, "character": 68}}, "contents": {"value": "```lean\nProp\n```", "kind": "markdown"}}
{"character": "G", "row": 2, "column": 67, "range": {"start": {"line": 2, "character": 67}, "end": {"line": 2, "character": 68}}, "contents": {"value": "```lean\nG : Type u\n```", "kind": "markdown"}}
{"character": "]", "row": 2, "column": 68, "range": {"start": {"line": 2, "character": 55}, "end": {"line": 2, "character": 69}}, "contents": {"value": "Instance-implicit binder, like `[C]` or `[inst : C]`.\nIn regular applications without `@` explicit mode, it is automatically inserted\nand solved for by typeclass inference for the specified class `C`.\nIn `@` explicit mode, if `_` is used for an instance-implicit parameter, then it is still solved for by typeclass inference;\nuse `(_)` to inhibit this and have it be solved for by unification instead, like an implicit argument.\n", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 69}
{"character": "(", "row": 2, "column": 70, "range": {"start": {"line": 2, "character": 70}, "end": {"line": 2, "character": 86}}, "contents": {"value": "Explicit binder, like `(x y : A)` or `(x y)`.\nDefault values can be specified using `(x : A := v)` syntax, and tactics using `(x : A := by tac)`.\n", "kind": "markdown"}}
{"character": "N", "row": 2, "column": 71, "range": {"start": {"line": 2, "character": 71}, "end": {"line": 2, "character": 72}}, "contents": {"value": "```lean\nN : Subgroup G\n```", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 72}
{"character": ":", "row": 2, "column": 73, "range": {"start": {"line": 2, "character": 70}, "end": {"line": 2, "character": 86}}, "contents": {"value": "Explicit binder, like `(x y : A)` or `(x y)`.\nDefault values can be specified using `(x : A := v)` syntax, and tactics using `(x : A := by tac)`.\n", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 74}
{"character": "S", "row": 2, "column": 75, "range": {"start": {"line": 2, "character": 75}, "end": {"line": 2, "character": 83}}, "contents": {"value": "```lean\nSubgroup.{u_3} (G : Type u_3) [Group G] : Type u_3\n```\n***\nA subgroup of a group `G` is a subset containing 1, closed under multiplication\nand closed under multiplicative inverse. \n***\n*import Mathlib.Algebra.Group.Subgroup.Defs*", "kind": "markdown"}}
{"character": "u", "row": 2, "column": 76, "range": {"start": {"line": 2, "character": 75}, "end": {"line": 2, "character": 83}}, "contents": {"value": "```lean\nSubgroup.{u_3} (G : Type u_3) [Group G] : Type u_3\n```\n***\nA subgroup of a group `G` is a subset containing 1, closed under multiplication\nand closed under multiplicative inverse. \n***\n*import Mathlib.Algebra.Group.Subgroup.Defs*", "kind": "markdown"}}
{"character": "b", "row": 2, "column": 77, "range": {"start": {"line": 2, "character": 75}, "end": {"line": 2, "character": 83}}, "contents": {"value": "```lean\nSubgroup.{u_3} (G : Type u_3) [Group G] : Type u_3\n```\n***\nA subgroup of a group `G` is a subset containing 1, closed under multiplication\nand closed under multiplicative inverse. \n***\n*import Mathlib.Algebra.Group.Subgroup.Defs*", "kind": "markdown"}}
{"character": "g", "row": 2, "column": 78, "range": {"start": {"line": 2, "character": 75}, "end": {"line": 2, "character": 83}}, "contents": {"value": "```lean\nSubgroup.{u_3} (G : Type u_3) [Group G] : Type u_3\n```\n***\nA subgroup of a group `G` is a subset containing 1, closed under multiplication\nand closed under multiplicative inverse. \n***\n*import Mathlib.Algebra.Group.Subgroup.Defs*", "kind": "markdown"}}
{"character": "r", "row": 2, "column": 79, "range": {"start": {"line": 2, "character": 75}, "end": {"line": 2, "character": 83}}, "contents": {"value": "```lean\nSubgroup.{u_3} (G : Type u_3) [Group G] : Type u_3\n```\n***\nA subgroup of a group `G` is a subset containing 1, closed under multiplication\nand closed under multiplicative inverse. \n***\n*import Mathlib.Algebra.Group.Subgroup.Defs*", "kind": "markdown"}}
{"character": "o", "row": 2, "column": 80, "range": {"start": {"line": 2, "character": 75}, "end": {"line": 2, "character": 83}}, "contents": {"value": "```lean\nSubgroup.{u_3} (G : Type u_3) [Group G] : Type u_3\n```\n***\nA subgroup of a group `G` is a subset containing 1, closed under multiplication\nand closed under multiplicative inverse. \n***\n*import Mathlib.Algebra.Group.Subgroup.Defs*", "kind": "markdown"}}
{"character": "u", "row": 2, "column": 81, "range": {"start": {"line": 2, "character": 75}, "end": {"line": 2, "character": 83}}, "contents": {"value": "```lean\nSubgroup.{u_3} (G : Type u_3) [Group G] : Type u_3\n```\n***\nA subgroup of a group `G` is a subset containing 1, closed under multiplication\nand closed under multiplicative inverse. \n***\n*import Mathlib.Algebra.Group.Subgroup.Defs*", "kind": "markdown"}}
{"character": "p", "row": 2, "column": 82, "range": {"start": {"line": 2, "character": 75}, "end": {"line": 2, "character": 83}}, "contents": {"value": "```lean\nSubgroup.{u_3} (G : Type u_3) [Group G] : Type u_3\n```\n***\nA subgroup of a group `G` is a subset containing 1, closed under multiplication\nand closed under multiplicative inverse. \n***\n*import Mathlib.Algebra.Group.Subgroup.Defs*", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 83, "range": {"start": {"line": 2, "character": 75}, "end": {"line": 2, "character": 85}}, "contents": {"value": "```lean\nType u\n```", "kind": "markdown"}}
{"character": "G", "row": 2, "column": 84, "range": {"start": {"line": 2, "character": 84}, "end": {"line": 2, "character": 85}}, "contents": {"value": "```lean\nG : Type u\n```", "kind": "markdown"}}
{"character": ")", "row": 2, "column": 85, "range": {"start": {"line": 2, "character": 70}, "end": {"line": 2, "character": 86}}, "contents": {"value": "Explicit binder, like `(x y : A)` or `(x y)`.\nDefault values can be specified using `(x : A := v)` syntax, and tactics using `(x : A := by tac)`.\n", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 86}
{"character": "[", "row": 2, "column": 87, "range": {"start": {"line": 2, "character": 87}, "end": {"line": 2, "character": 101}}, "contents": {"value": "Instance-implicit binder, like `[C]` or `[inst : C]`.\nIn regular applications without `@` explicit mode, it is automatically inserted\nand solved for by typeclass inference for the specified class `C`.\nIn `@` explicit mode, if `_` is used for an instance-implicit parameter, then it is still solved for by typeclass inference;\nuse `(_)` to inhibit this and have it be solved for by unification instead, like an implicit argument.\n", "kind": "markdown"}}
{"character": "h", "row": 2, "column": 88, "range": {"start": {"line": 2, "character": 88}, "end": {"line": 2, "character": 89}}, "contents": {"value": "```lean\nh : N.Normal\n```", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 89}
{"character": ":", "row": 2, "column": 90, "range": {"start": {"line": 2, "character": 87}, "end": {"line": 2, "character": 101}}, "contents": {"value": "Instance-implicit binder, like `[C]` or `[inst : C]`.\nIn regular applications without `@` explicit mode, it is automatically inserted\nand solved for by typeclass inference for the specified class `C`.\nIn `@` explicit mode, if `_` is used for an instance-implicit parameter, then it is still solved for by typeclass inference;\nuse `(_)` to inhibit this and have it be solved for by unification instead, like an implicit argument.\n", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 91}
{"character": "N", "row": 2, "column": 92, "range": {"start": {"line": 2, "character": 92}, "end": {"line": 2, "character": 93}}, "contents": {"value": "```lean\nN : Subgroup G\n```", "kind": "markdown"}}
{"character": ".", "row": 2, "column": 93, "range": {"start": {"line": 2, "character": 92}, "end": {"line": 2, "character": 100}}, "contents": {"value": "```lean\nProp\n```", "kind": "markdown"}}
{"character": "N", "row": 2, "column": 94, "range": {"start": {"line": 2, "character": 94}, "end": {"line": 2, "character": 100}}, "contents": {"value": "```lean\nSubgroup.Normal.{u_1} {G : Type u_1} [Group G] (H : Subgroup G) : Prop\n```\n***\nA subgroup is normal if whenever `n ∈ H`, then `g * n * g⁻¹ ∈ H` for every `g : G` \n***\n*import Mathlib.Algebra.Group.Subgroup.Defs*", "kind": "markdown"}}
{"character": "o", "row": 2, "column": 95, "range": {"start": {"line": 2, "character": 94}, "end": {"line": 2, "character": 100}}, "contents": {"value": "```lean\nSubgroup.Normal.{u_1} {G : Type u_1} [Group G] (H : Subgroup G) : Prop\n```\n***\nA subgroup is normal if whenever `n ∈ H`, then `g * n * g⁻¹ ∈ H` for every `g : G` \n***\n*import Mathlib.Algebra.Group.Subgroup.Defs*", "kind": "markdown"}}
{"character": "r", "row": 2, "column": 96, "range": {"start": {"line": 2, "character": 94}, "end": {"line": 2, "character": 100}}, "contents": {"value": "```lean\nSubgroup.Normal.{u_1} {G : Type u_1} [Group G] (H : Subgroup G) : Prop\n```\n***\nA subgroup is normal if whenever `n ∈ H`, then `g * n * g⁻¹ ∈ H` for every `g : G` \n***\n*import Mathlib.Algebra.Group.Subgroup.Defs*", "kind": "markdown"}}
{"character": "m", "row": 2, "column": 97, "range": {"start": {"line": 2, "character": 94}, "end": {"line": 2, "character": 100}}, "contents": {"value": "```lean\nSubgroup.Normal.{u_1} {G : Type u_1} [Group G] (H : Subgroup G) : Prop\n```\n***\nA subgroup is normal if whenever `n ∈ H`, then `g * n * g⁻¹ ∈ H` for every `g : G` \n***\n*import Mathlib.Algebra.Group.Subgroup.Defs*", "kind": "markdown"}}
{"character": "a", "row": 2, "column": 98, "range": {"start": {"line": 2, "character": 94}, "end": {"line": 2, "character": 100}}, "contents": {"value": "```lean\nSubgroup.Normal.{u_1} {G : Type u_1} [Group G] (H : Subgroup G) : Prop\n```\n***\nA subgroup is normal if whenever `n ∈ H`, then `g * n * g⁻¹ ∈ H` for every `g : G` \n***\n*import Mathlib.Algebra.Group.Subgroup.Defs*", "kind": "markdown"}}
{"character": "l", "row": 2, "column": 99, "range": {"start": {"line": 2, "character": 94}, "end": {"line": 2, "character": 100}}, "contents": {"value": "```lean\nSubgroup.Normal.{u_1} {G : Type u_1} [Group G] (H : Subgroup G) : Prop\n```\n***\nA subgroup is normal if whenever `n ∈ H`, then `g * n * g⁻¹ ∈ H` for every `g : G` \n***\n*import Mathlib.Algebra.Group.Subgroup.Defs*", "kind": "markdown"}}
{"character": "]", "row": 2, "column": 100, "range": {"start": {"line": 2, "character": 87}, "end": {"line": 2, "character": 101}}, "contents": {"value": "Instance-implicit binder, like `[C]` or `[inst : C]`.\nIn regular applications without `@` explicit mode, it is automatically inserted\nand solved for by typeclass inference for the specified class `C`.\nIn `@` explicit mode, if `_` is used for an instance-implicit parameter, then it is still solved for by typeclass inference;\nuse `(_)` to inhibit this and have it be solved for by unification instead, like an implicit argument.\n", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 101}
{"character": ":", "row": 2, "column": 102, "range": {"start": {"line": 2, "character": 32}, "end": {"line": 2, "character": 122}}, "contents": {"value": "`declSig` matches the signature of a declaration with required type: a list of binders and then `: type` ", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 103}
{"character": "I", "row": 2, "column": 104, "range": {"start": {"line": 2, "character": 104}, "end": {"line": 2, "character": 114}}, "contents": {"value": "```lean\nIsSolvable.{u_1} (G : Type u_1) [Group G] : Prop\n```\n***\nA group `G` is solvable if its derived series is eventually trivial. We use this definition\nbecause it's the most convenient one to work with. \n***\n*import Mathlib.GroupTheory.Solvable*", "kind": "markdown"}}
{"character": "s", "row": 2, "column": 105, "range": {"start": {"line": 2, "character": 104}, "end": {"line": 2, "character": 114}}, "contents": {"value": "```lean\nIsSolvable.{u_1} (G : Type u_1) [Group G] : Prop\n```\n***\nA group `G` is solvable if its derived series is eventually trivial. We use this definition\nbecause it's the most convenient one to work with. \n***\n*import Mathlib.GroupTheory.Solvable*", "kind": "markdown"}}
{"character": "S", "row": 2, "column": 106, "range": {"start": {"line": 2, "character": 104}, "end": {"line": 2, "character": 114}}, "contents": {"value": "```lean\nIsSolvable.{u_1} (G : Type u_1) [Group G] : Prop\n```\n***\nA group `G` is solvable if its derived series is eventually trivial. We use this definition\nbecause it's the most convenient one to work with. \n***\n*import Mathlib.GroupTheory.Solvable*", "kind": "markdown"}}
{"character": "o", "row": 2, "column": 107, "range": {"start": {"line": 2, "character": 104}, "end": {"line": 2, "character": 114}}, "contents": {"value": "```lean\nIsSolvable.{u_1} (G : Type u_1) [Group G] : Prop\n```\n***\nA group `G` is solvable if its derived series is eventually trivial. We use this definition\nbecause it's the most convenient one to work with. \n***\n*import Mathlib.GroupTheory.Solvable*", "kind": "markdown"}}
{"character": "l", "row": 2, "column": 108, "range": {"start": {"line": 2, "character": 104}, "end": {"line": 2, "character": 114}}, "contents": {"value": "```lean\nIsSolvable.{u_1} (G : Type u_1) [Group G] : Prop\n```\n***\nA group `G` is solvable if its derived series is eventually trivial. We use this definition\nbecause it's the most convenient one to work with. \n***\n*import Mathlib.GroupTheory.Solvable*", "kind": "markdown"}}
{"character": "v", "row": 2, "column": 109, "range": {"start": {"line": 2, "character": 104}, "end": {"line": 2, "character": 114}}, "contents": {"value": "```lean\nIsSolvable.{u_1} (G : Type u_1) [Group G] : Prop\n```\n***\nA group `G` is solvable if its derived series is eventually trivial. We use this definition\nbecause it's the most convenient one to work with. \n***\n*import Mathlib.GroupTheory.Solvable*", "kind": "markdown"}}
{"character": "a", "row": 2, "column": 110, "range": {"start": {"line": 2, "character": 104}, "end": {"line": 2, "character": 114}}, "contents": {"value": "```lean\nIsSolvable.{u_1} (G : Type u_1) [Group G] : Prop\n```\n***\nA group `G` is solvable if its derived series is eventually trivial. We use this definition\nbecause it's the most convenient one to work with. \n***\n*import Mathlib.GroupTheory.Solvable*", "kind": "markdown"}}
{"character": "b", "row": 2, "column": 111, "range": {"start": {"line": 2, "character": 104}, "end": {"line": 2, "character": 114}}, "contents": {"value": "```lean\nIsSolvable.{u_1} (G : Type u_1) [Group G] : Prop\n```\n***\nA group `G` is solvable if its derived series is eventually trivial. We use this definition\nbecause it's the most convenient one to work with. \n***\n*import Mathlib.GroupTheory.Solvable*", "kind": "markdown"}}
{"character": "l", "row": 2, "column": 112, "range": {"start": {"line": 2, "character": 104}, "end": {"line": 2, "character": 114}}, "contents": {"value": "```lean\nIsSolvable.{u_1} (G : Type u_1) [Group G] : Prop\n```\n***\nA group `G` is solvable if its derived series is eventually trivial. We use this definition\nbecause it's the most convenient one to work with. \n***\n*import Mathlib.GroupTheory.Solvable*", "kind": "markdown"}}
{"character": "e", "row": 2, "column": 113, "range": {"start": {"line": 2, "character": 104}, "end": {"line": 2, "character": 114}}, "contents": {"value": "```lean\nIsSolvable.{u_1} (G : Type u_1) [Group G] : Prop\n```\n***\nA group `G` is solvable if its derived series is eventually trivial. We use this definition\nbecause it's the most convenient one to work with. \n***\n*import Mathlib.GroupTheory.Solvable*", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 114, "range": {"start": {"line": 2, "character": 104}, "end": {"line": 2, "character": 122}}, "contents": {"value": "```lean\nProp\n```", "kind": "markdown"}}
{"character": "(", "row": 2, "column": 115, "range": {"start": {"line": 2, "character": 115}, "end": {"line": 2, "character": 122}}, "contents": {"value": "```lean\nType u\n```\n***\nParentheses, used for grouping expressions (e.g., `a * (b + c)`).\nCan also be used for creating simple functions when combined with `·`. Here are some examples:\n  - `(· + 1)` is shorthand for `fun x => x + 1`\n  - `(· + ·)` is shorthand for `fun x y => x + y`\n  - `(f · a b)` is shorthand for `fun x => f x a b`\n  - `(h (· + 1) ·)` is shorthand for `fun x => h (fun y => y + 1) x`\n  - also applies to other parentheses-like notations such as `(·, 1)`\n", "kind": "markdown"}}
{"character": "G", "row": 2, "column": 116, "range": {"start": {"line": 2, "character": 116}, "end": {"line": 2, "character": 117}}, "contents": {"value": "```lean\nG : Type u\n```", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 117, "range": {"start": {"line": 2, "character": 116}, "end": {"line": 2, "character": 121}}, "contents": {"value": "```lean\nType u\n```\n***\nQuotient notation based on the `HasQuotient` typeclass ", "kind": "markdown"}}
{"character": "⧸", "row": 2, "column": 118, "range": {"start": {"line": 2, "character": 116}, "end": {"line": 2, "character": 121}}, "contents": {"value": "```lean\nType u\n```\n***\nQuotient notation based on the `HasQuotient` typeclass ", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 119, "range": {"start": {"line": 2, "character": 116}, "end": {"line": 2, "character": 121}}, "contents": {"value": "```lean\nType u\n```\n***\nQuotient notation based on the `HasQuotient` typeclass ", "kind": "markdown"}}
{"character": "N", "row": 2, "column": 120, "range": {"start": {"line": 2, "character": 120}, "end": {"line": 2, "character": 121}}, "contents": {"value": "```lean\nN : Subgroup G\n```", "kind": "markdown"}}
{"character": ")", "row": 2, "column": 121, "range": {"start": {"line": 2, "character": 115}, "end": {"line": 2, "character": 122}}, "contents": {"value": "```lean\nType u\n```\n***\nParentheses, used for grouping expressions (e.g., `a * (b + c)`).\nCan also be used for creating simple functions when combined with `·`. Here are some examples:\n  - `(· + 1)` is shorthand for `fun x => x + 1`\n  - `(· + ·)` is shorthand for `fun x y => x + y`\n  - `(f · a b)` is shorthand for `fun x => f x a b`\n  - `(h (· + 1) ·)` is shorthand for `fun x => h (fun y => y + 1) x`\n  - also applies to other parentheses-like notations such as `(·, 1)`\n", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 122}
{"character": ":", "row": 2, "column": 123}
{"character": "=", "row": 2, "column": 124}
{"character": " ", "row": 2, "column": 125}
{"character": "b", "row": 2, "column": 126, "range": {"start": {"line": 2, "character": 126}, "end": {"line": 2, "character": 134}}, "contents": {"value": "`by tac` constructs a term of the expected type by running the tactic(s) `tac`. ", "kind": "markdown"}}
{"character": "y", "row": 2, "column": 127, "range": {"start": {"line": 2, "character": 126}, "end": {"line": 2, "character": 134}}, "contents": {"value": "`by tac` constructs a term of the expected type by running the tactic(s) `tac`. ", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 128, "range": {"start": {"line": 2, "character": 126}, "end": {"line": 2, "character": 134}}, "contents": {"value": "`by tac` constructs a term of the expected type by running the tactic(s) `tac`. ", "kind": "markdown"}}
{"character": "s", "row": 2, "column": 129, "range": {"start": {"line": 2, "character": 129}, "end": {"line": 2, "character": 134}}, "contents": {"value": "The `sorry` tactic is a temporary placeholder for an incomplete tactic proof,\nclosing the main goal using `exact sorry`.\n\nThis is intended for stubbing-out incomplete parts of a proof while still having a syntactically correct proof skeleton.\nLean will give a warning whenever a proof uses `sorry`, so you aren't likely to miss it,\nbut you can double check if a theorem depends on `sorry` by looking for `sorryAx` in the output\nof the `#print axioms my_thm` command, the axiom used by the implementation of `sorry`.\n", "kind": "markdown"}}
{"character": "o", "row": 2, "column": 130, "range": {"start": {"line": 2, "character": 129}, "end": {"line": 2, "character": 134}}, "contents": {"value": "The `sorry` tactic is a temporary placeholder for an incomplete tactic proof,\nclosing the main goal using `exact sorry`.\n\nThis is intended for stubbing-out incomplete parts of a proof while still having a syntactically correct proof skeleton.\nLean will give a warning whenever a proof uses `sorry`, so you aren't likely to miss it,\nbut you can double check if a theorem depends on `sorry` by looking for `sorryAx` in the output\nof the `#print axioms my_thm` command, the axiom used by the implementation of `sorry`.\n", "kind": "markdown"}}
{"character": "r", "row": 2, "column": 131, "range": {"start": {"line": 2, "character": 129}, "end": {"line": 2, "character": 134}}, "contents": {"value": "The `sorry` tactic is a temporary placeholder for an incomplete tactic proof,\nclosing the main goal using `exact sorry`.\n\nThis is intended for stubbing-out incomplete parts of a proof while still having a syntactically correct proof skeleton.\nLean will give a warning whenever a proof uses `sorry`, so you aren't likely to miss it,\nbut you can double check if a theorem depends on `sorry` by looking for `sorryAx` in the output\nof the `#print axioms my_thm` command, the axiom used by the implementation of `sorry`.\n", "kind": "markdown"}}
{"character": "r", "row": 2, "column": 132, "range": {"start": {"line": 2, "character": 129}, "end": {"line": 2, "character": 134}}, "contents": {"value": "The `sorry` tactic is a temporary placeholder for an incomplete tactic proof,\nclosing the main goal using `exact sorry`.\n\nThis is intended for stubbing-out incomplete parts of a proof while still having a syntactically correct proof skeleton.\nLean will give a warning whenever a proof uses `sorry`, so you aren't likely to miss it,\nbut you can double check if a theorem depends on `sorry` by looking for `sorryAx` in the output\nof the `#print axioms my_thm` command, the axiom used by the implementation of `sorry`.\n", "kind": "markdown"}}
{"character": "y", "row": 2, "column": 133, "range": {"start": {"line": 2, "character": 129}, "end": {"line": 2, "character": 134}}, "contents": {"value": "The `sorry` tactic is a temporary placeholder for an incomplete tactic proof,\nclosing the main goal using `exact sorry`.\n\nThis is intended for stubbing-out incomplete parts of a proof while still having a syntactically correct proof skeleton.\nLean will give a warning whenever a proof uses `sorry`, so you aren't likely to miss it,\nbut you can double check if a theorem depends on `sorry` by looking for `sorryAx` in the output\nof the `#print axioms my_thm` command, the axiom used by the implementation of `sorry`.\n", "kind": "markdown"}}
