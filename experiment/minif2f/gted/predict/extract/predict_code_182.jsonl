{"character": "i", "row": 0, "column": 0}
{"character": "m", "row": 0, "column": 1}
{"character": "p", "row": 0, "column": 2}
{"character": "o", "row": 0, "column": 3}
{"character": "r", "row": 0, "column": 4}
{"character": "t", "row": 0, "column": 5}
{"character": " ", "row": 0, "column": 6}
{"character": "M", "row": 0, "column": 7}
{"character": "a", "row": 0, "column": 8}
{"character": "t", "row": 0, "column": 9}
{"character": "h", "row": 0, "column": 10}
{"character": "l", "row": 0, "column": 11}
{"character": "i", "row": 0, "column": 12}
{"character": "b", "row": 0, "column": 13}
{"character": "o", "row": 1, "column": 0, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 8}}, "contents": {"value": "Makes names from other namespaces visible without writing the namespace prefix.\n\nNames that are made available with `open` are visible within the current `section` or `namespace`\nblock. This makes referring to (type) definitions and theorems easier, but note that it can also\nmake [scoped instances], notations, and attributes from a different namespace available.\n\nThe `open` command can be used in a few different ways:\n\n* `open Some.Namespace.Path1 Some.Namespace.Path2` makes all non-protected names in\n  `Some.Namespace.Path1` and `Some.Namespace.Path2` available without the prefix, so that\n  `Some.Namespace.Path1.x` and `Some.Namespace.Path2.y` can be referred to by writing only `x` and\n  `y`.\n\n* `open Some.Namespace.Path hiding def1 def2` opens all non-protected names in `Some.Namespace.Path`\n  except `def1` and `def2`.\n\n* `open Some.Namespace.Path (def1 def2)` only makes `Some.Namespace.Path.def1` and\n  `Some.Namespace.Path.def2` available without the full prefix, so `Some.Namespace.Path.def3` would\n  be unaffected.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open Some.Namespace.Path renaming def1 → def1', def2 → def2'` same as `open Some.Namespace.Path\n  (def1 def2)` but `def1`/`def2`'s names are changed to `def1'`/`def2'`.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open scoped Some.Namespace.Path1 Some.Namespace.Path2` **only** opens [scoped instances],\n  notations, and attributes from `Namespace1` and `Namespace2`; it does **not** make any other name\n  available.\n\n* `open <any of the open shapes above> in` makes the names `open`-ed visible only in the next\n  command or expression.\n\n[scoped instance]: https://lean-lang.org/theorem_proving_in_lean4/type_classes.html#scoped-instances\n(Scoped instances in Theorem Proving in Lean)\n\n\n## Examples\n\n```lean\n/-- SKI combinators https://en.wikipedia.org/wiki/SKI_combinator_calculus -/\nnamespace Combinator.Calculus\n  def I (a : α) : α := a\n  def K (a : α) : β → α := fun _ => a\n  def S (x : α → β → γ) (y : α → β) (z : α) : γ := x z (y z)\nend Combinator.Calculus\n\nsection\n  -- open everything under `Combinator.Calculus`, *i.e.* `I`, `K` and `S`,\n  -- until the section ends\n  open Combinator.Calculus\n\n  theorem SKx_eq_K : S K x = I := rfl\nend\n\n-- open everything under `Combinator.Calculus` only for the next command (the next `theorem`, here)\nopen Combinator.Calculus in\ntheorem SKx_eq_K' : S K x = I := rfl\n\nsection\n  -- open only `S` and `K` under `Combinator.Calculus`\n  open Combinator.Calculus (S K)\n\n  theorem SKxy_eq_y : S K x y = y := rfl\n\n  -- `I` is not in scope, we have to use its full path\n  theorem SKxy_eq_Iy : S K x y = Combinator.Calculus.I y := rfl\nend\n\nsection\n  open Combinator.Calculus\n    renaming\n      I → identity,\n      K → konstant\n\n  #check identity\n  #check konstant\nend\n\nsection\n  open Combinator.Calculus\n    hiding S\n\n  #check I\n  #check K\nend\n\nsection\n  namespace Demo\n    inductive MyType\n    | val\n\n    namespace N1\n      scoped infix:68 \" ≋ \" => BEq.beq\n\n      scoped instance : BEq MyType where\n        beq _ _ := true\n\n      def Alias := MyType\n    end N1\n  end Demo\n\n  -- bring `≋` and the instance in scope, but not `Alias`\n  open scoped Demo.N1\n\n  #check Demo.MyType.val == Demo.MyType.val\n  #check Demo.MyType.val ≋ Demo.MyType.val\n  -- #check Alias -- unknown identifier 'Alias'\nend\n```\n", "kind": "markdown"}}
{"character": "p", "row": 1, "column": 1, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 8}}, "contents": {"value": "Makes names from other namespaces visible without writing the namespace prefix.\n\nNames that are made available with `open` are visible within the current `section` or `namespace`\nblock. This makes referring to (type) definitions and theorems easier, but note that it can also\nmake [scoped instances], notations, and attributes from a different namespace available.\n\nThe `open` command can be used in a few different ways:\n\n* `open Some.Namespace.Path1 Some.Namespace.Path2` makes all non-protected names in\n  `Some.Namespace.Path1` and `Some.Namespace.Path2` available without the prefix, so that\n  `Some.Namespace.Path1.x` and `Some.Namespace.Path2.y` can be referred to by writing only `x` and\n  `y`.\n\n* `open Some.Namespace.Path hiding def1 def2` opens all non-protected names in `Some.Namespace.Path`\n  except `def1` and `def2`.\n\n* `open Some.Namespace.Path (def1 def2)` only makes `Some.Namespace.Path.def1` and\n  `Some.Namespace.Path.def2` available without the full prefix, so `Some.Namespace.Path.def3` would\n  be unaffected.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open Some.Namespace.Path renaming def1 → def1', def2 → def2'` same as `open Some.Namespace.Path\n  (def1 def2)` but `def1`/`def2`'s names are changed to `def1'`/`def2'`.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open scoped Some.Namespace.Path1 Some.Namespace.Path2` **only** opens [scoped instances],\n  notations, and attributes from `Namespace1` and `Namespace2`; it does **not** make any other name\n  available.\n\n* `open <any of the open shapes above> in` makes the names `open`-ed visible only in the next\n  command or expression.\n\n[scoped instance]: https://lean-lang.org/theorem_proving_in_lean4/type_classes.html#scoped-instances\n(Scoped instances in Theorem Proving in Lean)\n\n\n## Examples\n\n```lean\n/-- SKI combinators https://en.wikipedia.org/wiki/SKI_combinator_calculus -/\nnamespace Combinator.Calculus\n  def I (a : α) : α := a\n  def K (a : α) : β → α := fun _ => a\n  def S (x : α → β → γ) (y : α → β) (z : α) : γ := x z (y z)\nend Combinator.Calculus\n\nsection\n  -- open everything under `Combinator.Calculus`, *i.e.* `I`, `K` and `S`,\n  -- until the section ends\n  open Combinator.Calculus\n\n  theorem SKx_eq_K : S K x = I := rfl\nend\n\n-- open everything under `Combinator.Calculus` only for the next command (the next `theorem`, here)\nopen Combinator.Calculus in\ntheorem SKx_eq_K' : S K x = I := rfl\n\nsection\n  -- open only `S` and `K` under `Combinator.Calculus`\n  open Combinator.Calculus (S K)\n\n  theorem SKxy_eq_y : S K x y = y := rfl\n\n  -- `I` is not in scope, we have to use its full path\n  theorem SKxy_eq_Iy : S K x y = Combinator.Calculus.I y := rfl\nend\n\nsection\n  open Combinator.Calculus\n    renaming\n      I → identity,\n      K → konstant\n\n  #check identity\n  #check konstant\nend\n\nsection\n  open Combinator.Calculus\n    hiding S\n\n  #check I\n  #check K\nend\n\nsection\n  namespace Demo\n    inductive MyType\n    | val\n\n    namespace N1\n      scoped infix:68 \" ≋ \" => BEq.beq\n\n      scoped instance : BEq MyType where\n        beq _ _ := true\n\n      def Alias := MyType\n    end N1\n  end Demo\n\n  -- bring `≋` and the instance in scope, but not `Alias`\n  open scoped Demo.N1\n\n  #check Demo.MyType.val == Demo.MyType.val\n  #check Demo.MyType.val ≋ Demo.MyType.val\n  -- #check Alias -- unknown identifier 'Alias'\nend\n```\n", "kind": "markdown"}}
{"character": "e", "row": 1, "column": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 8}}, "contents": {"value": "Makes names from other namespaces visible without writing the namespace prefix.\n\nNames that are made available with `open` are visible within the current `section` or `namespace`\nblock. This makes referring to (type) definitions and theorems easier, but note that it can also\nmake [scoped instances], notations, and attributes from a different namespace available.\n\nThe `open` command can be used in a few different ways:\n\n* `open Some.Namespace.Path1 Some.Namespace.Path2` makes all non-protected names in\n  `Some.Namespace.Path1` and `Some.Namespace.Path2` available without the prefix, so that\n  `Some.Namespace.Path1.x` and `Some.Namespace.Path2.y` can be referred to by writing only `x` and\n  `y`.\n\n* `open Some.Namespace.Path hiding def1 def2` opens all non-protected names in `Some.Namespace.Path`\n  except `def1` and `def2`.\n\n* `open Some.Namespace.Path (def1 def2)` only makes `Some.Namespace.Path.def1` and\n  `Some.Namespace.Path.def2` available without the full prefix, so `Some.Namespace.Path.def3` would\n  be unaffected.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open Some.Namespace.Path renaming def1 → def1', def2 → def2'` same as `open Some.Namespace.Path\n  (def1 def2)` but `def1`/`def2`'s names are changed to `def1'`/`def2'`.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open scoped Some.Namespace.Path1 Some.Namespace.Path2` **only** opens [scoped instances],\n  notations, and attributes from `Namespace1` and `Namespace2`; it does **not** make any other name\n  available.\n\n* `open <any of the open shapes above> in` makes the names `open`-ed visible only in the next\n  command or expression.\n\n[scoped instance]: https://lean-lang.org/theorem_proving_in_lean4/type_classes.html#scoped-instances\n(Scoped instances in Theorem Proving in Lean)\n\n\n## Examples\n\n```lean\n/-- SKI combinators https://en.wikipedia.org/wiki/SKI_combinator_calculus -/\nnamespace Combinator.Calculus\n  def I (a : α) : α := a\n  def K (a : α) : β → α := fun _ => a\n  def S (x : α → β → γ) (y : α → β) (z : α) : γ := x z (y z)\nend Combinator.Calculus\n\nsection\n  -- open everything under `Combinator.Calculus`, *i.e.* `I`, `K` and `S`,\n  -- until the section ends\n  open Combinator.Calculus\n\n  theorem SKx_eq_K : S K x = I := rfl\nend\n\n-- open everything under `Combinator.Calculus` only for the next command (the next `theorem`, here)\nopen Combinator.Calculus in\ntheorem SKx_eq_K' : S K x = I := rfl\n\nsection\n  -- open only `S` and `K` under `Combinator.Calculus`\n  open Combinator.Calculus (S K)\n\n  theorem SKxy_eq_y : S K x y = y := rfl\n\n  -- `I` is not in scope, we have to use its full path\n  theorem SKxy_eq_Iy : S K x y = Combinator.Calculus.I y := rfl\nend\n\nsection\n  open Combinator.Calculus\n    renaming\n      I → identity,\n      K → konstant\n\n  #check identity\n  #check konstant\nend\n\nsection\n  open Combinator.Calculus\n    hiding S\n\n  #check I\n  #check K\nend\n\nsection\n  namespace Demo\n    inductive MyType\n    | val\n\n    namespace N1\n      scoped infix:68 \" ≋ \" => BEq.beq\n\n      scoped instance : BEq MyType where\n        beq _ _ := true\n\n      def Alias := MyType\n    end N1\n  end Demo\n\n  -- bring `≋` and the instance in scope, but not `Alias`\n  open scoped Demo.N1\n\n  #check Demo.MyType.val == Demo.MyType.val\n  #check Demo.MyType.val ≋ Demo.MyType.val\n  -- #check Alias -- unknown identifier 'Alias'\nend\n```\n", "kind": "markdown"}}
{"character": "n", "row": 1, "column": 3, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 8}}, "contents": {"value": "Makes names from other namespaces visible without writing the namespace prefix.\n\nNames that are made available with `open` are visible within the current `section` or `namespace`\nblock. This makes referring to (type) definitions and theorems easier, but note that it can also\nmake [scoped instances], notations, and attributes from a different namespace available.\n\nThe `open` command can be used in a few different ways:\n\n* `open Some.Namespace.Path1 Some.Namespace.Path2` makes all non-protected names in\n  `Some.Namespace.Path1` and `Some.Namespace.Path2` available without the prefix, so that\n  `Some.Namespace.Path1.x` and `Some.Namespace.Path2.y` can be referred to by writing only `x` and\n  `y`.\n\n* `open Some.Namespace.Path hiding def1 def2` opens all non-protected names in `Some.Namespace.Path`\n  except `def1` and `def2`.\n\n* `open Some.Namespace.Path (def1 def2)` only makes `Some.Namespace.Path.def1` and\n  `Some.Namespace.Path.def2` available without the full prefix, so `Some.Namespace.Path.def3` would\n  be unaffected.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open Some.Namespace.Path renaming def1 → def1', def2 → def2'` same as `open Some.Namespace.Path\n  (def1 def2)` but `def1`/`def2`'s names are changed to `def1'`/`def2'`.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open scoped Some.Namespace.Path1 Some.Namespace.Path2` **only** opens [scoped instances],\n  notations, and attributes from `Namespace1` and `Namespace2`; it does **not** make any other name\n  available.\n\n* `open <any of the open shapes above> in` makes the names `open`-ed visible only in the next\n  command or expression.\n\n[scoped instance]: https://lean-lang.org/theorem_proving_in_lean4/type_classes.html#scoped-instances\n(Scoped instances in Theorem Proving in Lean)\n\n\n## Examples\n\n```lean\n/-- SKI combinators https://en.wikipedia.org/wiki/SKI_combinator_calculus -/\nnamespace Combinator.Calculus\n  def I (a : α) : α := a\n  def K (a : α) : β → α := fun _ => a\n  def S (x : α → β → γ) (y : α → β) (z : α) : γ := x z (y z)\nend Combinator.Calculus\n\nsection\n  -- open everything under `Combinator.Calculus`, *i.e.* `I`, `K` and `S`,\n  -- until the section ends\n  open Combinator.Calculus\n\n  theorem SKx_eq_K : S K x = I := rfl\nend\n\n-- open everything under `Combinator.Calculus` only for the next command (the next `theorem`, here)\nopen Combinator.Calculus in\ntheorem SKx_eq_K' : S K x = I := rfl\n\nsection\n  -- open only `S` and `K` under `Combinator.Calculus`\n  open Combinator.Calculus (S K)\n\n  theorem SKxy_eq_y : S K x y = y := rfl\n\n  -- `I` is not in scope, we have to use its full path\n  theorem SKxy_eq_Iy : S K x y = Combinator.Calculus.I y := rfl\nend\n\nsection\n  open Combinator.Calculus\n    renaming\n      I → identity,\n      K → konstant\n\n  #check identity\n  #check konstant\nend\n\nsection\n  open Combinator.Calculus\n    hiding S\n\n  #check I\n  #check K\nend\n\nsection\n  namespace Demo\n    inductive MyType\n    | val\n\n    namespace N1\n      scoped infix:68 \" ≋ \" => BEq.beq\n\n      scoped instance : BEq MyType where\n        beq _ _ := true\n\n      def Alias := MyType\n    end N1\n  end Demo\n\n  -- bring `≋` and the instance in scope, but not `Alias`\n  open scoped Demo.N1\n\n  #check Demo.MyType.val == Demo.MyType.val\n  #check Demo.MyType.val ≋ Demo.MyType.val\n  -- #check Alias -- unknown identifier 'Alias'\nend\n```\n", "kind": "markdown"}}
{"character": " ", "row": 1, "column": 4, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 8}}, "contents": {"value": "Makes names from other namespaces visible without writing the namespace prefix.\n\nNames that are made available with `open` are visible within the current `section` or `namespace`\nblock. This makes referring to (type) definitions and theorems easier, but note that it can also\nmake [scoped instances], notations, and attributes from a different namespace available.\n\nThe `open` command can be used in a few different ways:\n\n* `open Some.Namespace.Path1 Some.Namespace.Path2` makes all non-protected names in\n  `Some.Namespace.Path1` and `Some.Namespace.Path2` available without the prefix, so that\n  `Some.Namespace.Path1.x` and `Some.Namespace.Path2.y` can be referred to by writing only `x` and\n  `y`.\n\n* `open Some.Namespace.Path hiding def1 def2` opens all non-protected names in `Some.Namespace.Path`\n  except `def1` and `def2`.\n\n* `open Some.Namespace.Path (def1 def2)` only makes `Some.Namespace.Path.def1` and\n  `Some.Namespace.Path.def2` available without the full prefix, so `Some.Namespace.Path.def3` would\n  be unaffected.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open Some.Namespace.Path renaming def1 → def1', def2 → def2'` same as `open Some.Namespace.Path\n  (def1 def2)` but `def1`/`def2`'s names are changed to `def1'`/`def2'`.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open scoped Some.Namespace.Path1 Some.Namespace.Path2` **only** opens [scoped instances],\n  notations, and attributes from `Namespace1` and `Namespace2`; it does **not** make any other name\n  available.\n\n* `open <any of the open shapes above> in` makes the names `open`-ed visible only in the next\n  command or expression.\n\n[scoped instance]: https://lean-lang.org/theorem_proving_in_lean4/type_classes.html#scoped-instances\n(Scoped instances in Theorem Proving in Lean)\n\n\n## Examples\n\n```lean\n/-- SKI combinators https://en.wikipedia.org/wiki/SKI_combinator_calculus -/\nnamespace Combinator.Calculus\n  def I (a : α) : α := a\n  def K (a : α) : β → α := fun _ => a\n  def S (x : α → β → γ) (y : α → β) (z : α) : γ := x z (y z)\nend Combinator.Calculus\n\nsection\n  -- open everything under `Combinator.Calculus`, *i.e.* `I`, `K` and `S`,\n  -- until the section ends\n  open Combinator.Calculus\n\n  theorem SKx_eq_K : S K x = I := rfl\nend\n\n-- open everything under `Combinator.Calculus` only for the next command (the next `theorem`, here)\nopen Combinator.Calculus in\ntheorem SKx_eq_K' : S K x = I := rfl\n\nsection\n  -- open only `S` and `K` under `Combinator.Calculus`\n  open Combinator.Calculus (S K)\n\n  theorem SKxy_eq_y : S K x y = y := rfl\n\n  -- `I` is not in scope, we have to use its full path\n  theorem SKxy_eq_Iy : S K x y = Combinator.Calculus.I y := rfl\nend\n\nsection\n  open Combinator.Calculus\n    renaming\n      I → identity,\n      K → konstant\n\n  #check identity\n  #check konstant\nend\n\nsection\n  open Combinator.Calculus\n    hiding S\n\n  #check I\n  #check K\nend\n\nsection\n  namespace Demo\n    inductive MyType\n    | val\n\n    namespace N1\n      scoped infix:68 \" ≋ \" => BEq.beq\n\n      scoped instance : BEq MyType where\n        beq _ _ := true\n\n      def Alias := MyType\n    end N1\n  end Demo\n\n  -- bring `≋` and the instance in scope, but not `Alias`\n  open scoped Demo.N1\n\n  #check Demo.MyType.val == Demo.MyType.val\n  #check Demo.MyType.val ≋ Demo.MyType.val\n  -- #check Alias -- unknown identifier 'Alias'\nend\n```\n", "kind": "markdown"}}
{"character": "N", "row": 1, "column": 5, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 8}}, "contents": {"value": "Makes names from other namespaces visible without writing the namespace prefix.\n\nNames that are made available with `open` are visible within the current `section` or `namespace`\nblock. This makes referring to (type) definitions and theorems easier, but note that it can also\nmake [scoped instances], notations, and attributes from a different namespace available.\n\nThe `open` command can be used in a few different ways:\n\n* `open Some.Namespace.Path1 Some.Namespace.Path2` makes all non-protected names in\n  `Some.Namespace.Path1` and `Some.Namespace.Path2` available without the prefix, so that\n  `Some.Namespace.Path1.x` and `Some.Namespace.Path2.y` can be referred to by writing only `x` and\n  `y`.\n\n* `open Some.Namespace.Path hiding def1 def2` opens all non-protected names in `Some.Namespace.Path`\n  except `def1` and `def2`.\n\n* `open Some.Namespace.Path (def1 def2)` only makes `Some.Namespace.Path.def1` and\n  `Some.Namespace.Path.def2` available without the full prefix, so `Some.Namespace.Path.def3` would\n  be unaffected.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open Some.Namespace.Path renaming def1 → def1', def2 → def2'` same as `open Some.Namespace.Path\n  (def1 def2)` but `def1`/`def2`'s names are changed to `def1'`/`def2'`.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open scoped Some.Namespace.Path1 Some.Namespace.Path2` **only** opens [scoped instances],\n  notations, and attributes from `Namespace1` and `Namespace2`; it does **not** make any other name\n  available.\n\n* `open <any of the open shapes above> in` makes the names `open`-ed visible only in the next\n  command or expression.\n\n[scoped instance]: https://lean-lang.org/theorem_proving_in_lean4/type_classes.html#scoped-instances\n(Scoped instances in Theorem Proving in Lean)\n\n\n## Examples\n\n```lean\n/-- SKI combinators https://en.wikipedia.org/wiki/SKI_combinator_calculus -/\nnamespace Combinator.Calculus\n  def I (a : α) : α := a\n  def K (a : α) : β → α := fun _ => a\n  def S (x : α → β → γ) (y : α → β) (z : α) : γ := x z (y z)\nend Combinator.Calculus\n\nsection\n  -- open everything under `Combinator.Calculus`, *i.e.* `I`, `K` and `S`,\n  -- until the section ends\n  open Combinator.Calculus\n\n  theorem SKx_eq_K : S K x = I := rfl\nend\n\n-- open everything under `Combinator.Calculus` only for the next command (the next `theorem`, here)\nopen Combinator.Calculus in\ntheorem SKx_eq_K' : S K x = I := rfl\n\nsection\n  -- open only `S` and `K` under `Combinator.Calculus`\n  open Combinator.Calculus (S K)\n\n  theorem SKxy_eq_y : S K x y = y := rfl\n\n  -- `I` is not in scope, we have to use its full path\n  theorem SKxy_eq_Iy : S K x y = Combinator.Calculus.I y := rfl\nend\n\nsection\n  open Combinator.Calculus\n    renaming\n      I → identity,\n      K → konstant\n\n  #check identity\n  #check konstant\nend\n\nsection\n  open Combinator.Calculus\n    hiding S\n\n  #check I\n  #check K\nend\n\nsection\n  namespace Demo\n    inductive MyType\n    | val\n\n    namespace N1\n      scoped infix:68 \" ≋ \" => BEq.beq\n\n      scoped instance : BEq MyType where\n        beq _ _ := true\n\n      def Alias := MyType\n    end N1\n  end Demo\n\n  -- bring `≋` and the instance in scope, but not `Alias`\n  open scoped Demo.N1\n\n  #check Demo.MyType.val == Demo.MyType.val\n  #check Demo.MyType.val ≋ Demo.MyType.val\n  -- #check Alias -- unknown identifier 'Alias'\nend\n```\n", "kind": "markdown"}}
{"character": "a", "row": 1, "column": 6, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 8}}, "contents": {"value": "Makes names from other namespaces visible without writing the namespace prefix.\n\nNames that are made available with `open` are visible within the current `section` or `namespace`\nblock. This makes referring to (type) definitions and theorems easier, but note that it can also\nmake [scoped instances], notations, and attributes from a different namespace available.\n\nThe `open` command can be used in a few different ways:\n\n* `open Some.Namespace.Path1 Some.Namespace.Path2` makes all non-protected names in\n  `Some.Namespace.Path1` and `Some.Namespace.Path2` available without the prefix, so that\n  `Some.Namespace.Path1.x` and `Some.Namespace.Path2.y` can be referred to by writing only `x` and\n  `y`.\n\n* `open Some.Namespace.Path hiding def1 def2` opens all non-protected names in `Some.Namespace.Path`\n  except `def1` and `def2`.\n\n* `open Some.Namespace.Path (def1 def2)` only makes `Some.Namespace.Path.def1` and\n  `Some.Namespace.Path.def2` available without the full prefix, so `Some.Namespace.Path.def3` would\n  be unaffected.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open Some.Namespace.Path renaming def1 → def1', def2 → def2'` same as `open Some.Namespace.Path\n  (def1 def2)` but `def1`/`def2`'s names are changed to `def1'`/`def2'`.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open scoped Some.Namespace.Path1 Some.Namespace.Path2` **only** opens [scoped instances],\n  notations, and attributes from `Namespace1` and `Namespace2`; it does **not** make any other name\n  available.\n\n* `open <any of the open shapes above> in` makes the names `open`-ed visible only in the next\n  command or expression.\n\n[scoped instance]: https://lean-lang.org/theorem_proving_in_lean4/type_classes.html#scoped-instances\n(Scoped instances in Theorem Proving in Lean)\n\n\n## Examples\n\n```lean\n/-- SKI combinators https://en.wikipedia.org/wiki/SKI_combinator_calculus -/\nnamespace Combinator.Calculus\n  def I (a : α) : α := a\n  def K (a : α) : β → α := fun _ => a\n  def S (x : α → β → γ) (y : α → β) (z : α) : γ := x z (y z)\nend Combinator.Calculus\n\nsection\n  -- open everything under `Combinator.Calculus`, *i.e.* `I`, `K` and `S`,\n  -- until the section ends\n  open Combinator.Calculus\n\n  theorem SKx_eq_K : S K x = I := rfl\nend\n\n-- open everything under `Combinator.Calculus` only for the next command (the next `theorem`, here)\nopen Combinator.Calculus in\ntheorem SKx_eq_K' : S K x = I := rfl\n\nsection\n  -- open only `S` and `K` under `Combinator.Calculus`\n  open Combinator.Calculus (S K)\n\n  theorem SKxy_eq_y : S K x y = y := rfl\n\n  -- `I` is not in scope, we have to use its full path\n  theorem SKxy_eq_Iy : S K x y = Combinator.Calculus.I y := rfl\nend\n\nsection\n  open Combinator.Calculus\n    renaming\n      I → identity,\n      K → konstant\n\n  #check identity\n  #check konstant\nend\n\nsection\n  open Combinator.Calculus\n    hiding S\n\n  #check I\n  #check K\nend\n\nsection\n  namespace Demo\n    inductive MyType\n    | val\n\n    namespace N1\n      scoped infix:68 \" ≋ \" => BEq.beq\n\n      scoped instance : BEq MyType where\n        beq _ _ := true\n\n      def Alias := MyType\n    end N1\n  end Demo\n\n  -- bring `≋` and the instance in scope, but not `Alias`\n  open scoped Demo.N1\n\n  #check Demo.MyType.val == Demo.MyType.val\n  #check Demo.MyType.val ≋ Demo.MyType.val\n  -- #check Alias -- unknown identifier 'Alias'\nend\n```\n", "kind": "markdown"}}
{"character": "t", "row": 1, "column": 7, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 8}}, "contents": {"value": "Makes names from other namespaces visible without writing the namespace prefix.\n\nNames that are made available with `open` are visible within the current `section` or `namespace`\nblock. This makes referring to (type) definitions and theorems easier, but note that it can also\nmake [scoped instances], notations, and attributes from a different namespace available.\n\nThe `open` command can be used in a few different ways:\n\n* `open Some.Namespace.Path1 Some.Namespace.Path2` makes all non-protected names in\n  `Some.Namespace.Path1` and `Some.Namespace.Path2` available without the prefix, so that\n  `Some.Namespace.Path1.x` and `Some.Namespace.Path2.y` can be referred to by writing only `x` and\n  `y`.\n\n* `open Some.Namespace.Path hiding def1 def2` opens all non-protected names in `Some.Namespace.Path`\n  except `def1` and `def2`.\n\n* `open Some.Namespace.Path (def1 def2)` only makes `Some.Namespace.Path.def1` and\n  `Some.Namespace.Path.def2` available without the full prefix, so `Some.Namespace.Path.def3` would\n  be unaffected.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open Some.Namespace.Path renaming def1 → def1', def2 → def2'` same as `open Some.Namespace.Path\n  (def1 def2)` but `def1`/`def2`'s names are changed to `def1'`/`def2'`.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open scoped Some.Namespace.Path1 Some.Namespace.Path2` **only** opens [scoped instances],\n  notations, and attributes from `Namespace1` and `Namespace2`; it does **not** make any other name\n  available.\n\n* `open <any of the open shapes above> in` makes the names `open`-ed visible only in the next\n  command or expression.\n\n[scoped instance]: https://lean-lang.org/theorem_proving_in_lean4/type_classes.html#scoped-instances\n(Scoped instances in Theorem Proving in Lean)\n\n\n## Examples\n\n```lean\n/-- SKI combinators https://en.wikipedia.org/wiki/SKI_combinator_calculus -/\nnamespace Combinator.Calculus\n  def I (a : α) : α := a\n  def K (a : α) : β → α := fun _ => a\n  def S (x : α → β → γ) (y : α → β) (z : α) : γ := x z (y z)\nend Combinator.Calculus\n\nsection\n  -- open everything under `Combinator.Calculus`, *i.e.* `I`, `K` and `S`,\n  -- until the section ends\n  open Combinator.Calculus\n\n  theorem SKx_eq_K : S K x = I := rfl\nend\n\n-- open everything under `Combinator.Calculus` only for the next command (the next `theorem`, here)\nopen Combinator.Calculus in\ntheorem SKx_eq_K' : S K x = I := rfl\n\nsection\n  -- open only `S` and `K` under `Combinator.Calculus`\n  open Combinator.Calculus (S K)\n\n  theorem SKxy_eq_y : S K x y = y := rfl\n\n  -- `I` is not in scope, we have to use its full path\n  theorem SKxy_eq_Iy : S K x y = Combinator.Calculus.I y := rfl\nend\n\nsection\n  open Combinator.Calculus\n    renaming\n      I → identity,\n      K → konstant\n\n  #check identity\n  #check konstant\nend\n\nsection\n  open Combinator.Calculus\n    hiding S\n\n  #check I\n  #check K\nend\n\nsection\n  namespace Demo\n    inductive MyType\n    | val\n\n    namespace N1\n      scoped infix:68 \" ≋ \" => BEq.beq\n\n      scoped instance : BEq MyType where\n        beq _ _ := true\n\n      def Alias := MyType\n    end N1\n  end Demo\n\n  -- bring `≋` and the instance in scope, but not `Alias`\n  open scoped Demo.N1\n\n  #check Demo.MyType.val == Demo.MyType.val\n  #check Demo.MyType.val ≋ Demo.MyType.val\n  -- #check Alias -- unknown identifier 'Alias'\nend\n```\n", "kind": "markdown"}}
{"character": "t", "row": 3, "column": 0}
{"character": "h", "row": 3, "column": 1}
{"character": "e", "row": 3, "column": 2}
{"character": "o", "row": 3, "column": 3}
{"character": "r", "row": 3, "column": 4}
{"character": "e", "row": 3, "column": 5}
{"character": "m", "row": 3, "column": 6}
{"character": " ", "row": 3, "column": 7}
{"character": "n", "row": 3, "column": 8, "range": {"start": {"line": 3, "character": 8}, "end": {"line": 3, "character": 20}}, "contents": {"value": "```lean\nnot_dvd_five (n : ℕ) : ¬5 ∣ ∑ k ∈ Finset.range (n + 1), (2 * n + 1).choose (2 * k + 1) * 2 ^ (3 * k)\n```", "kind": "markdown"}}
{"character": "o", "row": 3, "column": 9, "range": {"start": {"line": 3, "character": 8}, "end": {"line": 3, "character": 20}}, "contents": {"value": "```lean\nnot_dvd_five (n : ℕ) : ¬5 ∣ ∑ k ∈ Finset.range (n + 1), (2 * n + 1).choose (2 * k + 1) * 2 ^ (3 * k)\n```", "kind": "markdown"}}
{"character": "t", "row": 3, "column": 10, "range": {"start": {"line": 3, "character": 8}, "end": {"line": 3, "character": 20}}, "contents": {"value": "```lean\nnot_dvd_five (n : ℕ) : ¬5 ∣ ∑ k ∈ Finset.range (n + 1), (2 * n + 1).choose (2 * k + 1) * 2 ^ (3 * k)\n```", "kind": "markdown"}}
{"character": "_", "row": 3, "column": 11, "range": {"start": {"line": 3, "character": 8}, "end": {"line": 3, "character": 20}}, "contents": {"value": "```lean\nnot_dvd_five (n : ℕ) : ¬5 ∣ ∑ k ∈ Finset.range (n + 1), (2 * n + 1).choose (2 * k + 1) * 2 ^ (3 * k)\n```", "kind": "markdown"}}
{"character": "d", "row": 3, "column": 12, "range": {"start": {"line": 3, "character": 8}, "end": {"line": 3, "character": 20}}, "contents": {"value": "```lean\nnot_dvd_five (n : ℕ) : ¬5 ∣ ∑ k ∈ Finset.range (n + 1), (2 * n + 1).choose (2 * k + 1) * 2 ^ (3 * k)\n```", "kind": "markdown"}}
{"character": "v", "row": 3, "column": 13, "range": {"start": {"line": 3, "character": 8}, "end": {"line": 3, "character": 20}}, "contents": {"value": "```lean\nnot_dvd_five (n : ℕ) : ¬5 ∣ ∑ k ∈ Finset.range (n + 1), (2 * n + 1).choose (2 * k + 1) * 2 ^ (3 * k)\n```", "kind": "markdown"}}
{"character": "d", "row": 3, "column": 14, "range": {"start": {"line": 3, "character": 8}, "end": {"line": 3, "character": 20}}, "contents": {"value": "```lean\nnot_dvd_five (n : ℕ) : ¬5 ∣ ∑ k ∈ Finset.range (n + 1), (2 * n + 1).choose (2 * k + 1) * 2 ^ (3 * k)\n```", "kind": "markdown"}}
{"character": "_", "row": 3, "column": 15, "range": {"start": {"line": 3, "character": 8}, "end": {"line": 3, "character": 20}}, "contents": {"value": "```lean\nnot_dvd_five (n : ℕ) : ¬5 ∣ ∑ k ∈ Finset.range (n + 1), (2 * n + 1).choose (2 * k + 1) * 2 ^ (3 * k)\n```", "kind": "markdown"}}
{"character": "f", "row": 3, "column": 16, "range": {"start": {"line": 3, "character": 8}, "end": {"line": 3, "character": 20}}, "contents": {"value": "```lean\nnot_dvd_five (n : ℕ) : ¬5 ∣ ∑ k ∈ Finset.range (n + 1), (2 * n + 1).choose (2 * k + 1) * 2 ^ (3 * k)\n```", "kind": "markdown"}}
{"character": "i", "row": 3, "column": 17, "range": {"start": {"line": 3, "character": 8}, "end": {"line": 3, "character": 20}}, "contents": {"value": "```lean\nnot_dvd_five (n : ℕ) : ¬5 ∣ ∑ k ∈ Finset.range (n + 1), (2 * n + 1).choose (2 * k + 1) * 2 ^ (3 * k)\n```", "kind": "markdown"}}
{"character": "v", "row": 3, "column": 18, "range": {"start": {"line": 3, "character": 8}, "end": {"line": 3, "character": 20}}, "contents": {"value": "```lean\nnot_dvd_five (n : ℕ) : ¬5 ∣ ∑ k ∈ Finset.range (n + 1), (2 * n + 1).choose (2 * k + 1) * 2 ^ (3 * k)\n```", "kind": "markdown"}}
{"character": "e", "row": 3, "column": 19, "range": {"start": {"line": 3, "character": 8}, "end": {"line": 3, "character": 20}}, "contents": {"value": "```lean\nnot_dvd_five (n : ℕ) : ¬5 ∣ ∑ k ∈ Finset.range (n + 1), (2 * n + 1).choose (2 * k + 1) * 2 ^ (3 * k)\n```", "kind": "markdown"}}
{"character": " ", "row": 3, "column": 20}
{"character": "(", "row": 3, "column": 21, "range": {"start": {"line": 3, "character": 21}, "end": {"line": 3, "character": 28}}, "contents": {"value": "Explicit binder, like `(x y : A)` or `(x y)`.\nDefault values can be specified using `(x : A := v)` syntax, and tactics using `(x : A := by tac)`.\n", "kind": "markdown"}}
{"character": "n", "row": 3, "column": 22, "range": {"start": {"line": 3, "character": 22}, "end": {"line": 3, "character": 23}}, "contents": {"value": "```lean\nn : ℕ\n```", "kind": "markdown"}}
{"character": " ", "row": 3, "column": 23}
{"character": ":", "row": 3, "column": 24, "range": {"start": {"line": 3, "character": 21}, "end": {"line": 3, "character": 28}}, "contents": {"value": "Explicit binder, like `(x y : A)` or `(x y)`.\nDefault values can be specified using `(x : A := v)` syntax, and tactics using `(x : A := by tac)`.\n", "kind": "markdown"}}
{"character": " ", "row": 3, "column": 25}
{"character": "ℕ", "row": 3, "column": 26, "range": {"start": {"line": 3, "character": 26}, "end": {"line": 3, "character": 27}}, "contents": {"value": "```lean\nNat : Type\n```\n***\nThe natural numbers, starting at zero.\n\nThis type is special-cased by both the kernel and the compiler, and overridden with an efficient\nimplementation. Both use a fast arbitrary-precision arithmetic library (usually\n[GMP](https://gmplib.org/)); at runtime, `Nat` values that are sufficiently small are unboxed.\n\n***\n*import Init.Prelude*", "kind": "markdown"}}
{"character": ")", "row": 3, "column": 27, "range": {"start": {"line": 3, "character": 21}, "end": {"line": 3, "character": 28}}, "contents": {"value": "Explicit binder, like `(x y : A)` or `(x y)`.\nDefault values can be specified using `(x : A := v)` syntax, and tactics using `(x : A := by tac)`.\n", "kind": "markdown"}}
{"character": " ", "row": 3, "column": 28}
{"character": ":", "row": 3, "column": 29, "range": {"start": {"line": 3, "character": 21}, "end": {"line": 3, "character": 108}}, "contents": {"value": "`declSig` matches the signature of a declaration with required type: a list of binders and then `: type` ", "kind": "markdown"}}
{"character": " ", "row": 3, "column": 30}
{"character": "¬", "row": 3, "column": 31, "range": {"start": {"line": 3, "character": 31}, "end": {"line": 3, "character": 108}}, "contents": {"value": "```lean\nProp\n```\n***\n`Not p`, or `¬p`, is the negation of `p`. It is defined to be `p → False`,\nso if your goal is `¬p` you can use `intro h` to turn the goal into\n`h : p ⊢ False`, and if you have `hn : ¬p` and `h : p` then `hn h : False`\nand `(hn h).elim` will prove anything.\nFor more information: [Propositional Logic](https://lean-lang.org/theorem_proving_in_lean4/propositions_and_proofs.html#propositional-logic)\n\n\nConventions for notations in identifiers:\n\n * The recommended spelling of `¬` in identifiers is `not`.", "kind": "markdown"}}
{"character": "5", "row": 3, "column": 32, "range": {"start": {"line": 3, "character": 32}, "end": {"line": 3, "character": 33}}, "contents": {"value": "```lean\n5 : ℕ\n```", "kind": "markdown"}}
{"character": " ", "row": 3, "column": 33, "range": {"start": {"line": 3, "character": 32}, "end": {"line": 3, "character": 108}}, "contents": {"value": "```lean\nProp\n```\n***\nDivisibility. `a ∣ b` (typed as `\\|`) means that there is some `c` such that `b = a * c`. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `∣` in identifiers is `dvd`.", "kind": "markdown"}}
{"character": "∣", "row": 3, "column": 34, "range": {"start": {"line": 3, "character": 32}, "end": {"line": 3, "character": 108}}, "contents": {"value": "```lean\nProp\n```\n***\nDivisibility. `a ∣ b` (typed as `\\|`) means that there is some `c` such that `b = a * c`. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `∣` in identifiers is `dvd`.", "kind": "markdown"}}
{"character": " ", "row": 3, "column": 35, "range": {"start": {"line": 3, "character": 32}, "end": {"line": 3, "character": 108}}, "contents": {"value": "```lean\nProp\n```\n***\nDivisibility. `a ∣ b` (typed as `\\|`) means that there is some `c` such that `b = a * c`. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `∣` in identifiers is `dvd`.", "kind": "markdown"}}
{"character": "∑", "row": 3, "column": 36, "range": {"start": {"line": 3, "character": 36}, "end": {"line": 3, "character": 108}}, "contents": {"value": "```lean\nℕ\n```\n***\n- `∑ x, f x` is notation for `Finset.sum Finset.univ f`. It is the sum of `f x`,\n  where `x` ranges over the finite domain of `f`.\n- `∑ x ∈ s, f x` is notation for `Finset.sum s f`. It is the sum of `f x`,\n  where `x` ranges over the finite set `s` (either a `Finset` or a `Set` with a `Fintype` instance).\n- `∑ x ∈ s with p x, f x` is notation for `Finset.sum (Finset.filter p s) f`.\n- `∑ (x ∈ s) (y ∈ t), f x y` is notation for `Finset.sum (s ×ˢ t) (fun ⟨x, y⟩ ↦ f x y)`.\n\nThese support destructuring, for example `∑ ⟨x, y⟩ ∈ s ×ˢ t, f x y`.\n\nNotation: `\"∑\" bigOpBinders* (\"with\" term)? \",\" term` ", "kind": "markdown"}}
{"character": " ", "row": 3, "column": 37, "range": {"start": {"line": 3, "character": 36}, "end": {"line": 3, "character": 108}}, "contents": {"value": "```lean\nℕ\n```\n***\n- `∑ x, f x` is notation for `Finset.sum Finset.univ f`. It is the sum of `f x`,\n  where `x` ranges over the finite domain of `f`.\n- `∑ x ∈ s, f x` is notation for `Finset.sum s f`. It is the sum of `f x`,\n  where `x` ranges over the finite set `s` (either a `Finset` or a `Set` with a `Fintype` instance).\n- `∑ x ∈ s with p x, f x` is notation for `Finset.sum (Finset.filter p s) f`.\n- `∑ (x ∈ s) (y ∈ t), f x y` is notation for `Finset.sum (s ×ˢ t) (fun ⟨x, y⟩ ↦ f x y)`.\n\nThese support destructuring, for example `∑ ⟨x, y⟩ ∈ s ×ˢ t, f x y`.\n\nNotation: `\"∑\" bigOpBinders* (\"with\" term)? \",\" term` ", "kind": "markdown"}}
{"character": "k", "row": 3, "column": 38, "range": {"start": {"line": 3, "character": 38}, "end": {"line": 3, "character": 39}}, "contents": {"value": "```lean\nk : ℕ\n```", "kind": "markdown"}}
{"character": " ", "row": 3, "column": 39, "range": {"start": {"line": 3, "character": 36}, "end": {"line": 3, "character": 108}}, "contents": {"value": "```lean\nℕ\n```\n***\n- `∑ x, f x` is notation for `Finset.sum Finset.univ f`. It is the sum of `f x`,\n  where `x` ranges over the finite domain of `f`.\n- `∑ x ∈ s, f x` is notation for `Finset.sum s f`. It is the sum of `f x`,\n  where `x` ranges over the finite set `s` (either a `Finset` or a `Set` with a `Fintype` instance).\n- `∑ x ∈ s with p x, f x` is notation for `Finset.sum (Finset.filter p s) f`.\n- `∑ (x ∈ s) (y ∈ t), f x y` is notation for `Finset.sum (s ×ˢ t) (fun ⟨x, y⟩ ↦ f x y)`.\n\nThese support destructuring, for example `∑ ⟨x, y⟩ ∈ s ×ˢ t, f x y`.\n\nNotation: `\"∑\" bigOpBinders* (\"with\" term)? \",\" term` ", "kind": "markdown"}}
{"character": "∈", "row": 3, "column": 40, "range": {"start": {"line": 3, "character": 40}, "end": {"line": 3, "character": 62}}, "contents": {"value": "Declare `∀ x ∈ y, ...` as syntax for `∀ x, x ∈ y → ...` and `∃ x ∈ y, ...` as syntax for\n`∃ x, x ∈ y ∧ ...` ", "kind": "markdown"}}
{"character": " ", "row": 3, "column": 41, "range": {"start": {"line": 3, "character": 36}, "end": {"line": 3, "character": 108}}, "contents": {"value": "```lean\nℕ\n```\n***\n- `∑ x, f x` is notation for `Finset.sum Finset.univ f`. It is the sum of `f x`,\n  where `x` ranges over the finite domain of `f`.\n- `∑ x ∈ s, f x` is notation for `Finset.sum s f`. It is the sum of `f x`,\n  where `x` ranges over the finite set `s` (either a `Finset` or a `Set` with a `Fintype` instance).\n- `∑ x ∈ s with p x, f x` is notation for `Finset.sum (Finset.filter p s) f`.\n- `∑ (x ∈ s) (y ∈ t), f x y` is notation for `Finset.sum (s ×ˢ t) (fun ⟨x, y⟩ ↦ f x y)`.\n\nThese support destructuring, for example `∑ ⟨x, y⟩ ∈ s ×ˢ t, f x y`.\n\nNotation: `\"∑\" bigOpBinders* (\"with\" term)? \",\" term` ", "kind": "markdown"}}
{"character": "F", "row": 3, "column": 42, "range": {"start": {"line": 3, "character": 42}, "end": {"line": 3, "character": 54}}, "contents": {"value": "```lean\nFinset.range (n : ℕ) : Finset ℕ\n```\n***\n`range n` is the set of natural numbers less than `n`. \n***\n*import Mathlib.Data.Finset.Range*", "kind": "markdown"}}
{"character": "i", "row": 3, "column": 43, "range": {"start": {"line": 3, "character": 42}, "end": {"line": 3, "character": 54}}, "contents": {"value": "```lean\nFinset.range (n : ℕ) : Finset ℕ\n```\n***\n`range n` is the set of natural numbers less than `n`. \n***\n*import Mathlib.Data.Finset.Range*", "kind": "markdown"}}
{"character": "n", "row": 3, "column": 44, "range": {"start": {"line": 3, "character": 42}, "end": {"line": 3, "character": 54}}, "contents": {"value": "```lean\nFinset.range (n : ℕ) : Finset ℕ\n```\n***\n`range n` is the set of natural numbers less than `n`. \n***\n*import Mathlib.Data.Finset.Range*", "kind": "markdown"}}
{"character": "s", "row": 3, "column": 45, "range": {"start": {"line": 3, "character": 42}, "end": {"line": 3, "character": 54}}, "contents": {"value": "```lean\nFinset.range (n : ℕ) : Finset ℕ\n```\n***\n`range n` is the set of natural numbers less than `n`. \n***\n*import Mathlib.Data.Finset.Range*", "kind": "markdown"}}
{"character": "e", "row": 3, "column": 46, "range": {"start": {"line": 3, "character": 42}, "end": {"line": 3, "character": 54}}, "contents": {"value": "```lean\nFinset.range (n : ℕ) : Finset ℕ\n```\n***\n`range n` is the set of natural numbers less than `n`. \n***\n*import Mathlib.Data.Finset.Range*", "kind": "markdown"}}
{"character": "t", "row": 3, "column": 47, "range": {"start": {"line": 3, "character": 42}, "end": {"line": 3, "character": 54}}, "contents": {"value": "```lean\nFinset.range (n : ℕ) : Finset ℕ\n```\n***\n`range n` is the set of natural numbers less than `n`. \n***\n*import Mathlib.Data.Finset.Range*", "kind": "markdown"}}
{"character": ".", "row": 3, "column": 48, "range": {"start": {"line": 3, "character": 42}, "end": {"line": 3, "character": 54}}, "contents": {"value": "```lean\nFinset.range (n : ℕ) : Finset ℕ\n```\n***\n`range n` is the set of natural numbers less than `n`. \n***\n*import Mathlib.Data.Finset.Range*", "kind": "markdown"}}
{"character": "r", "row": 3, "column": 49, "range": {"start": {"line": 3, "character": 42}, "end": {"line": 3, "character": 54}}, "contents": {"value": "```lean\nFinset.range (n : ℕ) : Finset ℕ\n```\n***\n`range n` is the set of natural numbers less than `n`. \n***\n*import Mathlib.Data.Finset.Range*", "kind": "markdown"}}
{"character": "a", "row": 3, "column": 50, "range": {"start": {"line": 3, "character": 42}, "end": {"line": 3, "character": 54}}, "contents": {"value": "```lean\nFinset.range (n : ℕ) : Finset ℕ\n```\n***\n`range n` is the set of natural numbers less than `n`. \n***\n*import Mathlib.Data.Finset.Range*", "kind": "markdown"}}
{"character": "n", "row": 3, "column": 51, "range": {"start": {"line": 3, "character": 42}, "end": {"line": 3, "character": 54}}, "contents": {"value": "```lean\nFinset.range (n : ℕ) : Finset ℕ\n```\n***\n`range n` is the set of natural numbers less than `n`. \n***\n*import Mathlib.Data.Finset.Range*", "kind": "markdown"}}
{"character": "g", "row": 3, "column": 52, "range": {"start": {"line": 3, "character": 42}, "end": {"line": 3, "character": 54}}, "contents": {"value": "```lean\nFinset.range (n : ℕ) : Finset ℕ\n```\n***\n`range n` is the set of natural numbers less than `n`. \n***\n*import Mathlib.Data.Finset.Range*", "kind": "markdown"}}
{"character": "e", "row": 3, "column": 53, "range": {"start": {"line": 3, "character": 42}, "end": {"line": 3, "character": 54}}, "contents": {"value": "```lean\nFinset.range (n : ℕ) : Finset ℕ\n```\n***\n`range n` is the set of natural numbers less than `n`. \n***\n*import Mathlib.Data.Finset.Range*", "kind": "markdown"}}
{"character": " ", "row": 3, "column": 54, "range": {"start": {"line": 3, "character": 42}, "end": {"line": 3, "character": 62}}, "contents": {"value": "```lean\nFinset ℕ\n```", "kind": "markdown"}}
{"character": "(", "row": 3, "column": 55, "range": {"start": {"line": 3, "character": 55}, "end": {"line": 3, "character": 62}}, "contents": {"value": "```lean\nℕ\n```\n***\nParentheses, used for grouping expressions (e.g., `a * (b + c)`).\nCan also be used for creating simple functions when combined with `·`. Here are some examples:\n  - `(· + 1)` is shorthand for `fun x => x + 1`\n  - `(· + ·)` is shorthand for `fun x y => x + y`\n  - `(f · a b)` is shorthand for `fun x => f x a b`\n  - `(h (· + 1) ·)` is shorthand for `fun x => h (fun y => y + 1) x`\n  - also applies to other parentheses-like notations such as `(·, 1)`\n", "kind": "markdown"}}
{"character": "n", "row": 3, "column": 56, "range": {"start": {"line": 3, "character": 56}, "end": {"line": 3, "character": 57}}, "contents": {"value": "```lean\nn : ℕ\n```", "kind": "markdown"}}
{"character": " ", "row": 3, "column": 57, "range": {"start": {"line": 3, "character": 56}, "end": {"line": 3, "character": 61}}, "contents": {"value": "```lean\nℕ\n```\n***\n`a + b` computes the sum of `a` and `b`.\nThe meaning of this notation is type-dependent. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `+` in identifiers is `add`.", "kind": "markdown"}}
{"character": "+", "row": 3, "column": 58, "range": {"start": {"line": 3, "character": 56}, "end": {"line": 3, "character": 61}}, "contents": {"value": "```lean\nℕ\n```\n***\n`a + b` computes the sum of `a` and `b`.\nThe meaning of this notation is type-dependent. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `+` in identifiers is `add`.", "kind": "markdown"}}
{"character": " ", "row": 3, "column": 59, "range": {"start": {"line": 3, "character": 56}, "end": {"line": 3, "character": 61}}, "contents": {"value": "```lean\nℕ\n```\n***\n`a + b` computes the sum of `a` and `b`.\nThe meaning of this notation is type-dependent. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `+` in identifiers is `add`.", "kind": "markdown"}}
{"character": "1", "row": 3, "column": 60, "range": {"start": {"line": 3, "character": 60}, "end": {"line": 3, "character": 61}}, "contents": {"value": "```lean\n1 : ℕ\n```", "kind": "markdown"}}
{"character": ")", "row": 3, "column": 61, "range": {"start": {"line": 3, "character": 55}, "end": {"line": 3, "character": 62}}, "contents": {"value": "```lean\nℕ\n```\n***\nParentheses, used for grouping expressions (e.g., `a * (b + c)`).\nCan also be used for creating simple functions when combined with `·`. Here are some examples:\n  - `(· + 1)` is shorthand for `fun x => x + 1`\n  - `(· + ·)` is shorthand for `fun x y => x + y`\n  - `(f · a b)` is shorthand for `fun x => f x a b`\n  - `(h (· + 1) ·)` is shorthand for `fun x => h (fun y => y + 1) x`\n  - also applies to other parentheses-like notations such as `(·, 1)`\n", "kind": "markdown"}}
{"character": ",", "row": 3, "column": 62, "range": {"start": {"line": 3, "character": 36}, "end": {"line": 3, "character": 108}}, "contents": {"value": "```lean\nℕ\n```\n***\n- `∑ x, f x` is notation for `Finset.sum Finset.univ f`. It is the sum of `f x`,\n  where `x` ranges over the finite domain of `f`.\n- `∑ x ∈ s, f x` is notation for `Finset.sum s f`. It is the sum of `f x`,\n  where `x` ranges over the finite set `s` (either a `Finset` or a `Set` with a `Fintype` instance).\n- `∑ x ∈ s with p x, f x` is notation for `Finset.sum (Finset.filter p s) f`.\n- `∑ (x ∈ s) (y ∈ t), f x y` is notation for `Finset.sum (s ×ˢ t) (fun ⟨x, y⟩ ↦ f x y)`.\n\nThese support destructuring, for example `∑ ⟨x, y⟩ ∈ s ×ˢ t, f x y`.\n\nNotation: `\"∑\" bigOpBinders* (\"with\" term)? \",\" term` ", "kind": "markdown"}}
{"character": " ", "row": 3, "column": 63, "range": {"start": {"line": 3, "character": 36}, "end": {"line": 3, "character": 108}}, "contents": {"value": "```lean\nℕ\n```\n***\n- `∑ x, f x` is notation for `Finset.sum Finset.univ f`. It is the sum of `f x`,\n  where `x` ranges over the finite domain of `f`.\n- `∑ x ∈ s, f x` is notation for `Finset.sum s f`. It is the sum of `f x`,\n  where `x` ranges over the finite set `s` (either a `Finset` or a `Set` with a `Fintype` instance).\n- `∑ x ∈ s with p x, f x` is notation for `Finset.sum (Finset.filter p s) f`.\n- `∑ (x ∈ s) (y ∈ t), f x y` is notation for `Finset.sum (s ×ˢ t) (fun ⟨x, y⟩ ↦ f x y)`.\n\nThese support destructuring, for example `∑ ⟨x, y⟩ ∈ s ×ˢ t, f x y`.\n\nNotation: `\"∑\" bigOpBinders* (\"with\" term)? \",\" term` ", "kind": "markdown"}}
{"character": "(", "row": 3, "column": 64, "range": {"start": {"line": 3, "character": 64}, "end": {"line": 3, "character": 75}}, "contents": {"value": "```lean\nℕ\n```\n***\nParentheses, used for grouping expressions (e.g., `a * (b + c)`).\nCan also be used for creating simple functions when combined with `·`. Here are some examples:\n  - `(· + 1)` is shorthand for `fun x => x + 1`\n  - `(· + ·)` is shorthand for `fun x y => x + y`\n  - `(f · a b)` is shorthand for `fun x => f x a b`\n  - `(h (· + 1) ·)` is shorthand for `fun x => h (fun y => y + 1) x`\n  - also applies to other parentheses-like notations such as `(·, 1)`\n", "kind": "markdown"}}
{"character": "2", "row": 3, "column": 65, "range": {"start": {"line": 3, "character": 65}, "end": {"line": 3, "character": 66}}, "contents": {"value": "```lean\n2 : ℕ\n```", "kind": "markdown"}}
{"character": " ", "row": 3, "column": 66, "range": {"start": {"line": 3, "character": 65}, "end": {"line": 3, "character": 70}}, "contents": {"value": "```lean\nℕ\n```\n***\n`a * b` computes the product of `a` and `b`.\nThe meaning of this notation is type-dependent. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `*` in identifiers is `mul`.", "kind": "markdown"}}
{"character": "*", "row": 3, "column": 67, "range": {"start": {"line": 3, "character": 65}, "end": {"line": 3, "character": 70}}, "contents": {"value": "```lean\nℕ\n```\n***\n`a * b` computes the product of `a` and `b`.\nThe meaning of this notation is type-dependent. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `*` in identifiers is `mul`.", "kind": "markdown"}}
{"character": " ", "row": 3, "column": 68, "range": {"start": {"line": 3, "character": 65}, "end": {"line": 3, "character": 70}}, "contents": {"value": "```lean\nℕ\n```\n***\n`a * b` computes the product of `a` and `b`.\nThe meaning of this notation is type-dependent. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `*` in identifiers is `mul`.", "kind": "markdown"}}
{"character": "n", "row": 3, "column": 69, "range": {"start": {"line": 3, "character": 69}, "end": {"line": 3, "character": 70}}, "contents": {"value": "```lean\nn : ℕ\n```", "kind": "markdown"}}
{"character": " ", "row": 3, "column": 70, "range": {"start": {"line": 3, "character": 65}, "end": {"line": 3, "character": 74}}, "contents": {"value": "```lean\nℕ\n```\n***\n`a + b` computes the sum of `a` and `b`.\nThe meaning of this notation is type-dependent. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `+` in identifiers is `add`.", "kind": "markdown"}}
{"character": "+", "row": 3, "column": 71, "range": {"start": {"line": 3, "character": 65}, "end": {"line": 3, "character": 74}}, "contents": {"value": "```lean\nℕ\n```\n***\n`a + b` computes the sum of `a` and `b`.\nThe meaning of this notation is type-dependent. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `+` in identifiers is `add`.", "kind": "markdown"}}
{"character": " ", "row": 3, "column": 72, "range": {"start": {"line": 3, "character": 65}, "end": {"line": 3, "character": 74}}, "contents": {"value": "```lean\nℕ\n```\n***\n`a + b` computes the sum of `a` and `b`.\nThe meaning of this notation is type-dependent. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `+` in identifiers is `add`.", "kind": "markdown"}}
{"character": "1", "row": 3, "column": 73, "range": {"start": {"line": 3, "character": 73}, "end": {"line": 3, "character": 74}}, "contents": {"value": "```lean\n1 : ℕ\n```", "kind": "markdown"}}
{"character": ")", "row": 3, "column": 74, "range": {"start": {"line": 3, "character": 64}, "end": {"line": 3, "character": 75}}, "contents": {"value": "```lean\nℕ\n```\n***\nParentheses, used for grouping expressions (e.g., `a * (b + c)`).\nCan also be used for creating simple functions when combined with `·`. Here are some examples:\n  - `(· + 1)` is shorthand for `fun x => x + 1`\n  - `(· + ·)` is shorthand for `fun x y => x + y`\n  - `(f · a b)` is shorthand for `fun x => f x a b`\n  - `(h (· + 1) ·)` is shorthand for `fun x => h (fun y => y + 1) x`\n  - also applies to other parentheses-like notations such as `(·, 1)`\n", "kind": "markdown"}}
{"character": ".", "row": 3, "column": 75, "range": {"start": {"line": 3, "character": 64}, "end": {"line": 3, "character": 82}}, "contents": {"value": "The *extended field notation* `e.f` is roughly short for `T.f e` where `T` is the type of `e`.\nMore precisely,\n* if `e` is of a function type, `e.f` is translated to `Function.f (p := e)`\n  where `p` is the first explicit parameter of function type\n* if `e` is of a named type `T ...` and there is a declaration `T.f` (possibly from `export`),\n  `e.f` is translated to `T.f (p := e)` where `p` is the first explicit parameter of type `T ...`\n* otherwise, if `e` is of a structure type,\n  the above is repeated for every base type of the structure.\n\nThe field index notation `e.i`, where `i` is a positive number,\nis short for accessing the `i`-th field (1-indexed) of `e` if it is of a structure type. ", "kind": "markdown"}}
{"character": "c", "row": 3, "column": 76, "range": {"start": {"line": 3, "character": 76}, "end": {"line": 3, "character": 82}}, "contents": {"value": "```lean\nNat.choose : ℕ → ℕ → ℕ\n```\n***\n`choose n k` is the number of `k`-element subsets in an `n`-element set. Also known as binomial\ncoefficients. For the fact that this is the number of `k`-element-subsets of an `n`-element\nset, see `Fintype.card_powersetCard`. \n***\n*import Mathlib.Data.Nat.Choose.Basic*", "kind": "markdown"}}
{"character": "h", "row": 3, "column": 77, "range": {"start": {"line": 3, "character": 76}, "end": {"line": 3, "character": 82}}, "contents": {"value": "```lean\nNat.choose : ℕ → ℕ → ℕ\n```\n***\n`choose n k` is the number of `k`-element subsets in an `n`-element set. Also known as binomial\ncoefficients. For the fact that this is the number of `k`-element-subsets of an `n`-element\nset, see `Fintype.card_powersetCard`. \n***\n*import Mathlib.Data.Nat.Choose.Basic*", "kind": "markdown"}}
{"character": "o", "row": 3, "column": 78, "range": {"start": {"line": 3, "character": 76}, "end": {"line": 3, "character": 82}}, "contents": {"value": "```lean\nNat.choose : ℕ → ℕ → ℕ\n```\n***\n`choose n k` is the number of `k`-element subsets in an `n`-element set. Also known as binomial\ncoefficients. For the fact that this is the number of `k`-element-subsets of an `n`-element\nset, see `Fintype.card_powersetCard`. \n***\n*import Mathlib.Data.Nat.Choose.Basic*", "kind": "markdown"}}
{"character": "o", "row": 3, "column": 79, "range": {"start": {"line": 3, "character": 76}, "end": {"line": 3, "character": 82}}, "contents": {"value": "```lean\nNat.choose : ℕ → ℕ → ℕ\n```\n***\n`choose n k` is the number of `k`-element subsets in an `n`-element set. Also known as binomial\ncoefficients. For the fact that this is the number of `k`-element-subsets of an `n`-element\nset, see `Fintype.card_powersetCard`. \n***\n*import Mathlib.Data.Nat.Choose.Basic*", "kind": "markdown"}}
{"character": "s", "row": 3, "column": 80, "range": {"start": {"line": 3, "character": 76}, "end": {"line": 3, "character": 82}}, "contents": {"value": "```lean\nNat.choose : ℕ → ℕ → ℕ\n```\n***\n`choose n k` is the number of `k`-element subsets in an `n`-element set. Also known as binomial\ncoefficients. For the fact that this is the number of `k`-element-subsets of an `n`-element\nset, see `Fintype.card_powersetCard`. \n***\n*import Mathlib.Data.Nat.Choose.Basic*", "kind": "markdown"}}
{"character": "e", "row": 3, "column": 81, "range": {"start": {"line": 3, "character": 76}, "end": {"line": 3, "character": 82}}, "contents": {"value": "```lean\nNat.choose : ℕ → ℕ → ℕ\n```\n***\n`choose n k` is the number of `k`-element subsets in an `n`-element set. Also known as binomial\ncoefficients. For the fact that this is the number of `k`-element-subsets of an `n`-element\nset, see `Fintype.card_powersetCard`. \n***\n*import Mathlib.Data.Nat.Choose.Basic*", "kind": "markdown"}}
{"character": " ", "row": 3, "column": 82, "range": {"start": {"line": 3, "character": 64}, "end": {"line": 3, "character": 94}}, "contents": {"value": "```lean\nℕ\n```", "kind": "markdown"}}
{"character": "(", "row": 3, "column": 83, "range": {"start": {"line": 3, "character": 83}, "end": {"line": 3, "character": 94}}, "contents": {"value": "```lean\nℕ\n```\n***\nParentheses, used for grouping expressions (e.g., `a * (b + c)`).\nCan also be used for creating simple functions when combined with `·`. Here are some examples:\n  - `(· + 1)` is shorthand for `fun x => x + 1`\n  - `(· + ·)` is shorthand for `fun x y => x + y`\n  - `(f · a b)` is shorthand for `fun x => f x a b`\n  - `(h (· + 1) ·)` is shorthand for `fun x => h (fun y => y + 1) x`\n  - also applies to other parentheses-like notations such as `(·, 1)`\n", "kind": "markdown"}}
{"character": "2", "row": 3, "column": 84, "range": {"start": {"line": 3, "character": 84}, "end": {"line": 3, "character": 85}}, "contents": {"value": "```lean\n2 : ℕ\n```", "kind": "markdown"}}
{"character": " ", "row": 3, "column": 85, "range": {"start": {"line": 3, "character": 84}, "end": {"line": 3, "character": 89}}, "contents": {"value": "```lean\nℕ\n```\n***\n`a * b` computes the product of `a` and `b`.\nThe meaning of this notation is type-dependent. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `*` in identifiers is `mul`.", "kind": "markdown"}}
{"character": "*", "row": 3, "column": 86, "range": {"start": {"line": 3, "character": 84}, "end": {"line": 3, "character": 89}}, "contents": {"value": "```lean\nℕ\n```\n***\n`a * b` computes the product of `a` and `b`.\nThe meaning of this notation is type-dependent. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `*` in identifiers is `mul`.", "kind": "markdown"}}
{"character": " ", "row": 3, "column": 87, "range": {"start": {"line": 3, "character": 84}, "end": {"line": 3, "character": 89}}, "contents": {"value": "```lean\nℕ\n```\n***\n`a * b` computes the product of `a` and `b`.\nThe meaning of this notation is type-dependent. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `*` in identifiers is `mul`.", "kind": "markdown"}}
{"character": "k", "row": 3, "column": 88, "range": {"start": {"line": 3, "character": 88}, "end": {"line": 3, "character": 89}}, "contents": {"value": "```lean\nk : ℕ\n```", "kind": "markdown"}}
{"character": " ", "row": 3, "column": 89, "range": {"start": {"line": 3, "character": 84}, "end": {"line": 3, "character": 93}}, "contents": {"value": "```lean\nℕ\n```\n***\n`a + b` computes the sum of `a` and `b`.\nThe meaning of this notation is type-dependent. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `+` in identifiers is `add`.", "kind": "markdown"}}
{"character": "+", "row": 3, "column": 90, "range": {"start": {"line": 3, "character": 84}, "end": {"line": 3, "character": 93}}, "contents": {"value": "```lean\nℕ\n```\n***\n`a + b` computes the sum of `a` and `b`.\nThe meaning of this notation is type-dependent. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `+` in identifiers is `add`.", "kind": "markdown"}}
{"character": " ", "row": 3, "column": 91, "range": {"start": {"line": 3, "character": 84}, "end": {"line": 3, "character": 93}}, "contents": {"value": "```lean\nℕ\n```\n***\n`a + b` computes the sum of `a` and `b`.\nThe meaning of this notation is type-dependent. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `+` in identifiers is `add`.", "kind": "markdown"}}
{"character": "1", "row": 3, "column": 92, "range": {"start": {"line": 3, "character": 92}, "end": {"line": 3, "character": 93}}, "contents": {"value": "```lean\n1 : ℕ\n```", "kind": "markdown"}}
{"character": ")", "row": 3, "column": 93, "range": {"start": {"line": 3, "character": 83}, "end": {"line": 3, "character": 94}}, "contents": {"value": "```lean\nℕ\n```\n***\nParentheses, used for grouping expressions (e.g., `a * (b + c)`).\nCan also be used for creating simple functions when combined with `·`. Here are some examples:\n  - `(· + 1)` is shorthand for `fun x => x + 1`\n  - `(· + ·)` is shorthand for `fun x y => x + y`\n  - `(f · a b)` is shorthand for `fun x => f x a b`\n  - `(h (· + 1) ·)` is shorthand for `fun x => h (fun y => y + 1) x`\n  - also applies to other parentheses-like notations such as `(·, 1)`\n", "kind": "markdown"}}
{"character": " ", "row": 3, "column": 94, "range": {"start": {"line": 3, "character": 64}, "end": {"line": 3, "character": 108}}, "contents": {"value": "```lean\nℕ\n```\n***\n`a * b` computes the product of `a` and `b`.\nThe meaning of this notation is type-dependent. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `*` in identifiers is `mul`.", "kind": "markdown"}}
{"character": "*", "row": 3, "column": 95, "range": {"start": {"line": 3, "character": 64}, "end": {"line": 3, "character": 108}}, "contents": {"value": "```lean\nℕ\n```\n***\n`a * b` computes the product of `a` and `b`.\nThe meaning of this notation is type-dependent. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `*` in identifiers is `mul`.", "kind": "markdown"}}
{"character": " ", "row": 3, "column": 96, "range": {"start": {"line": 3, "character": 64}, "end": {"line": 3, "character": 108}}, "contents": {"value": "```lean\nℕ\n```\n***\n`a * b` computes the product of `a` and `b`.\nThe meaning of this notation is type-dependent. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `*` in identifiers is `mul`.", "kind": "markdown"}}
{"character": "2", "row": 3, "column": 97, "range": {"start": {"line": 3, "character": 97}, "end": {"line": 3, "character": 98}}, "contents": {"value": "```lean\n2 : ℕ\n```", "kind": "markdown"}}
{"character": " ", "row": 3, "column": 98, "range": {"start": {"line": 3, "character": 97}, "end": {"line": 3, "character": 108}}, "contents": {"value": "```lean\nℕ\n```\n***\n`a ^ b` computes `a` to the power of `b`.\nThe meaning of this notation is type-dependent. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `^` in identifiers is `pow`.", "kind": "markdown"}}
{"character": "^", "row": 3, "column": 99, "range": {"start": {"line": 3, "character": 97}, "end": {"line": 3, "character": 108}}, "contents": {"value": "```lean\nℕ\n```\n***\n`a ^ b` computes `a` to the power of `b`.\nThe meaning of this notation is type-dependent. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `^` in identifiers is `pow`.", "kind": "markdown"}}
{"character": " ", "row": 3, "column": 100, "range": {"start": {"line": 3, "character": 97}, "end": {"line": 3, "character": 108}}, "contents": {"value": "```lean\nℕ\n```\n***\n`a ^ b` computes `a` to the power of `b`.\nThe meaning of this notation is type-dependent. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `^` in identifiers is `pow`.", "kind": "markdown"}}
{"character": "(", "row": 3, "column": 101, "range": {"start": {"line": 3, "character": 101}, "end": {"line": 3, "character": 108}}, "contents": {"value": "```lean\nℕ\n```\n***\nParentheses, used for grouping expressions (e.g., `a * (b + c)`).\nCan also be used for creating simple functions when combined with `·`. Here are some examples:\n  - `(· + 1)` is shorthand for `fun x => x + 1`\n  - `(· + ·)` is shorthand for `fun x y => x + y`\n  - `(f · a b)` is shorthand for `fun x => f x a b`\n  - `(h (· + 1) ·)` is shorthand for `fun x => h (fun y => y + 1) x`\n  - also applies to other parentheses-like notations such as `(·, 1)`\n", "kind": "markdown"}}
{"character": "3", "row": 3, "column": 102, "range": {"start": {"line": 3, "character": 102}, "end": {"line": 3, "character": 103}}, "contents": {"value": "```lean\n3 : ℕ\n```", "kind": "markdown"}}
{"character": " ", "row": 3, "column": 103, "range": {"start": {"line": 3, "character": 102}, "end": {"line": 3, "character": 107}}, "contents": {"value": "```lean\nℕ\n```\n***\n`a * b` computes the product of `a` and `b`.\nThe meaning of this notation is type-dependent. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `*` in identifiers is `mul`.", "kind": "markdown"}}
{"character": "*", "row": 3, "column": 104, "range": {"start": {"line": 3, "character": 102}, "end": {"line": 3, "character": 107}}, "contents": {"value": "```lean\nℕ\n```\n***\n`a * b` computes the product of `a` and `b`.\nThe meaning of this notation is type-dependent. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `*` in identifiers is `mul`.", "kind": "markdown"}}
{"character": " ", "row": 3, "column": 105, "range": {"start": {"line": 3, "character": 102}, "end": {"line": 3, "character": 107}}, "contents": {"value": "```lean\nℕ\n```\n***\n`a * b` computes the product of `a` and `b`.\nThe meaning of this notation is type-dependent. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `*` in identifiers is `mul`.", "kind": "markdown"}}
{"character": "k", "row": 3, "column": 106, "range": {"start": {"line": 3, "character": 106}, "end": {"line": 3, "character": 107}}, "contents": {"value": "```lean\nk : ℕ\n```", "kind": "markdown"}}
{"character": ")", "row": 3, "column": 107, "range": {"start": {"line": 3, "character": 101}, "end": {"line": 3, "character": 108}}, "contents": {"value": "```lean\nℕ\n```\n***\nParentheses, used for grouping expressions (e.g., `a * (b + c)`).\nCan also be used for creating simple functions when combined with `·`. Here are some examples:\n  - `(· + 1)` is shorthand for `fun x => x + 1`\n  - `(· + ·)` is shorthand for `fun x y => x + y`\n  - `(f · a b)` is shorthand for `fun x => f x a b`\n  - `(h (· + 1) ·)` is shorthand for `fun x => h (fun y => y + 1) x`\n  - also applies to other parentheses-like notations such as `(·, 1)`\n", "kind": "markdown"}}
{"character": " ", "row": 3, "column": 108}
{"character": ":", "row": 3, "column": 109}
{"character": "=", "row": 3, "column": 110}
{"character": " ", "row": 3, "column": 111}
{"character": "b", "row": 3, "column": 112, "range": {"start": {"line": 3, "character": 112}, "end": {"line": 3, "character": 120}}, "contents": {"value": "`by tac` constructs a term of the expected type by running the tactic(s) `tac`. ", "kind": "markdown"}}
{"character": "y", "row": 3, "column": 113, "range": {"start": {"line": 3, "character": 112}, "end": {"line": 3, "character": 120}}, "contents": {"value": "`by tac` constructs a term of the expected type by running the tactic(s) `tac`. ", "kind": "markdown"}}
{"character": " ", "row": 3, "column": 114, "range": {"start": {"line": 3, "character": 112}, "end": {"line": 3, "character": 120}}, "contents": {"value": "`by tac` constructs a term of the expected type by running the tactic(s) `tac`. ", "kind": "markdown"}}
{"character": "s", "row": 3, "column": 115, "range": {"start": {"line": 3, "character": 115}, "end": {"line": 3, "character": 120}}, "contents": {"value": "The `sorry` tactic is a temporary placeholder for an incomplete tactic proof,\nclosing the main goal using `exact sorry`.\n\nThis is intended for stubbing-out incomplete parts of a proof while still having a syntactically correct proof skeleton.\nLean will give a warning whenever a proof uses `sorry`, so you aren't likely to miss it,\nbut you can double check if a theorem depends on `sorry` by looking for `sorryAx` in the output\nof the `#print axioms my_thm` command, the axiom used by the implementation of `sorry`.\n", "kind": "markdown"}}
{"character": "o", "row": 3, "column": 116, "range": {"start": {"line": 3, "character": 115}, "end": {"line": 3, "character": 120}}, "contents": {"value": "The `sorry` tactic is a temporary placeholder for an incomplete tactic proof,\nclosing the main goal using `exact sorry`.\n\nThis is intended for stubbing-out incomplete parts of a proof while still having a syntactically correct proof skeleton.\nLean will give a warning whenever a proof uses `sorry`, so you aren't likely to miss it,\nbut you can double check if a theorem depends on `sorry` by looking for `sorryAx` in the output\nof the `#print axioms my_thm` command, the axiom used by the implementation of `sorry`.\n", "kind": "markdown"}}
{"character": "r", "row": 3, "column": 117, "range": {"start": {"line": 3, "character": 115}, "end": {"line": 3, "character": 120}}, "contents": {"value": "The `sorry` tactic is a temporary placeholder for an incomplete tactic proof,\nclosing the main goal using `exact sorry`.\n\nThis is intended for stubbing-out incomplete parts of a proof while still having a syntactically correct proof skeleton.\nLean will give a warning whenever a proof uses `sorry`, so you aren't likely to miss it,\nbut you can double check if a theorem depends on `sorry` by looking for `sorryAx` in the output\nof the `#print axioms my_thm` command, the axiom used by the implementation of `sorry`.\n", "kind": "markdown"}}
{"character": "r", "row": 3, "column": 118, "range": {"start": {"line": 3, "character": 115}, "end": {"line": 3, "character": 120}}, "contents": {"value": "The `sorry` tactic is a temporary placeholder for an incomplete tactic proof,\nclosing the main goal using `exact sorry`.\n\nThis is intended for stubbing-out incomplete parts of a proof while still having a syntactically correct proof skeleton.\nLean will give a warning whenever a proof uses `sorry`, so you aren't likely to miss it,\nbut you can double check if a theorem depends on `sorry` by looking for `sorryAx` in the output\nof the `#print axioms my_thm` command, the axiom used by the implementation of `sorry`.\n", "kind": "markdown"}}
{"character": "y", "row": 3, "column": 119, "range": {"start": {"line": 3, "character": 115}, "end": {"line": 3, "character": 120}}, "contents": {"value": "The `sorry` tactic is a temporary placeholder for an incomplete tactic proof,\nclosing the main goal using `exact sorry`.\n\nThis is intended for stubbing-out incomplete parts of a proof while still having a syntactically correct proof skeleton.\nLean will give a warning whenever a proof uses `sorry`, so you aren't likely to miss it,\nbut you can double check if a theorem depends on `sorry` by looking for `sorryAx` in the output\nof the `#print axioms my_thm` command, the axiom used by the implementation of `sorry`.\n", "kind": "markdown"}}
