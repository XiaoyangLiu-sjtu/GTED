{"character": "i", "row": 0, "column": 0}
{"character": "m", "row": 0, "column": 1}
{"character": "p", "row": 0, "column": 2}
{"character": "o", "row": 0, "column": 3}
{"character": "r", "row": 0, "column": 4}
{"character": "t", "row": 0, "column": 5}
{"character": " ", "row": 0, "column": 6}
{"character": "M", "row": 0, "column": 7}
{"character": "a", "row": 0, "column": 8}
{"character": "t", "row": 0, "column": 9}
{"character": "h", "row": 0, "column": 10}
{"character": "l", "row": 0, "column": 11}
{"character": "i", "row": 0, "column": 12}
{"character": "b", "row": 0, "column": 13}
{"character": "o", "row": 1, "column": 0, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 8}}, "contents": {"value": "Makes names from other namespaces visible without writing the namespace prefix.\n\nNames that are made available with `open` are visible within the current `section` or `namespace`\nblock. This makes referring to (type) definitions and theorems easier, but note that it can also\nmake [scoped instances], notations, and attributes from a different namespace available.\n\nThe `open` command can be used in a few different ways:\n\n* `open Some.Namespace.Path1 Some.Namespace.Path2` makes all non-protected names in\n  `Some.Namespace.Path1` and `Some.Namespace.Path2` available without the prefix, so that\n  `Some.Namespace.Path1.x` and `Some.Namespace.Path2.y` can be referred to by writing only `x` and\n  `y`.\n\n* `open Some.Namespace.Path hiding def1 def2` opens all non-protected names in `Some.Namespace.Path`\n  except `def1` and `def2`.\n\n* `open Some.Namespace.Path (def1 def2)` only makes `Some.Namespace.Path.def1` and\n  `Some.Namespace.Path.def2` available without the full prefix, so `Some.Namespace.Path.def3` would\n  be unaffected.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open Some.Namespace.Path renaming def1 → def1', def2 → def2'` same as `open Some.Namespace.Path\n  (def1 def2)` but `def1`/`def2`'s names are changed to `def1'`/`def2'`.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open scoped Some.Namespace.Path1 Some.Namespace.Path2` **only** opens [scoped instances],\n  notations, and attributes from `Namespace1` and `Namespace2`; it does **not** make any other name\n  available.\n\n* `open <any of the open shapes above> in` makes the names `open`-ed visible only in the next\n  command or expression.\n\n[scoped instance]: https://lean-lang.org/theorem_proving_in_lean4/type_classes.html#scoped-instances\n(Scoped instances in Theorem Proving in Lean)\n\n\n## Examples\n\n```lean\n/-- SKI combinators https://en.wikipedia.org/wiki/SKI_combinator_calculus -/\nnamespace Combinator.Calculus\n  def I (a : α) : α := a\n  def K (a : α) : β → α := fun _ => a\n  def S (x : α → β → γ) (y : α → β) (z : α) : γ := x z (y z)\nend Combinator.Calculus\n\nsection\n  -- open everything under `Combinator.Calculus`, *i.e.* `I`, `K` and `S`,\n  -- until the section ends\n  open Combinator.Calculus\n\n  theorem SKx_eq_K : S K x = I := rfl\nend\n\n-- open everything under `Combinator.Calculus` only for the next command (the next `theorem`, here)\nopen Combinator.Calculus in\ntheorem SKx_eq_K' : S K x = I := rfl\n\nsection\n  -- open only `S` and `K` under `Combinator.Calculus`\n  open Combinator.Calculus (S K)\n\n  theorem SKxy_eq_y : S K x y = y := rfl\n\n  -- `I` is not in scope, we have to use its full path\n  theorem SKxy_eq_Iy : S K x y = Combinator.Calculus.I y := rfl\nend\n\nsection\n  open Combinator.Calculus\n    renaming\n      I → identity,\n      K → konstant\n\n  #check identity\n  #check konstant\nend\n\nsection\n  open Combinator.Calculus\n    hiding S\n\n  #check I\n  #check K\nend\n\nsection\n  namespace Demo\n    inductive MyType\n    | val\n\n    namespace N1\n      scoped infix:68 \" ≋ \" => BEq.beq\n\n      scoped instance : BEq MyType where\n        beq _ _ := true\n\n      def Alias := MyType\n    end N1\n  end Demo\n\n  -- bring `≋` and the instance in scope, but not `Alias`\n  open scoped Demo.N1\n\n  #check Demo.MyType.val == Demo.MyType.val\n  #check Demo.MyType.val ≋ Demo.MyType.val\n  -- #check Alias -- unknown identifier 'Alias'\nend\n```\n", "kind": "markdown"}}
{"character": "p", "row": 1, "column": 1, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 8}}, "contents": {"value": "Makes names from other namespaces visible without writing the namespace prefix.\n\nNames that are made available with `open` are visible within the current `section` or `namespace`\nblock. This makes referring to (type) definitions and theorems easier, but note that it can also\nmake [scoped instances], notations, and attributes from a different namespace available.\n\nThe `open` command can be used in a few different ways:\n\n* `open Some.Namespace.Path1 Some.Namespace.Path2` makes all non-protected names in\n  `Some.Namespace.Path1` and `Some.Namespace.Path2` available without the prefix, so that\n  `Some.Namespace.Path1.x` and `Some.Namespace.Path2.y` can be referred to by writing only `x` and\n  `y`.\n\n* `open Some.Namespace.Path hiding def1 def2` opens all non-protected names in `Some.Namespace.Path`\n  except `def1` and `def2`.\n\n* `open Some.Namespace.Path (def1 def2)` only makes `Some.Namespace.Path.def1` and\n  `Some.Namespace.Path.def2` available without the full prefix, so `Some.Namespace.Path.def3` would\n  be unaffected.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open Some.Namespace.Path renaming def1 → def1', def2 → def2'` same as `open Some.Namespace.Path\n  (def1 def2)` but `def1`/`def2`'s names are changed to `def1'`/`def2'`.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open scoped Some.Namespace.Path1 Some.Namespace.Path2` **only** opens [scoped instances],\n  notations, and attributes from `Namespace1` and `Namespace2`; it does **not** make any other name\n  available.\n\n* `open <any of the open shapes above> in` makes the names `open`-ed visible only in the next\n  command or expression.\n\n[scoped instance]: https://lean-lang.org/theorem_proving_in_lean4/type_classes.html#scoped-instances\n(Scoped instances in Theorem Proving in Lean)\n\n\n## Examples\n\n```lean\n/-- SKI combinators https://en.wikipedia.org/wiki/SKI_combinator_calculus -/\nnamespace Combinator.Calculus\n  def I (a : α) : α := a\n  def K (a : α) : β → α := fun _ => a\n  def S (x : α → β → γ) (y : α → β) (z : α) : γ := x z (y z)\nend Combinator.Calculus\n\nsection\n  -- open everything under `Combinator.Calculus`, *i.e.* `I`, `K` and `S`,\n  -- until the section ends\n  open Combinator.Calculus\n\n  theorem SKx_eq_K : S K x = I := rfl\nend\n\n-- open everything under `Combinator.Calculus` only for the next command (the next `theorem`, here)\nopen Combinator.Calculus in\ntheorem SKx_eq_K' : S K x = I := rfl\n\nsection\n  -- open only `S` and `K` under `Combinator.Calculus`\n  open Combinator.Calculus (S K)\n\n  theorem SKxy_eq_y : S K x y = y := rfl\n\n  -- `I` is not in scope, we have to use its full path\n  theorem SKxy_eq_Iy : S K x y = Combinator.Calculus.I y := rfl\nend\n\nsection\n  open Combinator.Calculus\n    renaming\n      I → identity,\n      K → konstant\n\n  #check identity\n  #check konstant\nend\n\nsection\n  open Combinator.Calculus\n    hiding S\n\n  #check I\n  #check K\nend\n\nsection\n  namespace Demo\n    inductive MyType\n    | val\n\n    namespace N1\n      scoped infix:68 \" ≋ \" => BEq.beq\n\n      scoped instance : BEq MyType where\n        beq _ _ := true\n\n      def Alias := MyType\n    end N1\n  end Demo\n\n  -- bring `≋` and the instance in scope, but not `Alias`\n  open scoped Demo.N1\n\n  #check Demo.MyType.val == Demo.MyType.val\n  #check Demo.MyType.val ≋ Demo.MyType.val\n  -- #check Alias -- unknown identifier 'Alias'\nend\n```\n", "kind": "markdown"}}
{"character": "e", "row": 1, "column": 2, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 8}}, "contents": {"value": "Makes names from other namespaces visible without writing the namespace prefix.\n\nNames that are made available with `open` are visible within the current `section` or `namespace`\nblock. This makes referring to (type) definitions and theorems easier, but note that it can also\nmake [scoped instances], notations, and attributes from a different namespace available.\n\nThe `open` command can be used in a few different ways:\n\n* `open Some.Namespace.Path1 Some.Namespace.Path2` makes all non-protected names in\n  `Some.Namespace.Path1` and `Some.Namespace.Path2` available without the prefix, so that\n  `Some.Namespace.Path1.x` and `Some.Namespace.Path2.y` can be referred to by writing only `x` and\n  `y`.\n\n* `open Some.Namespace.Path hiding def1 def2` opens all non-protected names in `Some.Namespace.Path`\n  except `def1` and `def2`.\n\n* `open Some.Namespace.Path (def1 def2)` only makes `Some.Namespace.Path.def1` and\n  `Some.Namespace.Path.def2` available without the full prefix, so `Some.Namespace.Path.def3` would\n  be unaffected.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open Some.Namespace.Path renaming def1 → def1', def2 → def2'` same as `open Some.Namespace.Path\n  (def1 def2)` but `def1`/`def2`'s names are changed to `def1'`/`def2'`.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open scoped Some.Namespace.Path1 Some.Namespace.Path2` **only** opens [scoped instances],\n  notations, and attributes from `Namespace1` and `Namespace2`; it does **not** make any other name\n  available.\n\n* `open <any of the open shapes above> in` makes the names `open`-ed visible only in the next\n  command or expression.\n\n[scoped instance]: https://lean-lang.org/theorem_proving_in_lean4/type_classes.html#scoped-instances\n(Scoped instances in Theorem Proving in Lean)\n\n\n## Examples\n\n```lean\n/-- SKI combinators https://en.wikipedia.org/wiki/SKI_combinator_calculus -/\nnamespace Combinator.Calculus\n  def I (a : α) : α := a\n  def K (a : α) : β → α := fun _ => a\n  def S (x : α → β → γ) (y : α → β) (z : α) : γ := x z (y z)\nend Combinator.Calculus\n\nsection\n  -- open everything under `Combinator.Calculus`, *i.e.* `I`, `K` and `S`,\n  -- until the section ends\n  open Combinator.Calculus\n\n  theorem SKx_eq_K : S K x = I := rfl\nend\n\n-- open everything under `Combinator.Calculus` only for the next command (the next `theorem`, here)\nopen Combinator.Calculus in\ntheorem SKx_eq_K' : S K x = I := rfl\n\nsection\n  -- open only `S` and `K` under `Combinator.Calculus`\n  open Combinator.Calculus (S K)\n\n  theorem SKxy_eq_y : S K x y = y := rfl\n\n  -- `I` is not in scope, we have to use its full path\n  theorem SKxy_eq_Iy : S K x y = Combinator.Calculus.I y := rfl\nend\n\nsection\n  open Combinator.Calculus\n    renaming\n      I → identity,\n      K → konstant\n\n  #check identity\n  #check konstant\nend\n\nsection\n  open Combinator.Calculus\n    hiding S\n\n  #check I\n  #check K\nend\n\nsection\n  namespace Demo\n    inductive MyType\n    | val\n\n    namespace N1\n      scoped infix:68 \" ≋ \" => BEq.beq\n\n      scoped instance : BEq MyType where\n        beq _ _ := true\n\n      def Alias := MyType\n    end N1\n  end Demo\n\n  -- bring `≋` and the instance in scope, but not `Alias`\n  open scoped Demo.N1\n\n  #check Demo.MyType.val == Demo.MyType.val\n  #check Demo.MyType.val ≋ Demo.MyType.val\n  -- #check Alias -- unknown identifier 'Alias'\nend\n```\n", "kind": "markdown"}}
{"character": "n", "row": 1, "column": 3, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 8}}, "contents": {"value": "Makes names from other namespaces visible without writing the namespace prefix.\n\nNames that are made available with `open` are visible within the current `section` or `namespace`\nblock. This makes referring to (type) definitions and theorems easier, but note that it can also\nmake [scoped instances], notations, and attributes from a different namespace available.\n\nThe `open` command can be used in a few different ways:\n\n* `open Some.Namespace.Path1 Some.Namespace.Path2` makes all non-protected names in\n  `Some.Namespace.Path1` and `Some.Namespace.Path2` available without the prefix, so that\n  `Some.Namespace.Path1.x` and `Some.Namespace.Path2.y` can be referred to by writing only `x` and\n  `y`.\n\n* `open Some.Namespace.Path hiding def1 def2` opens all non-protected names in `Some.Namespace.Path`\n  except `def1` and `def2`.\n\n* `open Some.Namespace.Path (def1 def2)` only makes `Some.Namespace.Path.def1` and\n  `Some.Namespace.Path.def2` available without the full prefix, so `Some.Namespace.Path.def3` would\n  be unaffected.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open Some.Namespace.Path renaming def1 → def1', def2 → def2'` same as `open Some.Namespace.Path\n  (def1 def2)` but `def1`/`def2`'s names are changed to `def1'`/`def2'`.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open scoped Some.Namespace.Path1 Some.Namespace.Path2` **only** opens [scoped instances],\n  notations, and attributes from `Namespace1` and `Namespace2`; it does **not** make any other name\n  available.\n\n* `open <any of the open shapes above> in` makes the names `open`-ed visible only in the next\n  command or expression.\n\n[scoped instance]: https://lean-lang.org/theorem_proving_in_lean4/type_classes.html#scoped-instances\n(Scoped instances in Theorem Proving in Lean)\n\n\n## Examples\n\n```lean\n/-- SKI combinators https://en.wikipedia.org/wiki/SKI_combinator_calculus -/\nnamespace Combinator.Calculus\n  def I (a : α) : α := a\n  def K (a : α) : β → α := fun _ => a\n  def S (x : α → β → γ) (y : α → β) (z : α) : γ := x z (y z)\nend Combinator.Calculus\n\nsection\n  -- open everything under `Combinator.Calculus`, *i.e.* `I`, `K` and `S`,\n  -- until the section ends\n  open Combinator.Calculus\n\n  theorem SKx_eq_K : S K x = I := rfl\nend\n\n-- open everything under `Combinator.Calculus` only for the next command (the next `theorem`, here)\nopen Combinator.Calculus in\ntheorem SKx_eq_K' : S K x = I := rfl\n\nsection\n  -- open only `S` and `K` under `Combinator.Calculus`\n  open Combinator.Calculus (S K)\n\n  theorem SKxy_eq_y : S K x y = y := rfl\n\n  -- `I` is not in scope, we have to use its full path\n  theorem SKxy_eq_Iy : S K x y = Combinator.Calculus.I y := rfl\nend\n\nsection\n  open Combinator.Calculus\n    renaming\n      I → identity,\n      K → konstant\n\n  #check identity\n  #check konstant\nend\n\nsection\n  open Combinator.Calculus\n    hiding S\n\n  #check I\n  #check K\nend\n\nsection\n  namespace Demo\n    inductive MyType\n    | val\n\n    namespace N1\n      scoped infix:68 \" ≋ \" => BEq.beq\n\n      scoped instance : BEq MyType where\n        beq _ _ := true\n\n      def Alias := MyType\n    end N1\n  end Demo\n\n  -- bring `≋` and the instance in scope, but not `Alias`\n  open scoped Demo.N1\n\n  #check Demo.MyType.val == Demo.MyType.val\n  #check Demo.MyType.val ≋ Demo.MyType.val\n  -- #check Alias -- unknown identifier 'Alias'\nend\n```\n", "kind": "markdown"}}
{"character": " ", "row": 1, "column": 4, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 8}}, "contents": {"value": "Makes names from other namespaces visible without writing the namespace prefix.\n\nNames that are made available with `open` are visible within the current `section` or `namespace`\nblock. This makes referring to (type) definitions and theorems easier, but note that it can also\nmake [scoped instances], notations, and attributes from a different namespace available.\n\nThe `open` command can be used in a few different ways:\n\n* `open Some.Namespace.Path1 Some.Namespace.Path2` makes all non-protected names in\n  `Some.Namespace.Path1` and `Some.Namespace.Path2` available without the prefix, so that\n  `Some.Namespace.Path1.x` and `Some.Namespace.Path2.y` can be referred to by writing only `x` and\n  `y`.\n\n* `open Some.Namespace.Path hiding def1 def2` opens all non-protected names in `Some.Namespace.Path`\n  except `def1` and `def2`.\n\n* `open Some.Namespace.Path (def1 def2)` only makes `Some.Namespace.Path.def1` and\n  `Some.Namespace.Path.def2` available without the full prefix, so `Some.Namespace.Path.def3` would\n  be unaffected.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open Some.Namespace.Path renaming def1 → def1', def2 → def2'` same as `open Some.Namespace.Path\n  (def1 def2)` but `def1`/`def2`'s names are changed to `def1'`/`def2'`.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open scoped Some.Namespace.Path1 Some.Namespace.Path2` **only** opens [scoped instances],\n  notations, and attributes from `Namespace1` and `Namespace2`; it does **not** make any other name\n  available.\n\n* `open <any of the open shapes above> in` makes the names `open`-ed visible only in the next\n  command or expression.\n\n[scoped instance]: https://lean-lang.org/theorem_proving_in_lean4/type_classes.html#scoped-instances\n(Scoped instances in Theorem Proving in Lean)\n\n\n## Examples\n\n```lean\n/-- SKI combinators https://en.wikipedia.org/wiki/SKI_combinator_calculus -/\nnamespace Combinator.Calculus\n  def I (a : α) : α := a\n  def K (a : α) : β → α := fun _ => a\n  def S (x : α → β → γ) (y : α → β) (z : α) : γ := x z (y z)\nend Combinator.Calculus\n\nsection\n  -- open everything under `Combinator.Calculus`, *i.e.* `I`, `K` and `S`,\n  -- until the section ends\n  open Combinator.Calculus\n\n  theorem SKx_eq_K : S K x = I := rfl\nend\n\n-- open everything under `Combinator.Calculus` only for the next command (the next `theorem`, here)\nopen Combinator.Calculus in\ntheorem SKx_eq_K' : S K x = I := rfl\n\nsection\n  -- open only `S` and `K` under `Combinator.Calculus`\n  open Combinator.Calculus (S K)\n\n  theorem SKxy_eq_y : S K x y = y := rfl\n\n  -- `I` is not in scope, we have to use its full path\n  theorem SKxy_eq_Iy : S K x y = Combinator.Calculus.I y := rfl\nend\n\nsection\n  open Combinator.Calculus\n    renaming\n      I → identity,\n      K → konstant\n\n  #check identity\n  #check konstant\nend\n\nsection\n  open Combinator.Calculus\n    hiding S\n\n  #check I\n  #check K\nend\n\nsection\n  namespace Demo\n    inductive MyType\n    | val\n\n    namespace N1\n      scoped infix:68 \" ≋ \" => BEq.beq\n\n      scoped instance : BEq MyType where\n        beq _ _ := true\n\n      def Alias := MyType\n    end N1\n  end Demo\n\n  -- bring `≋` and the instance in scope, but not `Alias`\n  open scoped Demo.N1\n\n  #check Demo.MyType.val == Demo.MyType.val\n  #check Demo.MyType.val ≋ Demo.MyType.val\n  -- #check Alias -- unknown identifier 'Alias'\nend\n```\n", "kind": "markdown"}}
{"character": "N", "row": 1, "column": 5, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 8}}, "contents": {"value": "Makes names from other namespaces visible without writing the namespace prefix.\n\nNames that are made available with `open` are visible within the current `section` or `namespace`\nblock. This makes referring to (type) definitions and theorems easier, but note that it can also\nmake [scoped instances], notations, and attributes from a different namespace available.\n\nThe `open` command can be used in a few different ways:\n\n* `open Some.Namespace.Path1 Some.Namespace.Path2` makes all non-protected names in\n  `Some.Namespace.Path1` and `Some.Namespace.Path2` available without the prefix, so that\n  `Some.Namespace.Path1.x` and `Some.Namespace.Path2.y` can be referred to by writing only `x` and\n  `y`.\n\n* `open Some.Namespace.Path hiding def1 def2` opens all non-protected names in `Some.Namespace.Path`\n  except `def1` and `def2`.\n\n* `open Some.Namespace.Path (def1 def2)` only makes `Some.Namespace.Path.def1` and\n  `Some.Namespace.Path.def2` available without the full prefix, so `Some.Namespace.Path.def3` would\n  be unaffected.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open Some.Namespace.Path renaming def1 → def1', def2 → def2'` same as `open Some.Namespace.Path\n  (def1 def2)` but `def1`/`def2`'s names are changed to `def1'`/`def2'`.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open scoped Some.Namespace.Path1 Some.Namespace.Path2` **only** opens [scoped instances],\n  notations, and attributes from `Namespace1` and `Namespace2`; it does **not** make any other name\n  available.\n\n* `open <any of the open shapes above> in` makes the names `open`-ed visible only in the next\n  command or expression.\n\n[scoped instance]: https://lean-lang.org/theorem_proving_in_lean4/type_classes.html#scoped-instances\n(Scoped instances in Theorem Proving in Lean)\n\n\n## Examples\n\n```lean\n/-- SKI combinators https://en.wikipedia.org/wiki/SKI_combinator_calculus -/\nnamespace Combinator.Calculus\n  def I (a : α) : α := a\n  def K (a : α) : β → α := fun _ => a\n  def S (x : α → β → γ) (y : α → β) (z : α) : γ := x z (y z)\nend Combinator.Calculus\n\nsection\n  -- open everything under `Combinator.Calculus`, *i.e.* `I`, `K` and `S`,\n  -- until the section ends\n  open Combinator.Calculus\n\n  theorem SKx_eq_K : S K x = I := rfl\nend\n\n-- open everything under `Combinator.Calculus` only for the next command (the next `theorem`, here)\nopen Combinator.Calculus in\ntheorem SKx_eq_K' : S K x = I := rfl\n\nsection\n  -- open only `S` and `K` under `Combinator.Calculus`\n  open Combinator.Calculus (S K)\n\n  theorem SKxy_eq_y : S K x y = y := rfl\n\n  -- `I` is not in scope, we have to use its full path\n  theorem SKxy_eq_Iy : S K x y = Combinator.Calculus.I y := rfl\nend\n\nsection\n  open Combinator.Calculus\n    renaming\n      I → identity,\n      K → konstant\n\n  #check identity\n  #check konstant\nend\n\nsection\n  open Combinator.Calculus\n    hiding S\n\n  #check I\n  #check K\nend\n\nsection\n  namespace Demo\n    inductive MyType\n    | val\n\n    namespace N1\n      scoped infix:68 \" ≋ \" => BEq.beq\n\n      scoped instance : BEq MyType where\n        beq _ _ := true\n\n      def Alias := MyType\n    end N1\n  end Demo\n\n  -- bring `≋` and the instance in scope, but not `Alias`\n  open scoped Demo.N1\n\n  #check Demo.MyType.val == Demo.MyType.val\n  #check Demo.MyType.val ≋ Demo.MyType.val\n  -- #check Alias -- unknown identifier 'Alias'\nend\n```\n", "kind": "markdown"}}
{"character": "a", "row": 1, "column": 6, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 8}}, "contents": {"value": "Makes names from other namespaces visible without writing the namespace prefix.\n\nNames that are made available with `open` are visible within the current `section` or `namespace`\nblock. This makes referring to (type) definitions and theorems easier, but note that it can also\nmake [scoped instances], notations, and attributes from a different namespace available.\n\nThe `open` command can be used in a few different ways:\n\n* `open Some.Namespace.Path1 Some.Namespace.Path2` makes all non-protected names in\n  `Some.Namespace.Path1` and `Some.Namespace.Path2` available without the prefix, so that\n  `Some.Namespace.Path1.x` and `Some.Namespace.Path2.y` can be referred to by writing only `x` and\n  `y`.\n\n* `open Some.Namespace.Path hiding def1 def2` opens all non-protected names in `Some.Namespace.Path`\n  except `def1` and `def2`.\n\n* `open Some.Namespace.Path (def1 def2)` only makes `Some.Namespace.Path.def1` and\n  `Some.Namespace.Path.def2` available without the full prefix, so `Some.Namespace.Path.def3` would\n  be unaffected.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open Some.Namespace.Path renaming def1 → def1', def2 → def2'` same as `open Some.Namespace.Path\n  (def1 def2)` but `def1`/`def2`'s names are changed to `def1'`/`def2'`.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open scoped Some.Namespace.Path1 Some.Namespace.Path2` **only** opens [scoped instances],\n  notations, and attributes from `Namespace1` and `Namespace2`; it does **not** make any other name\n  available.\n\n* `open <any of the open shapes above> in` makes the names `open`-ed visible only in the next\n  command or expression.\n\n[scoped instance]: https://lean-lang.org/theorem_proving_in_lean4/type_classes.html#scoped-instances\n(Scoped instances in Theorem Proving in Lean)\n\n\n## Examples\n\n```lean\n/-- SKI combinators https://en.wikipedia.org/wiki/SKI_combinator_calculus -/\nnamespace Combinator.Calculus\n  def I (a : α) : α := a\n  def K (a : α) : β → α := fun _ => a\n  def S (x : α → β → γ) (y : α → β) (z : α) : γ := x z (y z)\nend Combinator.Calculus\n\nsection\n  -- open everything under `Combinator.Calculus`, *i.e.* `I`, `K` and `S`,\n  -- until the section ends\n  open Combinator.Calculus\n\n  theorem SKx_eq_K : S K x = I := rfl\nend\n\n-- open everything under `Combinator.Calculus` only for the next command (the next `theorem`, here)\nopen Combinator.Calculus in\ntheorem SKx_eq_K' : S K x = I := rfl\n\nsection\n  -- open only `S` and `K` under `Combinator.Calculus`\n  open Combinator.Calculus (S K)\n\n  theorem SKxy_eq_y : S K x y = y := rfl\n\n  -- `I` is not in scope, we have to use its full path\n  theorem SKxy_eq_Iy : S K x y = Combinator.Calculus.I y := rfl\nend\n\nsection\n  open Combinator.Calculus\n    renaming\n      I → identity,\n      K → konstant\n\n  #check identity\n  #check konstant\nend\n\nsection\n  open Combinator.Calculus\n    hiding S\n\n  #check I\n  #check K\nend\n\nsection\n  namespace Demo\n    inductive MyType\n    | val\n\n    namespace N1\n      scoped infix:68 \" ≋ \" => BEq.beq\n\n      scoped instance : BEq MyType where\n        beq _ _ := true\n\n      def Alias := MyType\n    end N1\n  end Demo\n\n  -- bring `≋` and the instance in scope, but not `Alias`\n  open scoped Demo.N1\n\n  #check Demo.MyType.val == Demo.MyType.val\n  #check Demo.MyType.val ≋ Demo.MyType.val\n  -- #check Alias -- unknown identifier 'Alias'\nend\n```\n", "kind": "markdown"}}
{"character": "t", "row": 1, "column": 7, "range": {"start": {"line": 1, "character": 0}, "end": {"line": 1, "character": 8}}, "contents": {"value": "Makes names from other namespaces visible without writing the namespace prefix.\n\nNames that are made available with `open` are visible within the current `section` or `namespace`\nblock. This makes referring to (type) definitions and theorems easier, but note that it can also\nmake [scoped instances], notations, and attributes from a different namespace available.\n\nThe `open` command can be used in a few different ways:\n\n* `open Some.Namespace.Path1 Some.Namespace.Path2` makes all non-protected names in\n  `Some.Namespace.Path1` and `Some.Namespace.Path2` available without the prefix, so that\n  `Some.Namespace.Path1.x` and `Some.Namespace.Path2.y` can be referred to by writing only `x` and\n  `y`.\n\n* `open Some.Namespace.Path hiding def1 def2` opens all non-protected names in `Some.Namespace.Path`\n  except `def1` and `def2`.\n\n* `open Some.Namespace.Path (def1 def2)` only makes `Some.Namespace.Path.def1` and\n  `Some.Namespace.Path.def2` available without the full prefix, so `Some.Namespace.Path.def3` would\n  be unaffected.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open Some.Namespace.Path renaming def1 → def1', def2 → def2'` same as `open Some.Namespace.Path\n  (def1 def2)` but `def1`/`def2`'s names are changed to `def1'`/`def2'`.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open scoped Some.Namespace.Path1 Some.Namespace.Path2` **only** opens [scoped instances],\n  notations, and attributes from `Namespace1` and `Namespace2`; it does **not** make any other name\n  available.\n\n* `open <any of the open shapes above> in` makes the names `open`-ed visible only in the next\n  command or expression.\n\n[scoped instance]: https://lean-lang.org/theorem_proving_in_lean4/type_classes.html#scoped-instances\n(Scoped instances in Theorem Proving in Lean)\n\n\n## Examples\n\n```lean\n/-- SKI combinators https://en.wikipedia.org/wiki/SKI_combinator_calculus -/\nnamespace Combinator.Calculus\n  def I (a : α) : α := a\n  def K (a : α) : β → α := fun _ => a\n  def S (x : α → β → γ) (y : α → β) (z : α) : γ := x z (y z)\nend Combinator.Calculus\n\nsection\n  -- open everything under `Combinator.Calculus`, *i.e.* `I`, `K` and `S`,\n  -- until the section ends\n  open Combinator.Calculus\n\n  theorem SKx_eq_K : S K x = I := rfl\nend\n\n-- open everything under `Combinator.Calculus` only for the next command (the next `theorem`, here)\nopen Combinator.Calculus in\ntheorem SKx_eq_K' : S K x = I := rfl\n\nsection\n  -- open only `S` and `K` under `Combinator.Calculus`\n  open Combinator.Calculus (S K)\n\n  theorem SKxy_eq_y : S K x y = y := rfl\n\n  -- `I` is not in scope, we have to use its full path\n  theorem SKxy_eq_Iy : S K x y = Combinator.Calculus.I y := rfl\nend\n\nsection\n  open Combinator.Calculus\n    renaming\n      I → identity,\n      K → konstant\n\n  #check identity\n  #check konstant\nend\n\nsection\n  open Combinator.Calculus\n    hiding S\n\n  #check I\n  #check K\nend\n\nsection\n  namespace Demo\n    inductive MyType\n    | val\n\n    namespace N1\n      scoped infix:68 \" ≋ \" => BEq.beq\n\n      scoped instance : BEq MyType where\n        beq _ _ := true\n\n      def Alias := MyType\n    end N1\n  end Demo\n\n  -- bring `≋` and the instance in scope, but not `Alias`\n  open scoped Demo.N1\n\n  #check Demo.MyType.val == Demo.MyType.val\n  #check Demo.MyType.val ≋ Demo.MyType.val\n  -- #check Alias -- unknown identifier 'Alias'\nend\n```\n", "kind": "markdown"}}
{"character": "t", "row": 3, "column": 0}
{"character": "h", "row": 3, "column": 1}
{"character": "e", "row": 3, "column": 2}
{"character": "o", "row": 3, "column": 3}
{"character": "r", "row": 3, "column": 4}
{"character": "e", "row": 3, "column": 5}
{"character": "m", "row": 3, "column": 6}
{"character": " ", "row": 3, "column": 7}
{"character": "l", "row": 3, "column": 8, "range": {"start": {"line": 3, "character": 8}, "end": {"line": 3, "character": 39}}, "contents": {"value": "```lean\nleast_n_of_80325_dvd_nfactorial {n! : ℕ} : IsLeast {n | 80325 ∣ n!} 17\n```", "kind": "markdown"}}
{"character": "e", "row": 3, "column": 9, "range": {"start": {"line": 3, "character": 8}, "end": {"line": 3, "character": 39}}, "contents": {"value": "```lean\nleast_n_of_80325_dvd_nfactorial {n! : ℕ} : IsLeast {n | 80325 ∣ n!} 17\n```", "kind": "markdown"}}
{"character": "a", "row": 3, "column": 10, "range": {"start": {"line": 3, "character": 8}, "end": {"line": 3, "character": 39}}, "contents": {"value": "```lean\nleast_n_of_80325_dvd_nfactorial {n! : ℕ} : IsLeast {n | 80325 ∣ n!} 17\n```", "kind": "markdown"}}
{"character": "s", "row": 3, "column": 11, "range": {"start": {"line": 3, "character": 8}, "end": {"line": 3, "character": 39}}, "contents": {"value": "```lean\nleast_n_of_80325_dvd_nfactorial {n! : ℕ} : IsLeast {n | 80325 ∣ n!} 17\n```", "kind": "markdown"}}
{"character": "t", "row": 3, "column": 12, "range": {"start": {"line": 3, "character": 8}, "end": {"line": 3, "character": 39}}, "contents": {"value": "```lean\nleast_n_of_80325_dvd_nfactorial {n! : ℕ} : IsLeast {n | 80325 ∣ n!} 17\n```", "kind": "markdown"}}
{"character": "_", "row": 3, "column": 13, "range": {"start": {"line": 3, "character": 8}, "end": {"line": 3, "character": 39}}, "contents": {"value": "```lean\nleast_n_of_80325_dvd_nfactorial {n! : ℕ} : IsLeast {n | 80325 ∣ n!} 17\n```", "kind": "markdown"}}
{"character": "n", "row": 3, "column": 14, "range": {"start": {"line": 3, "character": 8}, "end": {"line": 3, "character": 39}}, "contents": {"value": "```lean\nleast_n_of_80325_dvd_nfactorial {n! : ℕ} : IsLeast {n | 80325 ∣ n!} 17\n```", "kind": "markdown"}}
{"character": "_", "row": 3, "column": 15, "range": {"start": {"line": 3, "character": 8}, "end": {"line": 3, "character": 39}}, "contents": {"value": "```lean\nleast_n_of_80325_dvd_nfactorial {n! : ℕ} : IsLeast {n | 80325 ∣ n!} 17\n```", "kind": "markdown"}}
{"character": "o", "row": 3, "column": 16, "range": {"start": {"line": 3, "character": 8}, "end": {"line": 3, "character": 39}}, "contents": {"value": "```lean\nleast_n_of_80325_dvd_nfactorial {n! : ℕ} : IsLeast {n | 80325 ∣ n!} 17\n```", "kind": "markdown"}}
{"character": "f", "row": 3, "column": 17, "range": {"start": {"line": 3, "character": 8}, "end": {"line": 3, "character": 39}}, "contents": {"value": "```lean\nleast_n_of_80325_dvd_nfactorial {n! : ℕ} : IsLeast {n | 80325 ∣ n!} 17\n```", "kind": "markdown"}}
{"character": "_", "row": 3, "column": 18, "range": {"start": {"line": 3, "character": 8}, "end": {"line": 3, "character": 39}}, "contents": {"value": "```lean\nleast_n_of_80325_dvd_nfactorial {n! : ℕ} : IsLeast {n | 80325 ∣ n!} 17\n```", "kind": "markdown"}}
{"character": "8", "row": 3, "column": 19, "range": {"start": {"line": 3, "character": 8}, "end": {"line": 3, "character": 39}}, "contents": {"value": "```lean\nleast_n_of_80325_dvd_nfactorial {n! : ℕ} : IsLeast {n | 80325 ∣ n!} 17\n```", "kind": "markdown"}}
{"character": "0", "row": 3, "column": 20, "range": {"start": {"line": 3, "character": 8}, "end": {"line": 3, "character": 39}}, "contents": {"value": "```lean\nleast_n_of_80325_dvd_nfactorial {n! : ℕ} : IsLeast {n | 80325 ∣ n!} 17\n```", "kind": "markdown"}}
{"character": "3", "row": 3, "column": 21, "range": {"start": {"line": 3, "character": 8}, "end": {"line": 3, "character": 39}}, "contents": {"value": "```lean\nleast_n_of_80325_dvd_nfactorial {n! : ℕ} : IsLeast {n | 80325 ∣ n!} 17\n```", "kind": "markdown"}}
{"character": "2", "row": 3, "column": 22, "range": {"start": {"line": 3, "character": 8}, "end": {"line": 3, "character": 39}}, "contents": {"value": "```lean\nleast_n_of_80325_dvd_nfactorial {n! : ℕ} : IsLeast {n | 80325 ∣ n!} 17\n```", "kind": "markdown"}}
{"character": "5", "row": 3, "column": 23, "range": {"start": {"line": 3, "character": 8}, "end": {"line": 3, "character": 39}}, "contents": {"value": "```lean\nleast_n_of_80325_dvd_nfactorial {n! : ℕ} : IsLeast {n | 80325 ∣ n!} 17\n```", "kind": "markdown"}}
{"character": "_", "row": 3, "column": 24, "range": {"start": {"line": 3, "character": 8}, "end": {"line": 3, "character": 39}}, "contents": {"value": "```lean\nleast_n_of_80325_dvd_nfactorial {n! : ℕ} : IsLeast {n | 80325 ∣ n!} 17\n```", "kind": "markdown"}}
{"character": "d", "row": 3, "column": 25, "range": {"start": {"line": 3, "character": 8}, "end": {"line": 3, "character": 39}}, "contents": {"value": "```lean\nleast_n_of_80325_dvd_nfactorial {n! : ℕ} : IsLeast {n | 80325 ∣ n!} 17\n```", "kind": "markdown"}}
{"character": "v", "row": 3, "column": 26, "range": {"start": {"line": 3, "character": 8}, "end": {"line": 3, "character": 39}}, "contents": {"value": "```lean\nleast_n_of_80325_dvd_nfactorial {n! : ℕ} : IsLeast {n | 80325 ∣ n!} 17\n```", "kind": "markdown"}}
{"character": "d", "row": 3, "column": 27, "range": {"start": {"line": 3, "character": 8}, "end": {"line": 3, "character": 39}}, "contents": {"value": "```lean\nleast_n_of_80325_dvd_nfactorial {n! : ℕ} : IsLeast {n | 80325 ∣ n!} 17\n```", "kind": "markdown"}}
{"character": "_", "row": 3, "column": 28, "range": {"start": {"line": 3, "character": 8}, "end": {"line": 3, "character": 39}}, "contents": {"value": "```lean\nleast_n_of_80325_dvd_nfactorial {n! : ℕ} : IsLeast {n | 80325 ∣ n!} 17\n```", "kind": "markdown"}}
{"character": "n", "row": 3, "column": 29, "range": {"start": {"line": 3, "character": 8}, "end": {"line": 3, "character": 39}}, "contents": {"value": "```lean\nleast_n_of_80325_dvd_nfactorial {n! : ℕ} : IsLeast {n | 80325 ∣ n!} 17\n```", "kind": "markdown"}}
{"character": "f", "row": 3, "column": 30, "range": {"start": {"line": 3, "character": 8}, "end": {"line": 3, "character": 39}}, "contents": {"value": "```lean\nleast_n_of_80325_dvd_nfactorial {n! : ℕ} : IsLeast {n | 80325 ∣ n!} 17\n```", "kind": "markdown"}}
{"character": "a", "row": 3, "column": 31, "range": {"start": {"line": 3, "character": 8}, "end": {"line": 3, "character": 39}}, "contents": {"value": "```lean\nleast_n_of_80325_dvd_nfactorial {n! : ℕ} : IsLeast {n | 80325 ∣ n!} 17\n```", "kind": "markdown"}}
{"character": "c", "row": 3, "column": 32, "range": {"start": {"line": 3, "character": 8}, "end": {"line": 3, "character": 39}}, "contents": {"value": "```lean\nleast_n_of_80325_dvd_nfactorial {n! : ℕ} : IsLeast {n | 80325 ∣ n!} 17\n```", "kind": "markdown"}}
{"character": "t", "row": 3, "column": 33, "range": {"start": {"line": 3, "character": 8}, "end": {"line": 3, "character": 39}}, "contents": {"value": "```lean\nleast_n_of_80325_dvd_nfactorial {n! : ℕ} : IsLeast {n | 80325 ∣ n!} 17\n```", "kind": "markdown"}}
{"character": "o", "row": 3, "column": 34, "range": {"start": {"line": 3, "character": 8}, "end": {"line": 3, "character": 39}}, "contents": {"value": "```lean\nleast_n_of_80325_dvd_nfactorial {n! : ℕ} : IsLeast {n | 80325 ∣ n!} 17\n```", "kind": "markdown"}}
{"character": "r", "row": 3, "column": 35, "range": {"start": {"line": 3, "character": 8}, "end": {"line": 3, "character": 39}}, "contents": {"value": "```lean\nleast_n_of_80325_dvd_nfactorial {n! : ℕ} : IsLeast {n | 80325 ∣ n!} 17\n```", "kind": "markdown"}}
{"character": "i", "row": 3, "column": 36, "range": {"start": {"line": 3, "character": 8}, "end": {"line": 3, "character": 39}}, "contents": {"value": "```lean\nleast_n_of_80325_dvd_nfactorial {n! : ℕ} : IsLeast {n | 80325 ∣ n!} 17\n```", "kind": "markdown"}}
{"character": "a", "row": 3, "column": 37, "range": {"start": {"line": 3, "character": 8}, "end": {"line": 3, "character": 39}}, "contents": {"value": "```lean\nleast_n_of_80325_dvd_nfactorial {n! : ℕ} : IsLeast {n | 80325 ∣ n!} 17\n```", "kind": "markdown"}}
{"character": "l", "row": 3, "column": 38, "range": {"start": {"line": 3, "character": 8}, "end": {"line": 3, "character": 39}}, "contents": {"value": "```lean\nleast_n_of_80325_dvd_nfactorial {n! : ℕ} : IsLeast {n | 80325 ∣ n!} 17\n```", "kind": "markdown"}}
{"character": " ", "row": 3, "column": 39}
{"character": "{", "row": 3, "column": 40, "range": {"start": {"line": 3, "character": 40}, "end": {"line": 3, "character": 48}}, "contents": {"value": "Implicit binder, like `{x y : A}` or `{x y}`.\nIn regular applications, whenever all parameters before it have been specified,\nthen a `_` placeholder is automatically inserted for this parameter.\nImplicit parameters should be able to be determined from the other arguments and the return type\nby unification.\n\nIn `@` explicit mode, implicit binders behave like explicit binders.\n", "kind": "markdown"}}
{"character": "n", "row": 3, "column": 41, "range": {"start": {"line": 3, "character": 41}, "end": {"line": 3, "character": 43}}, "contents": {"value": "```lean\nn! : ℕ\n```", "kind": "markdown"}}
{"character": "!", "row": 3, "column": 42, "range": {"start": {"line": 3, "character": 41}, "end": {"line": 3, "character": 43}}, "contents": {"value": "```lean\nn! : ℕ\n```", "kind": "markdown"}}
{"character": " ", "row": 3, "column": 43}
{"character": ":", "row": 3, "column": 44, "range": {"start": {"line": 3, "character": 40}, "end": {"line": 3, "character": 48}}, "contents": {"value": "Implicit binder, like `{x y : A}` or `{x y}`.\nIn regular applications, whenever all parameters before it have been specified,\nthen a `_` placeholder is automatically inserted for this parameter.\nImplicit parameters should be able to be determined from the other arguments and the return type\nby unification.\n\nIn `@` explicit mode, implicit binders behave like explicit binders.\n", "kind": "markdown"}}
{"character": " ", "row": 3, "column": 45}
{"character": "ℕ", "row": 3, "column": 46, "range": {"start": {"line": 3, "character": 46}, "end": {"line": 3, "character": 47}}, "contents": {"value": "```lean\nNat : Type\n```\n***\nThe natural numbers, starting at zero.\n\nThis type is special-cased by both the kernel and the compiler, and overridden with an efficient\nimplementation. Both use a fast arbitrary-precision arithmetic library (usually\n[GMP](https://gmplib.org/)); at runtime, `Nat` values that are sufficiently small are unboxed.\n\n***\n*import Init.Prelude*", "kind": "markdown"}}
{"character": "}", "row": 3, "column": 47, "range": {"start": {"line": 3, "character": 40}, "end": {"line": 3, "character": 48}}, "contents": {"value": "Implicit binder, like `{x y : A}` or `{x y}`.\nIn regular applications, whenever all parameters before it have been specified,\nthen a `_` placeholder is automatically inserted for this parameter.\nImplicit parameters should be able to be determined from the other arguments and the return type\nby unification.\n\nIn `@` explicit mode, implicit binders behave like explicit binders.\n", "kind": "markdown"}}
{"character": " ", "row": 3, "column": 48}
{"character": ":", "row": 3, "column": 49, "range": {"start": {"line": 3, "character": 40}, "end": {"line": 3, "character": 78}}, "contents": {"value": "`declSig` matches the signature of a declaration with required type: a list of binders and then `: type` ", "kind": "markdown"}}
{"character": " ", "row": 3, "column": 50}
{"character": "I", "row": 3, "column": 51, "range": {"start": {"line": 3, "character": 51}, "end": {"line": 3, "character": 58}}, "contents": {"value": "```lean\nIsLeast.{u_1} {α : Type u_1} [LE α] (s : Set α) (a : α) : Prop\n```\n***\n`a` is a least element of a set `s`; for a partial order, it is unique if exists. \n***\n*import Mathlib.Order.Bounds.Defs*", "kind": "markdown"}}
{"character": "s", "row": 3, "column": 52, "range": {"start": {"line": 3, "character": 51}, "end": {"line": 3, "character": 58}}, "contents": {"value": "```lean\nIsLeast.{u_1} {α : Type u_1} [LE α] (s : Set α) (a : α) : Prop\n```\n***\n`a` is a least element of a set `s`; for a partial order, it is unique if exists. \n***\n*import Mathlib.Order.Bounds.Defs*", "kind": "markdown"}}
{"character": "L", "row": 3, "column": 53, "range": {"start": {"line": 3, "character": 51}, "end": {"line": 3, "character": 58}}, "contents": {"value": "```lean\nIsLeast.{u_1} {α : Type u_1} [LE α] (s : Set α) (a : α) : Prop\n```\n***\n`a` is a least element of a set `s`; for a partial order, it is unique if exists. \n***\n*import Mathlib.Order.Bounds.Defs*", "kind": "markdown"}}
{"character": "e", "row": 3, "column": 54, "range": {"start": {"line": 3, "character": 51}, "end": {"line": 3, "character": 58}}, "contents": {"value": "```lean\nIsLeast.{u_1} {α : Type u_1} [LE α] (s : Set α) (a : α) : Prop\n```\n***\n`a` is a least element of a set `s`; for a partial order, it is unique if exists. \n***\n*import Mathlib.Order.Bounds.Defs*", "kind": "markdown"}}
{"character": "a", "row": 3, "column": 55, "range": {"start": {"line": 3, "character": 51}, "end": {"line": 3, "character": 58}}, "contents": {"value": "```lean\nIsLeast.{u_1} {α : Type u_1} [LE α] (s : Set α) (a : α) : Prop\n```\n***\n`a` is a least element of a set `s`; for a partial order, it is unique if exists. \n***\n*import Mathlib.Order.Bounds.Defs*", "kind": "markdown"}}
{"character": "s", "row": 3, "column": 56, "range": {"start": {"line": 3, "character": 51}, "end": {"line": 3, "character": 58}}, "contents": {"value": "```lean\nIsLeast.{u_1} {α : Type u_1} [LE α] (s : Set α) (a : α) : Prop\n```\n***\n`a` is a least element of a set `s`; for a partial order, it is unique if exists. \n***\n*import Mathlib.Order.Bounds.Defs*", "kind": "markdown"}}
{"character": "t", "row": 3, "column": 57, "range": {"start": {"line": 3, "character": 51}, "end": {"line": 3, "character": 58}}, "contents": {"value": "```lean\nIsLeast.{u_1} {α : Type u_1} [LE α] (s : Set α) (a : α) : Prop\n```\n***\n`a` is a least element of a set `s`; for a partial order, it is unique if exists. \n***\n*import Mathlib.Order.Bounds.Defs*", "kind": "markdown"}}
{"character": " ", "row": 3, "column": 58, "range": {"start": {"line": 3, "character": 51}, "end": {"line": 3, "character": 78}}, "contents": {"value": "```lean\nProp\n```", "kind": "markdown"}}
{"character": "{", "row": 3, "column": 59, "range": {"start": {"line": 3, "character": 59}, "end": {"line": 3, "character": 75}}, "contents": {"value": "Set builder syntax. This can be elaborated to either a `Set` or a `Finset` depending on context.\n\nThe elaborators for this syntax are located in:\n* `Data.Set.Defs` for the `Set` builder notation elaborator for syntax of the form `{x | p x}`,\n  `{x : α | p x}`, `{binder x | p x}`.\n* `Data.Finset.Basic` for the `Finset` builder notation elaborator for syntax of the form\n  `{x ∈ s | p x}`.\n* `Data.Fintype.Basic` for the `Finset` builder notation elaborator for syntax of the form\n  `{x | p x}`, `{x : α | p x}`, `{x ∉ s | p x}`, `{x ≠ a | p x}`.\n* `Order.LocallyFinite.Basic` for the `Finset` builder notation elaborator for syntax of the form\n  `{x ≤ a | p x}`, `{x ≥ a | p x}`, `{x < a | p x}`, `{x > a | p x}`.\n", "kind": "markdown"}}
{"character": "n", "row": 3, "column": 60, "range": {"start": {"line": 3, "character": 60}, "end": {"line": 3, "character": 61}}, "contents": {"value": "```lean\nn : ℕ\n```", "kind": "markdown"}}
{"character": " ", "row": 3, "column": 61, "range": {"start": {"line": 3, "character": 59}, "end": {"line": 3, "character": 75}}, "contents": {"value": "Set builder syntax. This can be elaborated to either a `Set` or a `Finset` depending on context.\n\nThe elaborators for this syntax are located in:\n* `Data.Set.Defs` for the `Set` builder notation elaborator for syntax of the form `{x | p x}`,\n  `{x : α | p x}`, `{binder x | p x}`.\n* `Data.Finset.Basic` for the `Finset` builder notation elaborator for syntax of the form\n  `{x ∈ s | p x}`.\n* `Data.Fintype.Basic` for the `Finset` builder notation elaborator for syntax of the form\n  `{x | p x}`, `{x : α | p x}`, `{x ∉ s | p x}`, `{x ≠ a | p x}`.\n* `Order.LocallyFinite.Basic` for the `Finset` builder notation elaborator for syntax of the form\n  `{x ≤ a | p x}`, `{x ≥ a | p x}`, `{x < a | p x}`, `{x > a | p x}`.\n", "kind": "markdown"}}
{"character": "|", "row": 3, "column": 62, "range": {"start": {"line": 3, "character": 59}, "end": {"line": 3, "character": 75}}, "contents": {"value": "Set builder syntax. This can be elaborated to either a `Set` or a `Finset` depending on context.\n\nThe elaborators for this syntax are located in:\n* `Data.Set.Defs` for the `Set` builder notation elaborator for syntax of the form `{x | p x}`,\n  `{x : α | p x}`, `{binder x | p x}`.\n* `Data.Finset.Basic` for the `Finset` builder notation elaborator for syntax of the form\n  `{x ∈ s | p x}`.\n* `Data.Fintype.Basic` for the `Finset` builder notation elaborator for syntax of the form\n  `{x | p x}`, `{x : α | p x}`, `{x ∉ s | p x}`, `{x ≠ a | p x}`.\n* `Order.LocallyFinite.Basic` for the `Finset` builder notation elaborator for syntax of the form\n  `{x ≤ a | p x}`, `{x ≥ a | p x}`, `{x < a | p x}`, `{x > a | p x}`.\n", "kind": "markdown"}}
{"character": " ", "row": 3, "column": 63, "range": {"start": {"line": 3, "character": 59}, "end": {"line": 3, "character": 75}}, "contents": {"value": "Set builder syntax. This can be elaborated to either a `Set` or a `Finset` depending on context.\n\nThe elaborators for this syntax are located in:\n* `Data.Set.Defs` for the `Set` builder notation elaborator for syntax of the form `{x | p x}`,\n  `{x : α | p x}`, `{binder x | p x}`.\n* `Data.Finset.Basic` for the `Finset` builder notation elaborator for syntax of the form\n  `{x ∈ s | p x}`.\n* `Data.Fintype.Basic` for the `Finset` builder notation elaborator for syntax of the form\n  `{x | p x}`, `{x : α | p x}`, `{x ∉ s | p x}`, `{x ≠ a | p x}`.\n* `Order.LocallyFinite.Basic` for the `Finset` builder notation elaborator for syntax of the form\n  `{x ≤ a | p x}`, `{x ≥ a | p x}`, `{x < a | p x}`, `{x > a | p x}`.\n", "kind": "markdown"}}
{"character": "8", "row": 3, "column": 64, "range": {"start": {"line": 3, "character": 64}, "end": {"line": 3, "character": 69}}, "contents": {"value": "```lean\n80325 : ℕ\n```", "kind": "markdown"}}
{"character": "0", "row": 3, "column": 65, "range": {"start": {"line": 3, "character": 64}, "end": {"line": 3, "character": 69}}, "contents": {"value": "```lean\n80325 : ℕ\n```", "kind": "markdown"}}
{"character": "3", "row": 3, "column": 66, "range": {"start": {"line": 3, "character": 64}, "end": {"line": 3, "character": 69}}, "contents": {"value": "```lean\n80325 : ℕ\n```", "kind": "markdown"}}
{"character": "2", "row": 3, "column": 67, "range": {"start": {"line": 3, "character": 64}, "end": {"line": 3, "character": 69}}, "contents": {"value": "```lean\n80325 : ℕ\n```", "kind": "markdown"}}
{"character": "5", "row": 3, "column": 68, "range": {"start": {"line": 3, "character": 64}, "end": {"line": 3, "character": 69}}, "contents": {"value": "```lean\n80325 : ℕ\n```", "kind": "markdown"}}
{"character": " ", "row": 3, "column": 69, "range": {"start": {"line": 3, "character": 64}, "end": {"line": 3, "character": 74}}, "contents": {"value": "```lean\nProp\n```\n***\nDivisibility. `a ∣ b` (typed as `\\|`) means that there is some `c` such that `b = a * c`. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `∣` in identifiers is `dvd`.", "kind": "markdown"}}
{"character": "∣", "row": 3, "column": 70, "range": {"start": {"line": 3, "character": 64}, "end": {"line": 3, "character": 74}}, "contents": {"value": "```lean\nProp\n```\n***\nDivisibility. `a ∣ b` (typed as `\\|`) means that there is some `c` such that `b = a * c`. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `∣` in identifiers is `dvd`.", "kind": "markdown"}}
{"character": " ", "row": 3, "column": 71, "range": {"start": {"line": 3, "character": 64}, "end": {"line": 3, "character": 74}}, "contents": {"value": "```lean\nProp\n```\n***\nDivisibility. `a ∣ b` (typed as `\\|`) means that there is some `c` such that `b = a * c`. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `∣` in identifiers is `dvd`.", "kind": "markdown"}}
{"character": "n", "row": 3, "column": 72, "range": {"start": {"line": 3, "character": 72}, "end": {"line": 3, "character": 74}}, "contents": {"value": "```lean\nn! : ℕ\n```", "kind": "markdown"}}
{"character": "!", "row": 3, "column": 73, "range": {"start": {"line": 3, "character": 72}, "end": {"line": 3, "character": 74}}, "contents": {"value": "```lean\nn! : ℕ\n```", "kind": "markdown"}}
{"character": "}", "row": 3, "column": 74, "range": {"start": {"line": 3, "character": 59}, "end": {"line": 3, "character": 75}}, "contents": {"value": "Set builder syntax. This can be elaborated to either a `Set` or a `Finset` depending on context.\n\nThe elaborators for this syntax are located in:\n* `Data.Set.Defs` for the `Set` builder notation elaborator for syntax of the form `{x | p x}`,\n  `{x : α | p x}`, `{binder x | p x}`.\n* `Data.Finset.Basic` for the `Finset` builder notation elaborator for syntax of the form\n  `{x ∈ s | p x}`.\n* `Data.Fintype.Basic` for the `Finset` builder notation elaborator for syntax of the form\n  `{x | p x}`, `{x : α | p x}`, `{x ∉ s | p x}`, `{x ≠ a | p x}`.\n* `Order.LocallyFinite.Basic` for the `Finset` builder notation elaborator for syntax of the form\n  `{x ≤ a | p x}`, `{x ≥ a | p x}`, `{x < a | p x}`, `{x > a | p x}`.\n", "kind": "markdown"}}
{"character": " ", "row": 3, "column": 75, "range": {"start": {"line": 3, "character": 51}, "end": {"line": 3, "character": 78}}, "contents": {"value": "```lean\nProp\n```", "kind": "markdown"}}
{"character": "1", "row": 3, "column": 76, "range": {"start": {"line": 3, "character": 76}, "end": {"line": 3, "character": 78}}, "contents": {"value": "```lean\n17 : ℕ\n```", "kind": "markdown"}}
{"character": "7", "row": 3, "column": 77, "range": {"start": {"line": 3, "character": 76}, "end": {"line": 3, "character": 78}}, "contents": {"value": "```lean\n17 : ℕ\n```", "kind": "markdown"}}
{"character": " ", "row": 3, "column": 78}
{"character": ":", "row": 3, "column": 79}
{"character": "=", "row": 3, "column": 80}
{"character": " ", "row": 3, "column": 81}
{"character": "b", "row": 3, "column": 82, "range": {"start": {"line": 3, "character": 82}, "end": {"line": 3, "character": 90}}, "contents": {"value": "`by tac` constructs a term of the expected type by running the tactic(s) `tac`. ", "kind": "markdown"}}
{"character": "y", "row": 3, "column": 83, "range": {"start": {"line": 3, "character": 82}, "end": {"line": 3, "character": 90}}, "contents": {"value": "`by tac` constructs a term of the expected type by running the tactic(s) `tac`. ", "kind": "markdown"}}
{"character": " ", "row": 3, "column": 84, "range": {"start": {"line": 3, "character": 82}, "end": {"line": 3, "character": 90}}, "contents": {"value": "`by tac` constructs a term of the expected type by running the tactic(s) `tac`. ", "kind": "markdown"}}
{"character": "s", "row": 3, "column": 85, "range": {"start": {"line": 3, "character": 85}, "end": {"line": 3, "character": 90}}, "contents": {"value": "The `sorry` tactic is a temporary placeholder for an incomplete tactic proof,\nclosing the main goal using `exact sorry`.\n\nThis is intended for stubbing-out incomplete parts of a proof while still having a syntactically correct proof skeleton.\nLean will give a warning whenever a proof uses `sorry`, so you aren't likely to miss it,\nbut you can double check if a theorem depends on `sorry` by looking for `sorryAx` in the output\nof the `#print axioms my_thm` command, the axiom used by the implementation of `sorry`.\n", "kind": "markdown"}}
{"character": "o", "row": 3, "column": 86, "range": {"start": {"line": 3, "character": 85}, "end": {"line": 3, "character": 90}}, "contents": {"value": "The `sorry` tactic is a temporary placeholder for an incomplete tactic proof,\nclosing the main goal using `exact sorry`.\n\nThis is intended for stubbing-out incomplete parts of a proof while still having a syntactically correct proof skeleton.\nLean will give a warning whenever a proof uses `sorry`, so you aren't likely to miss it,\nbut you can double check if a theorem depends on `sorry` by looking for `sorryAx` in the output\nof the `#print axioms my_thm` command, the axiom used by the implementation of `sorry`.\n", "kind": "markdown"}}
{"character": "r", "row": 3, "column": 87, "range": {"start": {"line": 3, "character": 85}, "end": {"line": 3, "character": 90}}, "contents": {"value": "The `sorry` tactic is a temporary placeholder for an incomplete tactic proof,\nclosing the main goal using `exact sorry`.\n\nThis is intended for stubbing-out incomplete parts of a proof while still having a syntactically correct proof skeleton.\nLean will give a warning whenever a proof uses `sorry`, so you aren't likely to miss it,\nbut you can double check if a theorem depends on `sorry` by looking for `sorryAx` in the output\nof the `#print axioms my_thm` command, the axiom used by the implementation of `sorry`.\n", "kind": "markdown"}}
{"character": "r", "row": 3, "column": 88, "range": {"start": {"line": 3, "character": 85}, "end": {"line": 3, "character": 90}}, "contents": {"value": "The `sorry` tactic is a temporary placeholder for an incomplete tactic proof,\nclosing the main goal using `exact sorry`.\n\nThis is intended for stubbing-out incomplete parts of a proof while still having a syntactically correct proof skeleton.\nLean will give a warning whenever a proof uses `sorry`, so you aren't likely to miss it,\nbut you can double check if a theorem depends on `sorry` by looking for `sorryAx` in the output\nof the `#print axioms my_thm` command, the axiom used by the implementation of `sorry`.\n", "kind": "markdown"}}
{"character": "y", "row": 3, "column": 89, "range": {"start": {"line": 3, "character": 85}, "end": {"line": 3, "character": 90}}, "contents": {"value": "The `sorry` tactic is a temporary placeholder for an incomplete tactic proof,\nclosing the main goal using `exact sorry`.\n\nThis is intended for stubbing-out incomplete parts of a proof while still having a syntactically correct proof skeleton.\nLean will give a warning whenever a proof uses `sorry`, so you aren't likely to miss it,\nbut you can double check if a theorem depends on `sorry` by looking for `sorryAx` in the output\nof the `#print axioms my_thm` command, the axiom used by the implementation of `sorry`.\n", "kind": "markdown"}}
