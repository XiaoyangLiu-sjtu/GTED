{"character": "i", "row": 0, "column": 0}
{"character": "m", "row": 0, "column": 1}
{"character": "p", "row": 0, "column": 2}
{"character": "o", "row": 0, "column": 3}
{"character": "r", "row": 0, "column": 4}
{"character": "t", "row": 0, "column": 5}
{"character": " ", "row": 0, "column": 6}
{"character": "M", "row": 0, "column": 7}
{"character": "a", "row": 0, "column": 8}
{"character": "t", "row": 0, "column": 9}
{"character": "h", "row": 0, "column": 10}
{"character": "l", "row": 0, "column": 11}
{"character": "i", "row": 0, "column": 12}
{"character": "b", "row": 0, "column": 13}
{"character": "t", "row": 2, "column": 0}
{"character": "h", "row": 2, "column": 1}
{"character": "e", "row": 2, "column": 2}
{"character": "o", "row": 2, "column": 3}
{"character": "r", "row": 2, "column": 4}
{"character": "e", "row": 2, "column": 5}
{"character": "m", "row": 2, "column": 6}
{"character": " ", "row": 2, "column": 7}
{"character": "f", "row": 2, "column": 8, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 32}}, "contents": {"value": "```lean\nfactorial_lt_pow_sub_one {n! : ℕ} (n : ℕ) (hn : 3 ≤ n) : n! < n ^ (n - 1)\n```", "kind": "markdown"}}
{"character": "a", "row": 2, "column": 9, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 32}}, "contents": {"value": "```lean\nfactorial_lt_pow_sub_one {n! : ℕ} (n : ℕ) (hn : 3 ≤ n) : n! < n ^ (n - 1)\n```", "kind": "markdown"}}
{"character": "c", "row": 2, "column": 10, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 32}}, "contents": {"value": "```lean\nfactorial_lt_pow_sub_one {n! : ℕ} (n : ℕ) (hn : 3 ≤ n) : n! < n ^ (n - 1)\n```", "kind": "markdown"}}
{"character": "t", "row": 2, "column": 11, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 32}}, "contents": {"value": "```lean\nfactorial_lt_pow_sub_one {n! : ℕ} (n : ℕ) (hn : 3 ≤ n) : n! < n ^ (n - 1)\n```", "kind": "markdown"}}
{"character": "o", "row": 2, "column": 12, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 32}}, "contents": {"value": "```lean\nfactorial_lt_pow_sub_one {n! : ℕ} (n : ℕ) (hn : 3 ≤ n) : n! < n ^ (n - 1)\n```", "kind": "markdown"}}
{"character": "r", "row": 2, "column": 13, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 32}}, "contents": {"value": "```lean\nfactorial_lt_pow_sub_one {n! : ℕ} (n : ℕ) (hn : 3 ≤ n) : n! < n ^ (n - 1)\n```", "kind": "markdown"}}
{"character": "i", "row": 2, "column": 14, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 32}}, "contents": {"value": "```lean\nfactorial_lt_pow_sub_one {n! : ℕ} (n : ℕ) (hn : 3 ≤ n) : n! < n ^ (n - 1)\n```", "kind": "markdown"}}
{"character": "a", "row": 2, "column": 15, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 32}}, "contents": {"value": "```lean\nfactorial_lt_pow_sub_one {n! : ℕ} (n : ℕ) (hn : 3 ≤ n) : n! < n ^ (n - 1)\n```", "kind": "markdown"}}
{"character": "l", "row": 2, "column": 16, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 32}}, "contents": {"value": "```lean\nfactorial_lt_pow_sub_one {n! : ℕ} (n : ℕ) (hn : 3 ≤ n) : n! < n ^ (n - 1)\n```", "kind": "markdown"}}
{"character": "_", "row": 2, "column": 17, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 32}}, "contents": {"value": "```lean\nfactorial_lt_pow_sub_one {n! : ℕ} (n : ℕ) (hn : 3 ≤ n) : n! < n ^ (n - 1)\n```", "kind": "markdown"}}
{"character": "l", "row": 2, "column": 18, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 32}}, "contents": {"value": "```lean\nfactorial_lt_pow_sub_one {n! : ℕ} (n : ℕ) (hn : 3 ≤ n) : n! < n ^ (n - 1)\n```", "kind": "markdown"}}
{"character": "t", "row": 2, "column": 19, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 32}}, "contents": {"value": "```lean\nfactorial_lt_pow_sub_one {n! : ℕ} (n : ℕ) (hn : 3 ≤ n) : n! < n ^ (n - 1)\n```", "kind": "markdown"}}
{"character": "_", "row": 2, "column": 20, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 32}}, "contents": {"value": "```lean\nfactorial_lt_pow_sub_one {n! : ℕ} (n : ℕ) (hn : 3 ≤ n) : n! < n ^ (n - 1)\n```", "kind": "markdown"}}
{"character": "p", "row": 2, "column": 21, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 32}}, "contents": {"value": "```lean\nfactorial_lt_pow_sub_one {n! : ℕ} (n : ℕ) (hn : 3 ≤ n) : n! < n ^ (n - 1)\n```", "kind": "markdown"}}
{"character": "o", "row": 2, "column": 22, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 32}}, "contents": {"value": "```lean\nfactorial_lt_pow_sub_one {n! : ℕ} (n : ℕ) (hn : 3 ≤ n) : n! < n ^ (n - 1)\n```", "kind": "markdown"}}
{"character": "w", "row": 2, "column": 23, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 32}}, "contents": {"value": "```lean\nfactorial_lt_pow_sub_one {n! : ℕ} (n : ℕ) (hn : 3 ≤ n) : n! < n ^ (n - 1)\n```", "kind": "markdown"}}
{"character": "_", "row": 2, "column": 24, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 32}}, "contents": {"value": "```lean\nfactorial_lt_pow_sub_one {n! : ℕ} (n : ℕ) (hn : 3 ≤ n) : n! < n ^ (n - 1)\n```", "kind": "markdown"}}
{"character": "s", "row": 2, "column": 25, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 32}}, "contents": {"value": "```lean\nfactorial_lt_pow_sub_one {n! : ℕ} (n : ℕ) (hn : 3 ≤ n) : n! < n ^ (n - 1)\n```", "kind": "markdown"}}
{"character": "u", "row": 2, "column": 26, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 32}}, "contents": {"value": "```lean\nfactorial_lt_pow_sub_one {n! : ℕ} (n : ℕ) (hn : 3 ≤ n) : n! < n ^ (n - 1)\n```", "kind": "markdown"}}
{"character": "b", "row": 2, "column": 27, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 32}}, "contents": {"value": "```lean\nfactorial_lt_pow_sub_one {n! : ℕ} (n : ℕ) (hn : 3 ≤ n) : n! < n ^ (n - 1)\n```", "kind": "markdown"}}
{"character": "_", "row": 2, "column": 28, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 32}}, "contents": {"value": "```lean\nfactorial_lt_pow_sub_one {n! : ℕ} (n : ℕ) (hn : 3 ≤ n) : n! < n ^ (n - 1)\n```", "kind": "markdown"}}
{"character": "o", "row": 2, "column": 29, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 32}}, "contents": {"value": "```lean\nfactorial_lt_pow_sub_one {n! : ℕ} (n : ℕ) (hn : 3 ≤ n) : n! < n ^ (n - 1)\n```", "kind": "markdown"}}
{"character": "n", "row": 2, "column": 30, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 32}}, "contents": {"value": "```lean\nfactorial_lt_pow_sub_one {n! : ℕ} (n : ℕ) (hn : 3 ≤ n) : n! < n ^ (n - 1)\n```", "kind": "markdown"}}
{"character": "e", "row": 2, "column": 31, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 32}}, "contents": {"value": "```lean\nfactorial_lt_pow_sub_one {n! : ℕ} (n : ℕ) (hn : 3 ≤ n) : n! < n ^ (n - 1)\n```", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 32}
{"character": "{", "row": 2, "column": 33, "range": {"start": {"line": 2, "character": 33}, "end": {"line": 2, "character": 41}}, "contents": {"value": "Implicit binder, like `{x y : A}` or `{x y}`.\nIn regular applications, whenever all parameters before it have been specified,\nthen a `_` placeholder is automatically inserted for this parameter.\nImplicit parameters should be able to be determined from the other arguments and the return type\nby unification.\n\nIn `@` explicit mode, implicit binders behave like explicit binders.\n", "kind": "markdown"}}
{"character": "n", "row": 2, "column": 34, "range": {"start": {"line": 2, "character": 34}, "end": {"line": 2, "character": 36}}, "contents": {"value": "```lean\nn! : ℕ\n```", "kind": "markdown"}}
{"character": "!", "row": 2, "column": 35, "range": {"start": {"line": 2, "character": 34}, "end": {"line": 2, "character": 36}}, "contents": {"value": "```lean\nn! : ℕ\n```", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 36}
{"character": ":", "row": 2, "column": 37, "range": {"start": {"line": 2, "character": 33}, "end": {"line": 2, "character": 41}}, "contents": {"value": "Implicit binder, like `{x y : A}` or `{x y}`.\nIn regular applications, whenever all parameters before it have been specified,\nthen a `_` placeholder is automatically inserted for this parameter.\nImplicit parameters should be able to be determined from the other arguments and the return type\nby unification.\n\nIn `@` explicit mode, implicit binders behave like explicit binders.\n", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 38}
{"character": "ℕ", "row": 2, "column": 39, "range": {"start": {"line": 2, "character": 39}, "end": {"line": 2, "character": 40}}, "contents": {"value": "```lean\nNat : Type\n```\n***\nThe natural numbers, starting at zero.\n\nThis type is special-cased by both the kernel and the compiler, and overridden with an efficient\nimplementation. Both use a fast arbitrary-precision arithmetic library (usually\n[GMP](https://gmplib.org/)); at runtime, `Nat` values that are sufficiently small are unboxed.\n\n***\n*import Init.Prelude*", "kind": "markdown"}}
{"character": "}", "row": 2, "column": 40, "range": {"start": {"line": 2, "character": 33}, "end": {"line": 2, "character": 41}}, "contents": {"value": "Implicit binder, like `{x y : A}` or `{x y}`.\nIn regular applications, whenever all parameters before it have been specified,\nthen a `_` placeholder is automatically inserted for this parameter.\nImplicit parameters should be able to be determined from the other arguments and the return type\nby unification.\n\nIn `@` explicit mode, implicit binders behave like explicit binders.\n", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 41}
{"character": "(", "row": 2, "column": 42, "range": {"start": {"line": 2, "character": 42}, "end": {"line": 2, "character": 49}}, "contents": {"value": "Explicit binder, like `(x y : A)` or `(x y)`.\nDefault values can be specified using `(x : A := v)` syntax, and tactics using `(x : A := by tac)`.\n", "kind": "markdown"}}
{"character": "n", "row": 2, "column": 43, "range": {"start": {"line": 2, "character": 43}, "end": {"line": 2, "character": 44}}, "contents": {"value": "```lean\nn : ℕ\n```", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 44}
{"character": ":", "row": 2, "column": 45, "range": {"start": {"line": 2, "character": 42}, "end": {"line": 2, "character": 49}}, "contents": {"value": "Explicit binder, like `(x y : A)` or `(x y)`.\nDefault values can be specified using `(x : A := v)` syntax, and tactics using `(x : A := by tac)`.\n", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 46}
{"character": "ℕ", "row": 2, "column": 47, "range": {"start": {"line": 2, "character": 47}, "end": {"line": 2, "character": 48}}, "contents": {"value": "```lean\nNat : Type\n```\n***\nThe natural numbers, starting at zero.\n\nThis type is special-cased by both the kernel and the compiler, and overridden with an efficient\nimplementation. Both use a fast arbitrary-precision arithmetic library (usually\n[GMP](https://gmplib.org/)); at runtime, `Nat` values that are sufficiently small are unboxed.\n\n***\n*import Init.Prelude*", "kind": "markdown"}}
{"character": ")", "row": 2, "column": 48, "range": {"start": {"line": 2, "character": 42}, "end": {"line": 2, "character": 49}}, "contents": {"value": "Explicit binder, like `(x y : A)` or `(x y)`.\nDefault values can be specified using `(x : A := v)` syntax, and tactics using `(x : A := by tac)`.\n", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 49}
{"character": "(", "row": 2, "column": 50, "range": {"start": {"line": 2, "character": 50}, "end": {"line": 2, "character": 62}}, "contents": {"value": "Explicit binder, like `(x y : A)` or `(x y)`.\nDefault values can be specified using `(x : A := v)` syntax, and tactics using `(x : A := by tac)`.\n", "kind": "markdown"}}
{"character": "h", "row": 2, "column": 51, "range": {"start": {"line": 2, "character": 51}, "end": {"line": 2, "character": 53}}, "contents": {"value": "```lean\nhn : 3 ≤ n\n```", "kind": "markdown"}}
{"character": "n", "row": 2, "column": 52, "range": {"start": {"line": 2, "character": 51}, "end": {"line": 2, "character": 53}}, "contents": {"value": "```lean\nhn : 3 ≤ n\n```", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 53}
{"character": ":", "row": 2, "column": 54, "range": {"start": {"line": 2, "character": 50}, "end": {"line": 2, "character": 62}}, "contents": {"value": "Explicit binder, like `(x y : A)` or `(x y)`.\nDefault values can be specified using `(x : A := v)` syntax, and tactics using `(x : A := by tac)`.\n", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 55}
{"character": "3", "row": 2, "column": 56, "range": {"start": {"line": 2, "character": 56}, "end": {"line": 2, "character": 57}}, "contents": {"value": "```lean\n3 : ℕ\n```", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 57, "range": {"start": {"line": 2, "character": 56}, "end": {"line": 2, "character": 61}}, "contents": {"value": "```lean\nProp\n```\n***\nThe less-equal relation: `x ≤ y` \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `≤` in identifiers is `le`.", "kind": "markdown"}}
{"character": "≤", "row": 2, "column": 58, "range": {"start": {"line": 2, "character": 56}, "end": {"line": 2, "character": 61}}, "contents": {"value": "```lean\nProp\n```\n***\nThe less-equal relation: `x ≤ y` \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `≤` in identifiers is `le`.", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 59, "range": {"start": {"line": 2, "character": 56}, "end": {"line": 2, "character": 61}}, "contents": {"value": "```lean\nProp\n```\n***\nThe less-equal relation: `x ≤ y` \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `≤` in identifiers is `le`.", "kind": "markdown"}}
{"character": "n", "row": 2, "column": 60, "range": {"start": {"line": 2, "character": 60}, "end": {"line": 2, "character": 61}}, "contents": {"value": "```lean\nn : ℕ\n```", "kind": "markdown"}}
{"character": ")", "row": 2, "column": 61, "range": {"start": {"line": 2, "character": 50}, "end": {"line": 2, "character": 62}}, "contents": {"value": "Explicit binder, like `(x y : A)` or `(x y)`.\nDefault values can be specified using `(x : A := v)` syntax, and tactics using `(x : A := by tac)`.\n", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 62}
{"character": ":", "row": 2, "column": 63, "range": {"start": {"line": 2, "character": 33}, "end": {"line": 2, "character": 81}}, "contents": {"value": "`declSig` matches the signature of a declaration with required type: a list of binders and then `: type` ", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 64}
{"character": "n", "row": 2, "column": 65, "range": {"start": {"line": 2, "character": 65}, "end": {"line": 2, "character": 67}}, "contents": {"value": "```lean\nn! : ℕ\n```", "kind": "markdown"}}
{"character": "!", "row": 2, "column": 66, "range": {"start": {"line": 2, "character": 65}, "end": {"line": 2, "character": 67}}, "contents": {"value": "```lean\nn! : ℕ\n```", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 67, "range": {"start": {"line": 2, "character": 65}, "end": {"line": 2, "character": 81}}, "contents": {"value": "```lean\nProp\n```\n***\nThe less-than relation: `x < y` \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `<` in identifiers is `lt`.", "kind": "markdown"}}
{"character": "<", "row": 2, "column": 68, "range": {"start": {"line": 2, "character": 65}, "end": {"line": 2, "character": 81}}, "contents": {"value": "```lean\nProp\n```\n***\nThe less-than relation: `x < y` \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `<` in identifiers is `lt`.", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 69, "range": {"start": {"line": 2, "character": 65}, "end": {"line": 2, "character": 81}}, "contents": {"value": "```lean\nProp\n```\n***\nThe less-than relation: `x < y` \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `<` in identifiers is `lt`.", "kind": "markdown"}}
{"character": "n", "row": 2, "column": 70, "range": {"start": {"line": 2, "character": 70}, "end": {"line": 2, "character": 71}}, "contents": {"value": "```lean\nn : ℕ\n```", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 71, "range": {"start": {"line": 2, "character": 70}, "end": {"line": 2, "character": 81}}, "contents": {"value": "```lean\nℕ\n```\n***\n`a ^ b` computes `a` to the power of `b`.\nThe meaning of this notation is type-dependent. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `^` in identifiers is `pow`.", "kind": "markdown"}}
{"character": "^", "row": 2, "column": 72, "range": {"start": {"line": 2, "character": 70}, "end": {"line": 2, "character": 81}}, "contents": {"value": "```lean\nℕ\n```\n***\n`a ^ b` computes `a` to the power of `b`.\nThe meaning of this notation is type-dependent. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `^` in identifiers is `pow`.", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 73, "range": {"start": {"line": 2, "character": 70}, "end": {"line": 2, "character": 81}}, "contents": {"value": "```lean\nℕ\n```\n***\n`a ^ b` computes `a` to the power of `b`.\nThe meaning of this notation is type-dependent. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `^` in identifiers is `pow`.", "kind": "markdown"}}
{"character": "(", "row": 2, "column": 74, "range": {"start": {"line": 2, "character": 74}, "end": {"line": 2, "character": 81}}, "contents": {"value": "```lean\nℕ\n```\n***\nParentheses, used for grouping expressions (e.g., `a * (b + c)`).\nCan also be used for creating simple functions when combined with `·`. Here are some examples:\n  - `(· + 1)` is shorthand for `fun x => x + 1`\n  - `(· + ·)` is shorthand for `fun x y => x + y`\n  - `(f · a b)` is shorthand for `fun x => f x a b`\n  - `(h (· + 1) ·)` is shorthand for `fun x => h (fun y => y + 1) x`\n  - also applies to other parentheses-like notations such as `(·, 1)`\n", "kind": "markdown"}}
{"character": "n", "row": 2, "column": 75, "range": {"start": {"line": 2, "character": 75}, "end": {"line": 2, "character": 76}}, "contents": {"value": "```lean\nn : ℕ\n```", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 76, "range": {"start": {"line": 2, "character": 75}, "end": {"line": 2, "character": 80}}, "contents": {"value": "```lean\nℕ\n```\n***\n`a - b` computes the difference of `a` and `b`.\nThe meaning of this notation is type-dependent.\n* For natural numbers, this operator saturates at 0: `a - b = 0` when `a ≤ b`. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `-` in identifiers is `sub` (when used as a binary operator).", "kind": "markdown"}}
{"character": "-", "row": 2, "column": 77, "range": {"start": {"line": 2, "character": 75}, "end": {"line": 2, "character": 80}}, "contents": {"value": "```lean\nℕ\n```\n***\n`a - b` computes the difference of `a` and `b`.\nThe meaning of this notation is type-dependent.\n* For natural numbers, this operator saturates at 0: `a - b = 0` when `a ≤ b`. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `-` in identifiers is `sub` (when used as a binary operator).", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 78, "range": {"start": {"line": 2, "character": 75}, "end": {"line": 2, "character": 80}}, "contents": {"value": "```lean\nℕ\n```\n***\n`a - b` computes the difference of `a` and `b`.\nThe meaning of this notation is type-dependent.\n* For natural numbers, this operator saturates at 0: `a - b = 0` when `a ≤ b`. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `-` in identifiers is `sub` (when used as a binary operator).", "kind": "markdown"}}
{"character": "1", "row": 2, "column": 79, "range": {"start": {"line": 2, "character": 79}, "end": {"line": 2, "character": 80}}, "contents": {"value": "```lean\n1 : ℕ\n```", "kind": "markdown"}}
{"character": ")", "row": 2, "column": 80, "range": {"start": {"line": 2, "character": 74}, "end": {"line": 2, "character": 81}}, "contents": {"value": "```lean\nℕ\n```\n***\nParentheses, used for grouping expressions (e.g., `a * (b + c)`).\nCan also be used for creating simple functions when combined with `·`. Here are some examples:\n  - `(· + 1)` is shorthand for `fun x => x + 1`\n  - `(· + ·)` is shorthand for `fun x y => x + y`\n  - `(f · a b)` is shorthand for `fun x => f x a b`\n  - `(h (· + 1) ·)` is shorthand for `fun x => h (fun y => y + 1) x`\n  - also applies to other parentheses-like notations such as `(·, 1)`\n", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 81}
{"character": ":", "row": 2, "column": 82}
{"character": "=", "row": 2, "column": 83}
{"character": " ", "row": 2, "column": 84}
{"character": "b", "row": 2, "column": 85, "range": {"start": {"line": 2, "character": 85}, "end": {"line": 2, "character": 93}}, "contents": {"value": "`by tac` constructs a term of the expected type by running the tactic(s) `tac`. ", "kind": "markdown"}}
{"character": "y", "row": 2, "column": 86, "range": {"start": {"line": 2, "character": 85}, "end": {"line": 2, "character": 93}}, "contents": {"value": "`by tac` constructs a term of the expected type by running the tactic(s) `tac`. ", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 87, "range": {"start": {"line": 2, "character": 85}, "end": {"line": 2, "character": 93}}, "contents": {"value": "`by tac` constructs a term of the expected type by running the tactic(s) `tac`. ", "kind": "markdown"}}
{"character": "s", "row": 2, "column": 88, "range": {"start": {"line": 2, "character": 88}, "end": {"line": 2, "character": 93}}, "contents": {"value": "The `sorry` tactic is a temporary placeholder for an incomplete tactic proof,\nclosing the main goal using `exact sorry`.\n\nThis is intended for stubbing-out incomplete parts of a proof while still having a syntactically correct proof skeleton.\nLean will give a warning whenever a proof uses `sorry`, so you aren't likely to miss it,\nbut you can double check if a theorem depends on `sorry` by looking for `sorryAx` in the output\nof the `#print axioms my_thm` command, the axiom used by the implementation of `sorry`.\n", "kind": "markdown"}}
{"character": "o", "row": 2, "column": 89, "range": {"start": {"line": 2, "character": 88}, "end": {"line": 2, "character": 93}}, "contents": {"value": "The `sorry` tactic is a temporary placeholder for an incomplete tactic proof,\nclosing the main goal using `exact sorry`.\n\nThis is intended for stubbing-out incomplete parts of a proof while still having a syntactically correct proof skeleton.\nLean will give a warning whenever a proof uses `sorry`, so you aren't likely to miss it,\nbut you can double check if a theorem depends on `sorry` by looking for `sorryAx` in the output\nof the `#print axioms my_thm` command, the axiom used by the implementation of `sorry`.\n", "kind": "markdown"}}
{"character": "r", "row": 2, "column": 90, "range": {"start": {"line": 2, "character": 88}, "end": {"line": 2, "character": 93}}, "contents": {"value": "The `sorry` tactic is a temporary placeholder for an incomplete tactic proof,\nclosing the main goal using `exact sorry`.\n\nThis is intended for stubbing-out incomplete parts of a proof while still having a syntactically correct proof skeleton.\nLean will give a warning whenever a proof uses `sorry`, so you aren't likely to miss it,\nbut you can double check if a theorem depends on `sorry` by looking for `sorryAx` in the output\nof the `#print axioms my_thm` command, the axiom used by the implementation of `sorry`.\n", "kind": "markdown"}}
{"character": "r", "row": 2, "column": 91, "range": {"start": {"line": 2, "character": 88}, "end": {"line": 2, "character": 93}}, "contents": {"value": "The `sorry` tactic is a temporary placeholder for an incomplete tactic proof,\nclosing the main goal using `exact sorry`.\n\nThis is intended for stubbing-out incomplete parts of a proof while still having a syntactically correct proof skeleton.\nLean will give a warning whenever a proof uses `sorry`, so you aren't likely to miss it,\nbut you can double check if a theorem depends on `sorry` by looking for `sorryAx` in the output\nof the `#print axioms my_thm` command, the axiom used by the implementation of `sorry`.\n", "kind": "markdown"}}
{"character": "y", "row": 2, "column": 92, "range": {"start": {"line": 2, "character": 88}, "end": {"line": 2, "character": 93}}, "contents": {"value": "The `sorry` tactic is a temporary placeholder for an incomplete tactic proof,\nclosing the main goal using `exact sorry`.\n\nThis is intended for stubbing-out incomplete parts of a proof while still having a syntactically correct proof skeleton.\nLean will give a warning whenever a proof uses `sorry`, so you aren't likely to miss it,\nbut you can double check if a theorem depends on `sorry` by looking for `sorryAx` in the output\nof the `#print axioms my_thm` command, the axiom used by the implementation of `sorry`.\n", "kind": "markdown"}}
