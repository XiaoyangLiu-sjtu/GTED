{"character": "i", "row": 0, "column": 0}
{"character": "m", "row": 0, "column": 1}
{"character": "p", "row": 0, "column": 2}
{"character": "o", "row": 0, "column": 3}
{"character": "r", "row": 0, "column": 4}
{"character": "t", "row": 0, "column": 5}
{"character": " ", "row": 0, "column": 6}
{"character": "M", "row": 0, "column": 7}
{"character": "a", "row": 0, "column": 8}
{"character": "t", "row": 0, "column": 9}
{"character": "h", "row": 0, "column": 10}
{"character": "l", "row": 0, "column": 11}
{"character": "i", "row": 0, "column": 12}
{"character": "b", "row": 0, "column": 13}
{"character": "t", "row": 2, "column": 0}
{"character": "h", "row": 2, "column": 1}
{"character": "e", "row": 2, "column": 2}
{"character": "o", "row": 2, "column": 3}
{"character": "r", "row": 2, "column": 4}
{"character": "e", "row": 2, "column": 5}
{"character": "m", "row": 2, "column": 6}
{"character": " ", "row": 2, "column": 7}
{"character": "l", "row": 2, "column": 8, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 34}}, "contents": {"value": "```lean\nlcm_of_gcd_and_units_digit (a b : ℕ) (h1 : a % 10 = 2) (h2 : b % 10 = 4) (h3 : a.gcd b = 6) : 108 ≤ a.lcm b\n```", "kind": "markdown"}}
{"character": "c", "row": 2, "column": 9, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 34}}, "contents": {"value": "```lean\nlcm_of_gcd_and_units_digit (a b : ℕ) (h1 : a % 10 = 2) (h2 : b % 10 = 4) (h3 : a.gcd b = 6) : 108 ≤ a.lcm b\n```", "kind": "markdown"}}
{"character": "m", "row": 2, "column": 10, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 34}}, "contents": {"value": "```lean\nlcm_of_gcd_and_units_digit (a b : ℕ) (h1 : a % 10 = 2) (h2 : b % 10 = 4) (h3 : a.gcd b = 6) : 108 ≤ a.lcm b\n```", "kind": "markdown"}}
{"character": "_", "row": 2, "column": 11, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 34}}, "contents": {"value": "```lean\nlcm_of_gcd_and_units_digit (a b : ℕ) (h1 : a % 10 = 2) (h2 : b % 10 = 4) (h3 : a.gcd b = 6) : 108 ≤ a.lcm b\n```", "kind": "markdown"}}
{"character": "o", "row": 2, "column": 12, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 34}}, "contents": {"value": "```lean\nlcm_of_gcd_and_units_digit (a b : ℕ) (h1 : a % 10 = 2) (h2 : b % 10 = 4) (h3 : a.gcd b = 6) : 108 ≤ a.lcm b\n```", "kind": "markdown"}}
{"character": "f", "row": 2, "column": 13, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 34}}, "contents": {"value": "```lean\nlcm_of_gcd_and_units_digit (a b : ℕ) (h1 : a % 10 = 2) (h2 : b % 10 = 4) (h3 : a.gcd b = 6) : 108 ≤ a.lcm b\n```", "kind": "markdown"}}
{"character": "_", "row": 2, "column": 14, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 34}}, "contents": {"value": "```lean\nlcm_of_gcd_and_units_digit (a b : ℕ) (h1 : a % 10 = 2) (h2 : b % 10 = 4) (h3 : a.gcd b = 6) : 108 ≤ a.lcm b\n```", "kind": "markdown"}}
{"character": "g", "row": 2, "column": 15, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 34}}, "contents": {"value": "```lean\nlcm_of_gcd_and_units_digit (a b : ℕ) (h1 : a % 10 = 2) (h2 : b % 10 = 4) (h3 : a.gcd b = 6) : 108 ≤ a.lcm b\n```", "kind": "markdown"}}
{"character": "c", "row": 2, "column": 16, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 34}}, "contents": {"value": "```lean\nlcm_of_gcd_and_units_digit (a b : ℕ) (h1 : a % 10 = 2) (h2 : b % 10 = 4) (h3 : a.gcd b = 6) : 108 ≤ a.lcm b\n```", "kind": "markdown"}}
{"character": "d", "row": 2, "column": 17, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 34}}, "contents": {"value": "```lean\nlcm_of_gcd_and_units_digit (a b : ℕ) (h1 : a % 10 = 2) (h2 : b % 10 = 4) (h3 : a.gcd b = 6) : 108 ≤ a.lcm b\n```", "kind": "markdown"}}
{"character": "_", "row": 2, "column": 18, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 34}}, "contents": {"value": "```lean\nlcm_of_gcd_and_units_digit (a b : ℕ) (h1 : a % 10 = 2) (h2 : b % 10 = 4) (h3 : a.gcd b = 6) : 108 ≤ a.lcm b\n```", "kind": "markdown"}}
{"character": "a", "row": 2, "column": 19, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 34}}, "contents": {"value": "```lean\nlcm_of_gcd_and_units_digit (a b : ℕ) (h1 : a % 10 = 2) (h2 : b % 10 = 4) (h3 : a.gcd b = 6) : 108 ≤ a.lcm b\n```", "kind": "markdown"}}
{"character": "n", "row": 2, "column": 20, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 34}}, "contents": {"value": "```lean\nlcm_of_gcd_and_units_digit (a b : ℕ) (h1 : a % 10 = 2) (h2 : b % 10 = 4) (h3 : a.gcd b = 6) : 108 ≤ a.lcm b\n```", "kind": "markdown"}}
{"character": "d", "row": 2, "column": 21, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 34}}, "contents": {"value": "```lean\nlcm_of_gcd_and_units_digit (a b : ℕ) (h1 : a % 10 = 2) (h2 : b % 10 = 4) (h3 : a.gcd b = 6) : 108 ≤ a.lcm b\n```", "kind": "markdown"}}
{"character": "_", "row": 2, "column": 22, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 34}}, "contents": {"value": "```lean\nlcm_of_gcd_and_units_digit (a b : ℕ) (h1 : a % 10 = 2) (h2 : b % 10 = 4) (h3 : a.gcd b = 6) : 108 ≤ a.lcm b\n```", "kind": "markdown"}}
{"character": "u", "row": 2, "column": 23, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 34}}, "contents": {"value": "```lean\nlcm_of_gcd_and_units_digit (a b : ℕ) (h1 : a % 10 = 2) (h2 : b % 10 = 4) (h3 : a.gcd b = 6) : 108 ≤ a.lcm b\n```", "kind": "markdown"}}
{"character": "n", "row": 2, "column": 24, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 34}}, "contents": {"value": "```lean\nlcm_of_gcd_and_units_digit (a b : ℕ) (h1 : a % 10 = 2) (h2 : b % 10 = 4) (h3 : a.gcd b = 6) : 108 ≤ a.lcm b\n```", "kind": "markdown"}}
{"character": "i", "row": 2, "column": 25, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 34}}, "contents": {"value": "```lean\nlcm_of_gcd_and_units_digit (a b : ℕ) (h1 : a % 10 = 2) (h2 : b % 10 = 4) (h3 : a.gcd b = 6) : 108 ≤ a.lcm b\n```", "kind": "markdown"}}
{"character": "t", "row": 2, "column": 26, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 34}}, "contents": {"value": "```lean\nlcm_of_gcd_and_units_digit (a b : ℕ) (h1 : a % 10 = 2) (h2 : b % 10 = 4) (h3 : a.gcd b = 6) : 108 ≤ a.lcm b\n```", "kind": "markdown"}}
{"character": "s", "row": 2, "column": 27, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 34}}, "contents": {"value": "```lean\nlcm_of_gcd_and_units_digit (a b : ℕ) (h1 : a % 10 = 2) (h2 : b % 10 = 4) (h3 : a.gcd b = 6) : 108 ≤ a.lcm b\n```", "kind": "markdown"}}
{"character": "_", "row": 2, "column": 28, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 34}}, "contents": {"value": "```lean\nlcm_of_gcd_and_units_digit (a b : ℕ) (h1 : a % 10 = 2) (h2 : b % 10 = 4) (h3 : a.gcd b = 6) : 108 ≤ a.lcm b\n```", "kind": "markdown"}}
{"character": "d", "row": 2, "column": 29, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 34}}, "contents": {"value": "```lean\nlcm_of_gcd_and_units_digit (a b : ℕ) (h1 : a % 10 = 2) (h2 : b % 10 = 4) (h3 : a.gcd b = 6) : 108 ≤ a.lcm b\n```", "kind": "markdown"}}
{"character": "i", "row": 2, "column": 30, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 34}}, "contents": {"value": "```lean\nlcm_of_gcd_and_units_digit (a b : ℕ) (h1 : a % 10 = 2) (h2 : b % 10 = 4) (h3 : a.gcd b = 6) : 108 ≤ a.lcm b\n```", "kind": "markdown"}}
{"character": "g", "row": 2, "column": 31, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 34}}, "contents": {"value": "```lean\nlcm_of_gcd_and_units_digit (a b : ℕ) (h1 : a % 10 = 2) (h2 : b % 10 = 4) (h3 : a.gcd b = 6) : 108 ≤ a.lcm b\n```", "kind": "markdown"}}
{"character": "i", "row": 2, "column": 32, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 34}}, "contents": {"value": "```lean\nlcm_of_gcd_and_units_digit (a b : ℕ) (h1 : a % 10 = 2) (h2 : b % 10 = 4) (h3 : a.gcd b = 6) : 108 ≤ a.lcm b\n```", "kind": "markdown"}}
{"character": "t", "row": 2, "column": 33, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 34}}, "contents": {"value": "```lean\nlcm_of_gcd_and_units_digit (a b : ℕ) (h1 : a % 10 = 2) (h2 : b % 10 = 4) (h3 : a.gcd b = 6) : 108 ≤ a.lcm b\n```", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 34}
{"character": "(", "row": 2, "column": 35, "range": {"start": {"line": 2, "character": 35}, "end": {"line": 2, "character": 42}}, "contents": {"value": "Explicit binder, like `(x y : A)` or `(x y)`.\nDefault values can be specified using `(x : A := v)` syntax, and tactics using `(x : A := by tac)`.\n", "kind": "markdown"}}
{"character": "a", "row": 2, "column": 36, "range": {"start": {"line": 2, "character": 36}, "end": {"line": 2, "character": 37}}, "contents": {"value": "```lean\na : ℕ\n```", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 37}
{"character": ":", "row": 2, "column": 38, "range": {"start": {"line": 2, "character": 35}, "end": {"line": 2, "character": 42}}, "contents": {"value": "Explicit binder, like `(x y : A)` or `(x y)`.\nDefault values can be specified using `(x : A := v)` syntax, and tactics using `(x : A := by tac)`.\n", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 39}
{"character": "ℕ", "row": 2, "column": 40, "range": {"start": {"line": 2, "character": 40}, "end": {"line": 2, "character": 41}}, "contents": {"value": "```lean\nNat : Type\n```\n***\nThe natural numbers, starting at zero.\n\nThis type is special-cased by both the kernel and the compiler, and overridden with an efficient\nimplementation. Both use a fast arbitrary-precision arithmetic library (usually\n[GMP](https://gmplib.org/)); at runtime, `Nat` values that are sufficiently small are unboxed.\n\n***\n*import Init.Prelude*", "kind": "markdown"}}
{"character": ")", "row": 2, "column": 41, "range": {"start": {"line": 2, "character": 35}, "end": {"line": 2, "character": 42}}, "contents": {"value": "Explicit binder, like `(x y : A)` or `(x y)`.\nDefault values can be specified using `(x : A := v)` syntax, and tactics using `(x : A := by tac)`.\n", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 42}
{"character": "(", "row": 2, "column": 43, "range": {"start": {"line": 2, "character": 43}, "end": {"line": 2, "character": 50}}, "contents": {"value": "Explicit binder, like `(x y : A)` or `(x y)`.\nDefault values can be specified using `(x : A := v)` syntax, and tactics using `(x : A := by tac)`.\n", "kind": "markdown"}}
{"character": "b", "row": 2, "column": 44, "range": {"start": {"line": 2, "character": 44}, "end": {"line": 2, "character": 45}}, "contents": {"value": "```lean\nb : ℕ\n```", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 45}
{"character": ":", "row": 2, "column": 46, "range": {"start": {"line": 2, "character": 43}, "end": {"line": 2, "character": 50}}, "contents": {"value": "Explicit binder, like `(x y : A)` or `(x y)`.\nDefault values can be specified using `(x : A := v)` syntax, and tactics using `(x : A := by tac)`.\n", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 47}
{"character": "ℕ", "row": 2, "column": 48, "range": {"start": {"line": 2, "character": 48}, "end": {"line": 2, "character": 49}}, "contents": {"value": "```lean\nNat : Type\n```\n***\nThe natural numbers, starting at zero.\n\nThis type is special-cased by both the kernel and the compiler, and overridden with an efficient\nimplementation. Both use a fast arbitrary-precision arithmetic library (usually\n[GMP](https://gmplib.org/)); at runtime, `Nat` values that are sufficiently small are unboxed.\n\n***\n*import Init.Prelude*", "kind": "markdown"}}
{"character": ")", "row": 2, "column": 49, "range": {"start": {"line": 2, "character": 43}, "end": {"line": 2, "character": 50}}, "contents": {"value": "Explicit binder, like `(x y : A)` or `(x y)`.\nDefault values can be specified using `(x : A := v)` syntax, and tactics using `(x : A := by tac)`.\n", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 50}
{"character": "(", "row": 2, "column": 51, "range": {"start": {"line": 2, "character": 51}, "end": {"line": 2, "character": 68}}, "contents": {"value": "Explicit binder, like `(x y : A)` or `(x y)`.\nDefault values can be specified using `(x : A := v)` syntax, and tactics using `(x : A := by tac)`.\n", "kind": "markdown"}}
{"character": "h", "row": 2, "column": 52, "range": {"start": {"line": 2, "character": 52}, "end": {"line": 2, "character": 54}}, "contents": {"value": "```lean\nh1 : a % 10 = 2\n```", "kind": "markdown"}}
{"character": "1", "row": 2, "column": 53, "range": {"start": {"line": 2, "character": 52}, "end": {"line": 2, "character": 54}}, "contents": {"value": "```lean\nh1 : a % 10 = 2\n```", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 54}
{"character": ":", "row": 2, "column": 55, "range": {"start": {"line": 2, "character": 51}, "end": {"line": 2, "character": 68}}, "contents": {"value": "Explicit binder, like `(x y : A)` or `(x y)`.\nDefault values can be specified using `(x : A := v)` syntax, and tactics using `(x : A := by tac)`.\n", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 56}
{"character": "a", "row": 2, "column": 57, "range": {"start": {"line": 2, "character": 57}, "end": {"line": 2, "character": 58}}, "contents": {"value": "```lean\na : ℕ\n```", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 58, "range": {"start": {"line": 2, "character": 57}, "end": {"line": 2, "character": 63}}, "contents": {"value": "```lean\nℕ\n```\n***\n`a % b` computes the remainder upon dividing `a` by `b`.\nThe meaning of this notation is type-dependent.\n* For `Nat` and `Int` it satisfies `a % b + b * (a / b) = a`,\n  and `a % 0` is defined to be `a`. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `%` in identifiers is `mod`.", "kind": "markdown"}}
{"character": "%", "row": 2, "column": 59, "range": {"start": {"line": 2, "character": 57}, "end": {"line": 2, "character": 63}}, "contents": {"value": "```lean\nℕ\n```\n***\n`a % b` computes the remainder upon dividing `a` by `b`.\nThe meaning of this notation is type-dependent.\n* For `Nat` and `Int` it satisfies `a % b + b * (a / b) = a`,\n  and `a % 0` is defined to be `a`. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `%` in identifiers is `mod`.", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 60, "range": {"start": {"line": 2, "character": 57}, "end": {"line": 2, "character": 63}}, "contents": {"value": "```lean\nℕ\n```\n***\n`a % b` computes the remainder upon dividing `a` by `b`.\nThe meaning of this notation is type-dependent.\n* For `Nat` and `Int` it satisfies `a % b + b * (a / b) = a`,\n  and `a % 0` is defined to be `a`. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `%` in identifiers is `mod`.", "kind": "markdown"}}
{"character": "1", "row": 2, "column": 61, "range": {"start": {"line": 2, "character": 61}, "end": {"line": 2, "character": 63}}, "contents": {"value": "```lean\n10 : ℕ\n```", "kind": "markdown"}}
{"character": "0", "row": 2, "column": 62, "range": {"start": {"line": 2, "character": 61}, "end": {"line": 2, "character": 63}}, "contents": {"value": "```lean\n10 : ℕ\n```", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 63, "range": {"start": {"line": 2, "character": 57}, "end": {"line": 2, "character": 67}}, "contents": {"value": "```lean\nProp\n```\n***\nThe equality relation. It has one introduction rule, `Eq.refl`.\nWe use `a = b` as notation for `Eq a b`.\nA fundamental property of equality is that it is an equivalence relation.\n```\nvariable (α : Type) (a b c d : α)\nvariable (hab : a = b) (hcb : c = b) (hcd : c = d)\n\nexample : a = d :=\n  Eq.trans (Eq.trans hab (Eq.symm hcb)) hcd\n```\nEquality is much more than an equivalence relation, however. It has the important property that every assertion\nrespects the equivalence, in the sense that we can substitute equal expressions without changing the truth value.\nThat is, given `h1 : a = b` and `h2 : p a`, we can construct a proof for `p b` using substitution: `Eq.subst h1 h2`.\nExample:\n```\nexample (α : Type) (a b : α) (p : α → Prop)\n        (h1 : a = b) (h2 : p a) : p b :=\n  Eq.subst h1 h2\n\nexample (α : Type) (a b : α) (p : α → Prop)\n    (h1 : a = b) (h2 : p a) : p b :=\n  h1 ▸ h2\n```\nThe triangle in the second presentation is a macro built on top of `Eq.subst` and `Eq.symm`, and you can enter it by typing `\\t`.\nFor more information: [Equality](https://lean-lang.org/theorem_proving_in_lean4/quantifiers_and_equality.html#equality)\n\n\nConventions for notations in identifiers:\n\n * The recommended spelling of `=` in identifiers is `eq`.", "kind": "markdown"}}
{"character": "=", "row": 2, "column": 64, "range": {"start": {"line": 2, "character": 57}, "end": {"line": 2, "character": 67}}, "contents": {"value": "```lean\nProp\n```\n***\nThe equality relation. It has one introduction rule, `Eq.refl`.\nWe use `a = b` as notation for `Eq a b`.\nA fundamental property of equality is that it is an equivalence relation.\n```\nvariable (α : Type) (a b c d : α)\nvariable (hab : a = b) (hcb : c = b) (hcd : c = d)\n\nexample : a = d :=\n  Eq.trans (Eq.trans hab (Eq.symm hcb)) hcd\n```\nEquality is much more than an equivalence relation, however. It has the important property that every assertion\nrespects the equivalence, in the sense that we can substitute equal expressions without changing the truth value.\nThat is, given `h1 : a = b` and `h2 : p a`, we can construct a proof for `p b` using substitution: `Eq.subst h1 h2`.\nExample:\n```\nexample (α : Type) (a b : α) (p : α → Prop)\n        (h1 : a = b) (h2 : p a) : p b :=\n  Eq.subst h1 h2\n\nexample (α : Type) (a b : α) (p : α → Prop)\n    (h1 : a = b) (h2 : p a) : p b :=\n  h1 ▸ h2\n```\nThe triangle in the second presentation is a macro built on top of `Eq.subst` and `Eq.symm`, and you can enter it by typing `\\t`.\nFor more information: [Equality](https://lean-lang.org/theorem_proving_in_lean4/quantifiers_and_equality.html#equality)\n\n\nConventions for notations in identifiers:\n\n * The recommended spelling of `=` in identifiers is `eq`.", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 65, "range": {"start": {"line": 2, "character": 57}, "end": {"line": 2, "character": 67}}, "contents": {"value": "```lean\nProp\n```\n***\nThe equality relation. It has one introduction rule, `Eq.refl`.\nWe use `a = b` as notation for `Eq a b`.\nA fundamental property of equality is that it is an equivalence relation.\n```\nvariable (α : Type) (a b c d : α)\nvariable (hab : a = b) (hcb : c = b) (hcd : c = d)\n\nexample : a = d :=\n  Eq.trans (Eq.trans hab (Eq.symm hcb)) hcd\n```\nEquality is much more than an equivalence relation, however. It has the important property that every assertion\nrespects the equivalence, in the sense that we can substitute equal expressions without changing the truth value.\nThat is, given `h1 : a = b` and `h2 : p a`, we can construct a proof for `p b` using substitution: `Eq.subst h1 h2`.\nExample:\n```\nexample (α : Type) (a b : α) (p : α → Prop)\n        (h1 : a = b) (h2 : p a) : p b :=\n  Eq.subst h1 h2\n\nexample (α : Type) (a b : α) (p : α → Prop)\n    (h1 : a = b) (h2 : p a) : p b :=\n  h1 ▸ h2\n```\nThe triangle in the second presentation is a macro built on top of `Eq.subst` and `Eq.symm`, and you can enter it by typing `\\t`.\nFor more information: [Equality](https://lean-lang.org/theorem_proving_in_lean4/quantifiers_and_equality.html#equality)\n\n\nConventions for notations in identifiers:\n\n * The recommended spelling of `=` in identifiers is `eq`.", "kind": "markdown"}}
{"character": "2", "row": 2, "column": 66, "range": {"start": {"line": 2, "character": 66}, "end": {"line": 2, "character": 67}}, "contents": {"value": "```lean\n2 : ℕ\n```", "kind": "markdown"}}
{"character": ")", "row": 2, "column": 67, "range": {"start": {"line": 2, "character": 51}, "end": {"line": 2, "character": 68}}, "contents": {"value": "Explicit binder, like `(x y : A)` or `(x y)`.\nDefault values can be specified using `(x : A := v)` syntax, and tactics using `(x : A := by tac)`.\n", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 68}
{"character": "(", "row": 2, "column": 69, "range": {"start": {"line": 2, "character": 69}, "end": {"line": 2, "character": 86}}, "contents": {"value": "Explicit binder, like `(x y : A)` or `(x y)`.\nDefault values can be specified using `(x : A := v)` syntax, and tactics using `(x : A := by tac)`.\n", "kind": "markdown"}}
{"character": "h", "row": 2, "column": 70, "range": {"start": {"line": 2, "character": 70}, "end": {"line": 2, "character": 72}}, "contents": {"value": "```lean\nh2 : b % 10 = 4\n```", "kind": "markdown"}}
{"character": "2", "row": 2, "column": 71, "range": {"start": {"line": 2, "character": 70}, "end": {"line": 2, "character": 72}}, "contents": {"value": "```lean\nh2 : b % 10 = 4\n```", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 72}
{"character": ":", "row": 2, "column": 73, "range": {"start": {"line": 2, "character": 69}, "end": {"line": 2, "character": 86}}, "contents": {"value": "Explicit binder, like `(x y : A)` or `(x y)`.\nDefault values can be specified using `(x : A := v)` syntax, and tactics using `(x : A := by tac)`.\n", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 74}
{"character": "b", "row": 2, "column": 75, "range": {"start": {"line": 2, "character": 75}, "end": {"line": 2, "character": 76}}, "contents": {"value": "```lean\nb : ℕ\n```", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 76, "range": {"start": {"line": 2, "character": 75}, "end": {"line": 2, "character": 81}}, "contents": {"value": "```lean\nℕ\n```\n***\n`a % b` computes the remainder upon dividing `a` by `b`.\nThe meaning of this notation is type-dependent.\n* For `Nat` and `Int` it satisfies `a % b + b * (a / b) = a`,\n  and `a % 0` is defined to be `a`. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `%` in identifiers is `mod`.", "kind": "markdown"}}
{"character": "%", "row": 2, "column": 77, "range": {"start": {"line": 2, "character": 75}, "end": {"line": 2, "character": 81}}, "contents": {"value": "```lean\nℕ\n```\n***\n`a % b` computes the remainder upon dividing `a` by `b`.\nThe meaning of this notation is type-dependent.\n* For `Nat` and `Int` it satisfies `a % b + b * (a / b) = a`,\n  and `a % 0` is defined to be `a`. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `%` in identifiers is `mod`.", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 78, "range": {"start": {"line": 2, "character": 75}, "end": {"line": 2, "character": 81}}, "contents": {"value": "```lean\nℕ\n```\n***\n`a % b` computes the remainder upon dividing `a` by `b`.\nThe meaning of this notation is type-dependent.\n* For `Nat` and `Int` it satisfies `a % b + b * (a / b) = a`,\n  and `a % 0` is defined to be `a`. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `%` in identifiers is `mod`.", "kind": "markdown"}}
{"character": "1", "row": 2, "column": 79, "range": {"start": {"line": 2, "character": 79}, "end": {"line": 2, "character": 81}}, "contents": {"value": "```lean\n10 : ℕ\n```", "kind": "markdown"}}
{"character": "0", "row": 2, "column": 80, "range": {"start": {"line": 2, "character": 79}, "end": {"line": 2, "character": 81}}, "contents": {"value": "```lean\n10 : ℕ\n```", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 81, "range": {"start": {"line": 2, "character": 75}, "end": {"line": 2, "character": 85}}, "contents": {"value": "```lean\nProp\n```\n***\nThe equality relation. It has one introduction rule, `Eq.refl`.\nWe use `a = b` as notation for `Eq a b`.\nA fundamental property of equality is that it is an equivalence relation.\n```\nvariable (α : Type) (a b c d : α)\nvariable (hab : a = b) (hcb : c = b) (hcd : c = d)\n\nexample : a = d :=\n  Eq.trans (Eq.trans hab (Eq.symm hcb)) hcd\n```\nEquality is much more than an equivalence relation, however. It has the important property that every assertion\nrespects the equivalence, in the sense that we can substitute equal expressions without changing the truth value.\nThat is, given `h1 : a = b` and `h2 : p a`, we can construct a proof for `p b` using substitution: `Eq.subst h1 h2`.\nExample:\n```\nexample (α : Type) (a b : α) (p : α → Prop)\n        (h1 : a = b) (h2 : p a) : p b :=\n  Eq.subst h1 h2\n\nexample (α : Type) (a b : α) (p : α → Prop)\n    (h1 : a = b) (h2 : p a) : p b :=\n  h1 ▸ h2\n```\nThe triangle in the second presentation is a macro built on top of `Eq.subst` and `Eq.symm`, and you can enter it by typing `\\t`.\nFor more information: [Equality](https://lean-lang.org/theorem_proving_in_lean4/quantifiers_and_equality.html#equality)\n\n\nConventions for notations in identifiers:\n\n * The recommended spelling of `=` in identifiers is `eq`.", "kind": "markdown"}}
{"character": "=", "row": 2, "column": 82, "range": {"start": {"line": 2, "character": 75}, "end": {"line": 2, "character": 85}}, "contents": {"value": "```lean\nProp\n```\n***\nThe equality relation. It has one introduction rule, `Eq.refl`.\nWe use `a = b` as notation for `Eq a b`.\nA fundamental property of equality is that it is an equivalence relation.\n```\nvariable (α : Type) (a b c d : α)\nvariable (hab : a = b) (hcb : c = b) (hcd : c = d)\n\nexample : a = d :=\n  Eq.trans (Eq.trans hab (Eq.symm hcb)) hcd\n```\nEquality is much more than an equivalence relation, however. It has the important property that every assertion\nrespects the equivalence, in the sense that we can substitute equal expressions without changing the truth value.\nThat is, given `h1 : a = b` and `h2 : p a`, we can construct a proof for `p b` using substitution: `Eq.subst h1 h2`.\nExample:\n```\nexample (α : Type) (a b : α) (p : α → Prop)\n        (h1 : a = b) (h2 : p a) : p b :=\n  Eq.subst h1 h2\n\nexample (α : Type) (a b : α) (p : α → Prop)\n    (h1 : a = b) (h2 : p a) : p b :=\n  h1 ▸ h2\n```\nThe triangle in the second presentation is a macro built on top of `Eq.subst` and `Eq.symm`, and you can enter it by typing `\\t`.\nFor more information: [Equality](https://lean-lang.org/theorem_proving_in_lean4/quantifiers_and_equality.html#equality)\n\n\nConventions for notations in identifiers:\n\n * The recommended spelling of `=` in identifiers is `eq`.", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 83, "range": {"start": {"line": 2, "character": 75}, "end": {"line": 2, "character": 85}}, "contents": {"value": "```lean\nProp\n```\n***\nThe equality relation. It has one introduction rule, `Eq.refl`.\nWe use `a = b` as notation for `Eq a b`.\nA fundamental property of equality is that it is an equivalence relation.\n```\nvariable (α : Type) (a b c d : α)\nvariable (hab : a = b) (hcb : c = b) (hcd : c = d)\n\nexample : a = d :=\n  Eq.trans (Eq.trans hab (Eq.symm hcb)) hcd\n```\nEquality is much more than an equivalence relation, however. It has the important property that every assertion\nrespects the equivalence, in the sense that we can substitute equal expressions without changing the truth value.\nThat is, given `h1 : a = b` and `h2 : p a`, we can construct a proof for `p b` using substitution: `Eq.subst h1 h2`.\nExample:\n```\nexample (α : Type) (a b : α) (p : α → Prop)\n        (h1 : a = b) (h2 : p a) : p b :=\n  Eq.subst h1 h2\n\nexample (α : Type) (a b : α) (p : α → Prop)\n    (h1 : a = b) (h2 : p a) : p b :=\n  h1 ▸ h2\n```\nThe triangle in the second presentation is a macro built on top of `Eq.subst` and `Eq.symm`, and you can enter it by typing `\\t`.\nFor more information: [Equality](https://lean-lang.org/theorem_proving_in_lean4/quantifiers_and_equality.html#equality)\n\n\nConventions for notations in identifiers:\n\n * The recommended spelling of `=` in identifiers is `eq`.", "kind": "markdown"}}
{"character": "4", "row": 2, "column": 84, "range": {"start": {"line": 2, "character": 84}, "end": {"line": 2, "character": 85}}, "contents": {"value": "```lean\n4 : ℕ\n```", "kind": "markdown"}}
{"character": ")", "row": 2, "column": 85, "range": {"start": {"line": 2, "character": 69}, "end": {"line": 2, "character": 86}}, "contents": {"value": "Explicit binder, like `(x y : A)` or `(x y)`.\nDefault values can be specified using `(x : A := v)` syntax, and tactics using `(x : A := by tac)`.\n", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 86}
{"character": "(", "row": 2, "column": 87, "range": {"start": {"line": 2, "character": 87}, "end": {"line": 2, "character": 105}}, "contents": {"value": "Explicit binder, like `(x y : A)` or `(x y)`.\nDefault values can be specified using `(x : A := v)` syntax, and tactics using `(x : A := by tac)`.\n", "kind": "markdown"}}
{"character": "h", "row": 2, "column": 88, "range": {"start": {"line": 2, "character": 88}, "end": {"line": 2, "character": 90}}, "contents": {"value": "```lean\nh3 : a.gcd b = 6\n```", "kind": "markdown"}}
{"character": "3", "row": 2, "column": 89, "range": {"start": {"line": 2, "character": 88}, "end": {"line": 2, "character": 90}}, "contents": {"value": "```lean\nh3 : a.gcd b = 6\n```", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 90}
{"character": ":", "row": 2, "column": 91, "range": {"start": {"line": 2, "character": 87}, "end": {"line": 2, "character": 105}}, "contents": {"value": "Explicit binder, like `(x y : A)` or `(x y)`.\nDefault values can be specified using `(x : A := v)` syntax, and tactics using `(x : A := by tac)`.\n", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 92}
{"character": "a", "row": 2, "column": 93, "range": {"start": {"line": 2, "character": 93}, "end": {"line": 2, "character": 94}}, "contents": {"value": "```lean\na : ℕ\n```", "kind": "markdown"}}
{"character": ".", "row": 2, "column": 94, "range": {"start": {"line": 2, "character": 93}, "end": {"line": 2, "character": 100}}, "contents": {"value": "```lean\nℕ\n```", "kind": "markdown"}}
{"character": "g", "row": 2, "column": 95, "range": {"start": {"line": 2, "character": 95}, "end": {"line": 2, "character": 98}}, "contents": {"value": "```lean\nNat.gcd (m n : ℕ) : ℕ\n```\n***\nComputes the greatest common divisor of two natural numbers. The GCD of two natural numbers is the\nlargest natural number that evenly divides both.\n\nIn particular, the GCD of a number and `0` is the number itself.\n\nThis reference implementation via the Euclidean algorithm is overridden in both the kernel and the\ncompiler to efficiently evaluate using arbitrary-precision arithmetic. The definition provided here\nis the logical model.\n\nExamples:\n* `Nat.gcd 10 15 = 5`\n* `Nat.gcd 0 5 = 5`\n* `Nat.gcd 7 0 = 7`\n\n***\n*import Init.Data.Nat.Gcd*", "kind": "markdown"}}
{"character": "c", "row": 2, "column": 96, "range": {"start": {"line": 2, "character": 95}, "end": {"line": 2, "character": 98}}, "contents": {"value": "```lean\nNat.gcd (m n : ℕ) : ℕ\n```\n***\nComputes the greatest common divisor of two natural numbers. The GCD of two natural numbers is the\nlargest natural number that evenly divides both.\n\nIn particular, the GCD of a number and `0` is the number itself.\n\nThis reference implementation via the Euclidean algorithm is overridden in both the kernel and the\ncompiler to efficiently evaluate using arbitrary-precision arithmetic. The definition provided here\nis the logical model.\n\nExamples:\n* `Nat.gcd 10 15 = 5`\n* `Nat.gcd 0 5 = 5`\n* `Nat.gcd 7 0 = 7`\n\n***\n*import Init.Data.Nat.Gcd*", "kind": "markdown"}}
{"character": "d", "row": 2, "column": 97, "range": {"start": {"line": 2, "character": 95}, "end": {"line": 2, "character": 98}}, "contents": {"value": "```lean\nNat.gcd (m n : ℕ) : ℕ\n```\n***\nComputes the greatest common divisor of two natural numbers. The GCD of two natural numbers is the\nlargest natural number that evenly divides both.\n\nIn particular, the GCD of a number and `0` is the number itself.\n\nThis reference implementation via the Euclidean algorithm is overridden in both the kernel and the\ncompiler to efficiently evaluate using arbitrary-precision arithmetic. The definition provided here\nis the logical model.\n\nExamples:\n* `Nat.gcd 10 15 = 5`\n* `Nat.gcd 0 5 = 5`\n* `Nat.gcd 7 0 = 7`\n\n***\n*import Init.Data.Nat.Gcd*", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 98, "range": {"start": {"line": 2, "character": 93}, "end": {"line": 2, "character": 100}}, "contents": {"value": "```lean\nℕ\n```", "kind": "markdown"}}
{"character": "b", "row": 2, "column": 99, "range": {"start": {"line": 2, "character": 99}, "end": {"line": 2, "character": 100}}, "contents": {"value": "```lean\nb : ℕ\n```", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 100, "range": {"start": {"line": 2, "character": 93}, "end": {"line": 2, "character": 104}}, "contents": {"value": "```lean\nProp\n```\n***\nThe equality relation. It has one introduction rule, `Eq.refl`.\nWe use `a = b` as notation for `Eq a b`.\nA fundamental property of equality is that it is an equivalence relation.\n```\nvariable (α : Type) (a b c d : α)\nvariable (hab : a = b) (hcb : c = b) (hcd : c = d)\n\nexample : a = d :=\n  Eq.trans (Eq.trans hab (Eq.symm hcb)) hcd\n```\nEquality is much more than an equivalence relation, however. It has the important property that every assertion\nrespects the equivalence, in the sense that we can substitute equal expressions without changing the truth value.\nThat is, given `h1 : a = b` and `h2 : p a`, we can construct a proof for `p b` using substitution: `Eq.subst h1 h2`.\nExample:\n```\nexample (α : Type) (a b : α) (p : α → Prop)\n        (h1 : a = b) (h2 : p a) : p b :=\n  Eq.subst h1 h2\n\nexample (α : Type) (a b : α) (p : α → Prop)\n    (h1 : a = b) (h2 : p a) : p b :=\n  h1 ▸ h2\n```\nThe triangle in the second presentation is a macro built on top of `Eq.subst` and `Eq.symm`, and you can enter it by typing `\\t`.\nFor more information: [Equality](https://lean-lang.org/theorem_proving_in_lean4/quantifiers_and_equality.html#equality)\n\n\nConventions for notations in identifiers:\n\n * The recommended spelling of `=` in identifiers is `eq`.", "kind": "markdown"}}
{"character": "=", "row": 2, "column": 101, "range": {"start": {"line": 2, "character": 93}, "end": {"line": 2, "character": 104}}, "contents": {"value": "```lean\nProp\n```\n***\nThe equality relation. It has one introduction rule, `Eq.refl`.\nWe use `a = b` as notation for `Eq a b`.\nA fundamental property of equality is that it is an equivalence relation.\n```\nvariable (α : Type) (a b c d : α)\nvariable (hab : a = b) (hcb : c = b) (hcd : c = d)\n\nexample : a = d :=\n  Eq.trans (Eq.trans hab (Eq.symm hcb)) hcd\n```\nEquality is much more than an equivalence relation, however. It has the important property that every assertion\nrespects the equivalence, in the sense that we can substitute equal expressions without changing the truth value.\nThat is, given `h1 : a = b` and `h2 : p a`, we can construct a proof for `p b` using substitution: `Eq.subst h1 h2`.\nExample:\n```\nexample (α : Type) (a b : α) (p : α → Prop)\n        (h1 : a = b) (h2 : p a) : p b :=\n  Eq.subst h1 h2\n\nexample (α : Type) (a b : α) (p : α → Prop)\n    (h1 : a = b) (h2 : p a) : p b :=\n  h1 ▸ h2\n```\nThe triangle in the second presentation is a macro built on top of `Eq.subst` and `Eq.symm`, and you can enter it by typing `\\t`.\nFor more information: [Equality](https://lean-lang.org/theorem_proving_in_lean4/quantifiers_and_equality.html#equality)\n\n\nConventions for notations in identifiers:\n\n * The recommended spelling of `=` in identifiers is `eq`.", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 102, "range": {"start": {"line": 2, "character": 93}, "end": {"line": 2, "character": 104}}, "contents": {"value": "```lean\nProp\n```\n***\nThe equality relation. It has one introduction rule, `Eq.refl`.\nWe use `a = b` as notation for `Eq a b`.\nA fundamental property of equality is that it is an equivalence relation.\n```\nvariable (α : Type) (a b c d : α)\nvariable (hab : a = b) (hcb : c = b) (hcd : c = d)\n\nexample : a = d :=\n  Eq.trans (Eq.trans hab (Eq.symm hcb)) hcd\n```\nEquality is much more than an equivalence relation, however. It has the important property that every assertion\nrespects the equivalence, in the sense that we can substitute equal expressions without changing the truth value.\nThat is, given `h1 : a = b` and `h2 : p a`, we can construct a proof for `p b` using substitution: `Eq.subst h1 h2`.\nExample:\n```\nexample (α : Type) (a b : α) (p : α → Prop)\n        (h1 : a = b) (h2 : p a) : p b :=\n  Eq.subst h1 h2\n\nexample (α : Type) (a b : α) (p : α → Prop)\n    (h1 : a = b) (h2 : p a) : p b :=\n  h1 ▸ h2\n```\nThe triangle in the second presentation is a macro built on top of `Eq.subst` and `Eq.symm`, and you can enter it by typing `\\t`.\nFor more information: [Equality](https://lean-lang.org/theorem_proving_in_lean4/quantifiers_and_equality.html#equality)\n\n\nConventions for notations in identifiers:\n\n * The recommended spelling of `=` in identifiers is `eq`.", "kind": "markdown"}}
{"character": "6", "row": 2, "column": 103, "range": {"start": {"line": 2, "character": 103}, "end": {"line": 2, "character": 104}}, "contents": {"value": "```lean\n6 : ℕ\n```", "kind": "markdown"}}
{"character": ")", "row": 2, "column": 104, "range": {"start": {"line": 2, "character": 87}, "end": {"line": 2, "character": 105}}, "contents": {"value": "Explicit binder, like `(x y : A)` or `(x y)`.\nDefault values can be specified using `(x : A := v)` syntax, and tactics using `(x : A := by tac)`.\n", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 105}
{"character": ":", "row": 2, "column": 106, "range": {"start": {"line": 2, "character": 35}, "end": {"line": 2, "character": 121}}, "contents": {"value": "`declSig` matches the signature of a declaration with required type: a list of binders and then `: type` ", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 107}
{"character": "1", "row": 2, "column": 108, "range": {"start": {"line": 2, "character": 108}, "end": {"line": 2, "character": 111}}, "contents": {"value": "```lean\n108 : ℕ\n```", "kind": "markdown"}}
{"character": "0", "row": 2, "column": 109, "range": {"start": {"line": 2, "character": 108}, "end": {"line": 2, "character": 111}}, "contents": {"value": "```lean\n108 : ℕ\n```", "kind": "markdown"}}
{"character": "8", "row": 2, "column": 110, "range": {"start": {"line": 2, "character": 108}, "end": {"line": 2, "character": 111}}, "contents": {"value": "```lean\n108 : ℕ\n```", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 111, "range": {"start": {"line": 2, "character": 108}, "end": {"line": 2, "character": 121}}, "contents": {"value": "```lean\nProp\n```\n***\nThe less-equal relation: `x ≤ y` \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `≤` in identifiers is `le`.", "kind": "markdown"}}
{"character": "≤", "row": 2, "column": 112, "range": {"start": {"line": 2, "character": 108}, "end": {"line": 2, "character": 121}}, "contents": {"value": "```lean\nProp\n```\n***\nThe less-equal relation: `x ≤ y` \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `≤` in identifiers is `le`.", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 113, "range": {"start": {"line": 2, "character": 108}, "end": {"line": 2, "character": 121}}, "contents": {"value": "```lean\nProp\n```\n***\nThe less-equal relation: `x ≤ y` \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `≤` in identifiers is `le`.", "kind": "markdown"}}
{"character": "a", "row": 2, "column": 114, "range": {"start": {"line": 2, "character": 114}, "end": {"line": 2, "character": 115}}, "contents": {"value": "```lean\na : ℕ\n```", "kind": "markdown"}}
{"character": ".", "row": 2, "column": 115, "range": {"start": {"line": 2, "character": 114}, "end": {"line": 2, "character": 121}}, "contents": {"value": "```lean\nℕ\n```", "kind": "markdown"}}
{"character": "l", "row": 2, "column": 116, "range": {"start": {"line": 2, "character": 116}, "end": {"line": 2, "character": 119}}, "contents": {"value": "```lean\nNat.lcm (m n : ℕ) : ℕ\n```\n***\nThe least common multiple of `m` and `n` is the smallest natural number that's evenly divisible by\nboth `m` and `n`. Returns `0` if either `m` or `n` is `0`.\n\nExamples:\n * `Nat.lcm 9 6 = 18`\n * `Nat.lcm 9 3 = 9`\n * `Nat.lcm 0 3 = 0`\n * `Nat.lcm 3 0 = 0`\n\n***\n*import Init.Data.Nat.Lcm*", "kind": "markdown"}}
{"character": "c", "row": 2, "column": 117, "range": {"start": {"line": 2, "character": 116}, "end": {"line": 2, "character": 119}}, "contents": {"value": "```lean\nNat.lcm (m n : ℕ) : ℕ\n```\n***\nThe least common multiple of `m` and `n` is the smallest natural number that's evenly divisible by\nboth `m` and `n`. Returns `0` if either `m` or `n` is `0`.\n\nExamples:\n * `Nat.lcm 9 6 = 18`\n * `Nat.lcm 9 3 = 9`\n * `Nat.lcm 0 3 = 0`\n * `Nat.lcm 3 0 = 0`\n\n***\n*import Init.Data.Nat.Lcm*", "kind": "markdown"}}
{"character": "m", "row": 2, "column": 118, "range": {"start": {"line": 2, "character": 116}, "end": {"line": 2, "character": 119}}, "contents": {"value": "```lean\nNat.lcm (m n : ℕ) : ℕ\n```\n***\nThe least common multiple of `m` and `n` is the smallest natural number that's evenly divisible by\nboth `m` and `n`. Returns `0` if either `m` or `n` is `0`.\n\nExamples:\n * `Nat.lcm 9 6 = 18`\n * `Nat.lcm 9 3 = 9`\n * `Nat.lcm 0 3 = 0`\n * `Nat.lcm 3 0 = 0`\n\n***\n*import Init.Data.Nat.Lcm*", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 119, "range": {"start": {"line": 2, "character": 114}, "end": {"line": 2, "character": 121}}, "contents": {"value": "```lean\nℕ\n```", "kind": "markdown"}}
{"character": "b", "row": 2, "column": 120, "range": {"start": {"line": 2, "character": 120}, "end": {"line": 2, "character": 121}}, "contents": {"value": "```lean\nb : ℕ\n```", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 121}
{"character": ":", "row": 2, "column": 122}
{"character": "=", "row": 2, "column": 123}
{"character": " ", "row": 2, "column": 124}
{"character": "b", "row": 2, "column": 125, "range": {"start": {"line": 2, "character": 125}, "end": {"line": 2, "character": 133}}, "contents": {"value": "`by tac` constructs a term of the expected type by running the tactic(s) `tac`. ", "kind": "markdown"}}
{"character": "y", "row": 2, "column": 126, "range": {"start": {"line": 2, "character": 125}, "end": {"line": 2, "character": 133}}, "contents": {"value": "`by tac` constructs a term of the expected type by running the tactic(s) `tac`. ", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 127, "range": {"start": {"line": 2, "character": 125}, "end": {"line": 2, "character": 133}}, "contents": {"value": "`by tac` constructs a term of the expected type by running the tactic(s) `tac`. ", "kind": "markdown"}}
{"character": "s", "row": 2, "column": 128, "range": {"start": {"line": 2, "character": 128}, "end": {"line": 2, "character": 133}}, "contents": {"value": "The `sorry` tactic is a temporary placeholder for an incomplete tactic proof,\nclosing the main goal using `exact sorry`.\n\nThis is intended for stubbing-out incomplete parts of a proof while still having a syntactically correct proof skeleton.\nLean will give a warning whenever a proof uses `sorry`, so you aren't likely to miss it,\nbut you can double check if a theorem depends on `sorry` by looking for `sorryAx` in the output\nof the `#print axioms my_thm` command, the axiom used by the implementation of `sorry`.\n", "kind": "markdown"}}
{"character": "o", "row": 2, "column": 129, "range": {"start": {"line": 2, "character": 128}, "end": {"line": 2, "character": 133}}, "contents": {"value": "The `sorry` tactic is a temporary placeholder for an incomplete tactic proof,\nclosing the main goal using `exact sorry`.\n\nThis is intended for stubbing-out incomplete parts of a proof while still having a syntactically correct proof skeleton.\nLean will give a warning whenever a proof uses `sorry`, so you aren't likely to miss it,\nbut you can double check if a theorem depends on `sorry` by looking for `sorryAx` in the output\nof the `#print axioms my_thm` command, the axiom used by the implementation of `sorry`.\n", "kind": "markdown"}}
{"character": "r", "row": 2, "column": 130, "range": {"start": {"line": 2, "character": 128}, "end": {"line": 2, "character": 133}}, "contents": {"value": "The `sorry` tactic is a temporary placeholder for an incomplete tactic proof,\nclosing the main goal using `exact sorry`.\n\nThis is intended for stubbing-out incomplete parts of a proof while still having a syntactically correct proof skeleton.\nLean will give a warning whenever a proof uses `sorry`, so you aren't likely to miss it,\nbut you can double check if a theorem depends on `sorry` by looking for `sorryAx` in the output\nof the `#print axioms my_thm` command, the axiom used by the implementation of `sorry`.\n", "kind": "markdown"}}
{"character": "r", "row": 2, "column": 131, "range": {"start": {"line": 2, "character": 128}, "end": {"line": 2, "character": 133}}, "contents": {"value": "The `sorry` tactic is a temporary placeholder for an incomplete tactic proof,\nclosing the main goal using `exact sorry`.\n\nThis is intended for stubbing-out incomplete parts of a proof while still having a syntactically correct proof skeleton.\nLean will give a warning whenever a proof uses `sorry`, so you aren't likely to miss it,\nbut you can double check if a theorem depends on `sorry` by looking for `sorryAx` in the output\nof the `#print axioms my_thm` command, the axiom used by the implementation of `sorry`.\n", "kind": "markdown"}}
{"character": "y", "row": 2, "column": 132, "range": {"start": {"line": 2, "character": 128}, "end": {"line": 2, "character": 133}}, "contents": {"value": "The `sorry` tactic is a temporary placeholder for an incomplete tactic proof,\nclosing the main goal using `exact sorry`.\n\nThis is intended for stubbing-out incomplete parts of a proof while still having a syntactically correct proof skeleton.\nLean will give a warning whenever a proof uses `sorry`, so you aren't likely to miss it,\nbut you can double check if a theorem depends on `sorry` by looking for `sorryAx` in the output\nof the `#print axioms my_thm` command, the axiom used by the implementation of `sorry`.\n", "kind": "markdown"}}
