{"character": "i", "row": 0, "column": 0}
{"character": "m", "row": 0, "column": 1}
{"character": "p", "row": 0, "column": 2}
{"character": "o", "row": 0, "column": 3}
{"character": "r", "row": 0, "column": 4}
{"character": "t", "row": 0, "column": 5}
{"character": " ", "row": 0, "column": 6}
{"character": "M", "row": 0, "column": 7}
{"character": "a", "row": 0, "column": 8}
{"character": "t", "row": 0, "column": 9}
{"character": "h", "row": 0, "column": 10}
{"character": "l", "row": 0, "column": 11}
{"character": "i", "row": 0, "column": 12}
{"character": "b", "row": 0, "column": 13}
{"character": "t", "row": 2, "column": 0}
{"character": "h", "row": 2, "column": 1}
{"character": "e", "row": 2, "column": 2}
{"character": "o", "row": 2, "column": 3}
{"character": "r", "row": 2, "column": 4}
{"character": "e", "row": 2, "column": 5}
{"character": "m", "row": 2, "column": 6}
{"character": " ", "row": 2, "column": 7}
{"character": "t", "row": 2, "column": 8, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 15}}, "contents": {"value": "```lean\ntm_name : 1 * 3 * 5 * 7 * 9 * 11 * 13 % 10 = 5\n```", "kind": "markdown"}}
{"character": "m", "row": 2, "column": 9, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 15}}, "contents": {"value": "```lean\ntm_name : 1 * 3 * 5 * 7 * 9 * 11 * 13 % 10 = 5\n```", "kind": "markdown"}}
{"character": "_", "row": 2, "column": 10, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 15}}, "contents": {"value": "```lean\ntm_name : 1 * 3 * 5 * 7 * 9 * 11 * 13 % 10 = 5\n```", "kind": "markdown"}}
{"character": "n", "row": 2, "column": 11, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 15}}, "contents": {"value": "```lean\ntm_name : 1 * 3 * 5 * 7 * 9 * 11 * 13 % 10 = 5\n```", "kind": "markdown"}}
{"character": "a", "row": 2, "column": 12, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 15}}, "contents": {"value": "```lean\ntm_name : 1 * 3 * 5 * 7 * 9 * 11 * 13 % 10 = 5\n```", "kind": "markdown"}}
{"character": "m", "row": 2, "column": 13, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 15}}, "contents": {"value": "```lean\ntm_name : 1 * 3 * 5 * 7 * 9 * 11 * 13 % 10 = 5\n```", "kind": "markdown"}}
{"character": "e", "row": 2, "column": 14, "range": {"start": {"line": 2, "character": 8}, "end": {"line": 2, "character": 15}}, "contents": {"value": "```lean\ntm_name : 1 * 3 * 5 * 7 * 9 * 11 * 13 % 10 = 5\n```", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 15}
{"character": ":", "row": 2, "column": 16, "range": {"start": {"line": 2, "character": 16}, "end": {"line": 2, "character": 54}}, "contents": {"value": "`declSig` matches the signature of a declaration with required type: a list of binders and then `: type` ", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 17}
{"character": "1", "row": 2, "column": 18, "range": {"start": {"line": 2, "character": 18}, "end": {"line": 2, "character": 19}}, "contents": {"value": "```lean\n1 : ℕ\n```", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 19, "range": {"start": {"line": 2, "character": 18}, "end": {"line": 2, "character": 23}}, "contents": {"value": "```lean\nℕ\n```\n***\n`a * b` computes the product of `a` and `b`.\nThe meaning of this notation is type-dependent. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `*` in identifiers is `mul`.", "kind": "markdown"}}
{"character": "*", "row": 2, "column": 20, "range": {"start": {"line": 2, "character": 18}, "end": {"line": 2, "character": 23}}, "contents": {"value": "```lean\nℕ\n```\n***\n`a * b` computes the product of `a` and `b`.\nThe meaning of this notation is type-dependent. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `*` in identifiers is `mul`.", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 21, "range": {"start": {"line": 2, "character": 18}, "end": {"line": 2, "character": 23}}, "contents": {"value": "```lean\nℕ\n```\n***\n`a * b` computes the product of `a` and `b`.\nThe meaning of this notation is type-dependent. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `*` in identifiers is `mul`.", "kind": "markdown"}}
{"character": "3", "row": 2, "column": 22, "range": {"start": {"line": 2, "character": 22}, "end": {"line": 2, "character": 23}}, "contents": {"value": "```lean\n3 : ℕ\n```", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 23, "range": {"start": {"line": 2, "character": 18}, "end": {"line": 2, "character": 27}}, "contents": {"value": "```lean\nℕ\n```\n***\n`a * b` computes the product of `a` and `b`.\nThe meaning of this notation is type-dependent. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `*` in identifiers is `mul`.", "kind": "markdown"}}
{"character": "*", "row": 2, "column": 24, "range": {"start": {"line": 2, "character": 18}, "end": {"line": 2, "character": 27}}, "contents": {"value": "```lean\nℕ\n```\n***\n`a * b` computes the product of `a` and `b`.\nThe meaning of this notation is type-dependent. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `*` in identifiers is `mul`.", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 25, "range": {"start": {"line": 2, "character": 18}, "end": {"line": 2, "character": 27}}, "contents": {"value": "```lean\nℕ\n```\n***\n`a * b` computes the product of `a` and `b`.\nThe meaning of this notation is type-dependent. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `*` in identifiers is `mul`.", "kind": "markdown"}}
{"character": "5", "row": 2, "column": 26, "range": {"start": {"line": 2, "character": 26}, "end": {"line": 2, "character": 27}}, "contents": {"value": "```lean\n5 : ℕ\n```", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 27, "range": {"start": {"line": 2, "character": 18}, "end": {"line": 2, "character": 31}}, "contents": {"value": "```lean\nℕ\n```\n***\n`a * b` computes the product of `a` and `b`.\nThe meaning of this notation is type-dependent. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `*` in identifiers is `mul`.", "kind": "markdown"}}
{"character": "*", "row": 2, "column": 28, "range": {"start": {"line": 2, "character": 18}, "end": {"line": 2, "character": 31}}, "contents": {"value": "```lean\nℕ\n```\n***\n`a * b` computes the product of `a` and `b`.\nThe meaning of this notation is type-dependent. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `*` in identifiers is `mul`.", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 29, "range": {"start": {"line": 2, "character": 18}, "end": {"line": 2, "character": 31}}, "contents": {"value": "```lean\nℕ\n```\n***\n`a * b` computes the product of `a` and `b`.\nThe meaning of this notation is type-dependent. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `*` in identifiers is `mul`.", "kind": "markdown"}}
{"character": "7", "row": 2, "column": 30, "range": {"start": {"line": 2, "character": 30}, "end": {"line": 2, "character": 31}}, "contents": {"value": "```lean\n7 : ℕ\n```", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 31, "range": {"start": {"line": 2, "character": 18}, "end": {"line": 2, "character": 35}}, "contents": {"value": "```lean\nℕ\n```\n***\n`a * b` computes the product of `a` and `b`.\nThe meaning of this notation is type-dependent. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `*` in identifiers is `mul`.", "kind": "markdown"}}
{"character": "*", "row": 2, "column": 32, "range": {"start": {"line": 2, "character": 18}, "end": {"line": 2, "character": 35}}, "contents": {"value": "```lean\nℕ\n```\n***\n`a * b` computes the product of `a` and `b`.\nThe meaning of this notation is type-dependent. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `*` in identifiers is `mul`.", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 33, "range": {"start": {"line": 2, "character": 18}, "end": {"line": 2, "character": 35}}, "contents": {"value": "```lean\nℕ\n```\n***\n`a * b` computes the product of `a` and `b`.\nThe meaning of this notation is type-dependent. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `*` in identifiers is `mul`.", "kind": "markdown"}}
{"character": "9", "row": 2, "column": 34, "range": {"start": {"line": 2, "character": 34}, "end": {"line": 2, "character": 35}}, "contents": {"value": "```lean\n9 : ℕ\n```", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 35, "range": {"start": {"line": 2, "character": 18}, "end": {"line": 2, "character": 40}}, "contents": {"value": "```lean\nℕ\n```\n***\n`a * b` computes the product of `a` and `b`.\nThe meaning of this notation is type-dependent. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `*` in identifiers is `mul`.", "kind": "markdown"}}
{"character": "*", "row": 2, "column": 36, "range": {"start": {"line": 2, "character": 18}, "end": {"line": 2, "character": 40}}, "contents": {"value": "```lean\nℕ\n```\n***\n`a * b` computes the product of `a` and `b`.\nThe meaning of this notation is type-dependent. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `*` in identifiers is `mul`.", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 37, "range": {"start": {"line": 2, "character": 18}, "end": {"line": 2, "character": 40}}, "contents": {"value": "```lean\nℕ\n```\n***\n`a * b` computes the product of `a` and `b`.\nThe meaning of this notation is type-dependent. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `*` in identifiers is `mul`.", "kind": "markdown"}}
{"character": "1", "row": 2, "column": 38, "range": {"start": {"line": 2, "character": 38}, "end": {"line": 2, "character": 40}}, "contents": {"value": "```lean\n11 : ℕ\n```", "kind": "markdown"}}
{"character": "1", "row": 2, "column": 39, "range": {"start": {"line": 2, "character": 38}, "end": {"line": 2, "character": 40}}, "contents": {"value": "```lean\n11 : ℕ\n```", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 40, "range": {"start": {"line": 2, "character": 18}, "end": {"line": 2, "character": 45}}, "contents": {"value": "```lean\nℕ\n```\n***\n`a * b` computes the product of `a` and `b`.\nThe meaning of this notation is type-dependent. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `*` in identifiers is `mul`.", "kind": "markdown"}}
{"character": "*", "row": 2, "column": 41, "range": {"start": {"line": 2, "character": 18}, "end": {"line": 2, "character": 45}}, "contents": {"value": "```lean\nℕ\n```\n***\n`a * b` computes the product of `a` and `b`.\nThe meaning of this notation is type-dependent. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `*` in identifiers is `mul`.", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 42, "range": {"start": {"line": 2, "character": 18}, "end": {"line": 2, "character": 45}}, "contents": {"value": "```lean\nℕ\n```\n***\n`a * b` computes the product of `a` and `b`.\nThe meaning of this notation is type-dependent. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `*` in identifiers is `mul`.", "kind": "markdown"}}
{"character": "1", "row": 2, "column": 43, "range": {"start": {"line": 2, "character": 43}, "end": {"line": 2, "character": 45}}, "contents": {"value": "```lean\n13 : ℕ\n```", "kind": "markdown"}}
{"character": "3", "row": 2, "column": 44, "range": {"start": {"line": 2, "character": 43}, "end": {"line": 2, "character": 45}}, "contents": {"value": "```lean\n13 : ℕ\n```", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 45, "range": {"start": {"line": 2, "character": 18}, "end": {"line": 2, "character": 50}}, "contents": {"value": "```lean\nℕ\n```\n***\n`a % b` computes the remainder upon dividing `a` by `b`.\nThe meaning of this notation is type-dependent.\n* For `Nat` and `Int` it satisfies `a % b + b * (a / b) = a`,\n  and `a % 0` is defined to be `a`. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `%` in identifiers is `mod`.", "kind": "markdown"}}
{"character": "%", "row": 2, "column": 46, "range": {"start": {"line": 2, "character": 18}, "end": {"line": 2, "character": 50}}, "contents": {"value": "```lean\nℕ\n```\n***\n`a % b` computes the remainder upon dividing `a` by `b`.\nThe meaning of this notation is type-dependent.\n* For `Nat` and `Int` it satisfies `a % b + b * (a / b) = a`,\n  and `a % 0` is defined to be `a`. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `%` in identifiers is `mod`.", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 47, "range": {"start": {"line": 2, "character": 18}, "end": {"line": 2, "character": 50}}, "contents": {"value": "```lean\nℕ\n```\n***\n`a % b` computes the remainder upon dividing `a` by `b`.\nThe meaning of this notation is type-dependent.\n* For `Nat` and `Int` it satisfies `a % b + b * (a / b) = a`,\n  and `a % 0` is defined to be `a`. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `%` in identifiers is `mod`.", "kind": "markdown"}}
{"character": "1", "row": 2, "column": 48, "range": {"start": {"line": 2, "character": 48}, "end": {"line": 2, "character": 50}}, "contents": {"value": "```lean\n10 : ℕ\n```", "kind": "markdown"}}
{"character": "0", "row": 2, "column": 49, "range": {"start": {"line": 2, "character": 48}, "end": {"line": 2, "character": 50}}, "contents": {"value": "```lean\n10 : ℕ\n```", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 50, "range": {"start": {"line": 2, "character": 18}, "end": {"line": 2, "character": 54}}, "contents": {"value": "```lean\nProp\n```\n***\nThe equality relation. It has one introduction rule, `Eq.refl`.\nWe use `a = b` as notation for `Eq a b`.\nA fundamental property of equality is that it is an equivalence relation.\n```\nvariable (α : Type) (a b c d : α)\nvariable (hab : a = b) (hcb : c = b) (hcd : c = d)\n\nexample : a = d :=\n  Eq.trans (Eq.trans hab (Eq.symm hcb)) hcd\n```\nEquality is much more than an equivalence relation, however. It has the important property that every assertion\nrespects the equivalence, in the sense that we can substitute equal expressions without changing the truth value.\nThat is, given `h1 : a = b` and `h2 : p a`, we can construct a proof for `p b` using substitution: `Eq.subst h1 h2`.\nExample:\n```\nexample (α : Type) (a b : α) (p : α → Prop)\n        (h1 : a = b) (h2 : p a) : p b :=\n  Eq.subst h1 h2\n\nexample (α : Type) (a b : α) (p : α → Prop)\n    (h1 : a = b) (h2 : p a) : p b :=\n  h1 ▸ h2\n```\nThe triangle in the second presentation is a macro built on top of `Eq.subst` and `Eq.symm`, and you can enter it by typing `\\t`.\nFor more information: [Equality](https://lean-lang.org/theorem_proving_in_lean4/quantifiers_and_equality.html#equality)\n\n\nConventions for notations in identifiers:\n\n * The recommended spelling of `=` in identifiers is `eq`.", "kind": "markdown"}}
{"character": "=", "row": 2, "column": 51, "range": {"start": {"line": 2, "character": 18}, "end": {"line": 2, "character": 54}}, "contents": {"value": "```lean\nProp\n```\n***\nThe equality relation. It has one introduction rule, `Eq.refl`.\nWe use `a = b` as notation for `Eq a b`.\nA fundamental property of equality is that it is an equivalence relation.\n```\nvariable (α : Type) (a b c d : α)\nvariable (hab : a = b) (hcb : c = b) (hcd : c = d)\n\nexample : a = d :=\n  Eq.trans (Eq.trans hab (Eq.symm hcb)) hcd\n```\nEquality is much more than an equivalence relation, however. It has the important property that every assertion\nrespects the equivalence, in the sense that we can substitute equal expressions without changing the truth value.\nThat is, given `h1 : a = b` and `h2 : p a`, we can construct a proof for `p b` using substitution: `Eq.subst h1 h2`.\nExample:\n```\nexample (α : Type) (a b : α) (p : α → Prop)\n        (h1 : a = b) (h2 : p a) : p b :=\n  Eq.subst h1 h2\n\nexample (α : Type) (a b : α) (p : α → Prop)\n    (h1 : a = b) (h2 : p a) : p b :=\n  h1 ▸ h2\n```\nThe triangle in the second presentation is a macro built on top of `Eq.subst` and `Eq.symm`, and you can enter it by typing `\\t`.\nFor more information: [Equality](https://lean-lang.org/theorem_proving_in_lean4/quantifiers_and_equality.html#equality)\n\n\nConventions for notations in identifiers:\n\n * The recommended spelling of `=` in identifiers is `eq`.", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 52, "range": {"start": {"line": 2, "character": 18}, "end": {"line": 2, "character": 54}}, "contents": {"value": "```lean\nProp\n```\n***\nThe equality relation. It has one introduction rule, `Eq.refl`.\nWe use `a = b` as notation for `Eq a b`.\nA fundamental property of equality is that it is an equivalence relation.\n```\nvariable (α : Type) (a b c d : α)\nvariable (hab : a = b) (hcb : c = b) (hcd : c = d)\n\nexample : a = d :=\n  Eq.trans (Eq.trans hab (Eq.symm hcb)) hcd\n```\nEquality is much more than an equivalence relation, however. It has the important property that every assertion\nrespects the equivalence, in the sense that we can substitute equal expressions without changing the truth value.\nThat is, given `h1 : a = b` and `h2 : p a`, we can construct a proof for `p b` using substitution: `Eq.subst h1 h2`.\nExample:\n```\nexample (α : Type) (a b : α) (p : α → Prop)\n        (h1 : a = b) (h2 : p a) : p b :=\n  Eq.subst h1 h2\n\nexample (α : Type) (a b : α) (p : α → Prop)\n    (h1 : a = b) (h2 : p a) : p b :=\n  h1 ▸ h2\n```\nThe triangle in the second presentation is a macro built on top of `Eq.subst` and `Eq.symm`, and you can enter it by typing `\\t`.\nFor more information: [Equality](https://lean-lang.org/theorem_proving_in_lean4/quantifiers_and_equality.html#equality)\n\n\nConventions for notations in identifiers:\n\n * The recommended spelling of `=` in identifiers is `eq`.", "kind": "markdown"}}
{"character": "5", "row": 2, "column": 53, "range": {"start": {"line": 2, "character": 53}, "end": {"line": 2, "character": 54}}, "contents": {"value": "```lean\n5 : ℕ\n```", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 54}
{"character": ":", "row": 2, "column": 55}
{"character": "=", "row": 2, "column": 56}
{"character": " ", "row": 2, "column": 57}
{"character": "b", "row": 2, "column": 58, "range": {"start": {"line": 2, "character": 58}, "end": {"line": 2, "character": 66}}, "contents": {"value": "`by tac` constructs a term of the expected type by running the tactic(s) `tac`. ", "kind": "markdown"}}
{"character": "y", "row": 2, "column": 59, "range": {"start": {"line": 2, "character": 58}, "end": {"line": 2, "character": 66}}, "contents": {"value": "`by tac` constructs a term of the expected type by running the tactic(s) `tac`. ", "kind": "markdown"}}
{"character": " ", "row": 2, "column": 60, "range": {"start": {"line": 2, "character": 58}, "end": {"line": 2, "character": 66}}, "contents": {"value": "`by tac` constructs a term of the expected type by running the tactic(s) `tac`. ", "kind": "markdown"}}
{"character": "s", "row": 2, "column": 61, "range": {"start": {"line": 2, "character": 61}, "end": {"line": 2, "character": 66}}, "contents": {"value": "The `sorry` tactic is a temporary placeholder for an incomplete tactic proof,\nclosing the main goal using `exact sorry`.\n\nThis is intended for stubbing-out incomplete parts of a proof while still having a syntactically correct proof skeleton.\nLean will give a warning whenever a proof uses `sorry`, so you aren't likely to miss it,\nbut you can double check if a theorem depends on `sorry` by looking for `sorryAx` in the output\nof the `#print axioms my_thm` command, the axiom used by the implementation of `sorry`.\n", "kind": "markdown"}}
{"character": "o", "row": 2, "column": 62, "range": {"start": {"line": 2, "character": 61}, "end": {"line": 2, "character": 66}}, "contents": {"value": "The `sorry` tactic is a temporary placeholder for an incomplete tactic proof,\nclosing the main goal using `exact sorry`.\n\nThis is intended for stubbing-out incomplete parts of a proof while still having a syntactically correct proof skeleton.\nLean will give a warning whenever a proof uses `sorry`, so you aren't likely to miss it,\nbut you can double check if a theorem depends on `sorry` by looking for `sorryAx` in the output\nof the `#print axioms my_thm` command, the axiom used by the implementation of `sorry`.\n", "kind": "markdown"}}
{"character": "r", "row": 2, "column": 63, "range": {"start": {"line": 2, "character": 61}, "end": {"line": 2, "character": 66}}, "contents": {"value": "The `sorry` tactic is a temporary placeholder for an incomplete tactic proof,\nclosing the main goal using `exact sorry`.\n\nThis is intended for stubbing-out incomplete parts of a proof while still having a syntactically correct proof skeleton.\nLean will give a warning whenever a proof uses `sorry`, so you aren't likely to miss it,\nbut you can double check if a theorem depends on `sorry` by looking for `sorryAx` in the output\nof the `#print axioms my_thm` command, the axiom used by the implementation of `sorry`.\n", "kind": "markdown"}}
{"character": "r", "row": 2, "column": 64, "range": {"start": {"line": 2, "character": 61}, "end": {"line": 2, "character": 66}}, "contents": {"value": "The `sorry` tactic is a temporary placeholder for an incomplete tactic proof,\nclosing the main goal using `exact sorry`.\n\nThis is intended for stubbing-out incomplete parts of a proof while still having a syntactically correct proof skeleton.\nLean will give a warning whenever a proof uses `sorry`, so you aren't likely to miss it,\nbut you can double check if a theorem depends on `sorry` by looking for `sorryAx` in the output\nof the `#print axioms my_thm` command, the axiom used by the implementation of `sorry`.\n", "kind": "markdown"}}
{"character": "y", "row": 2, "column": 65, "range": {"start": {"line": 2, "character": 61}, "end": {"line": 2, "character": 66}}, "contents": {"value": "The `sorry` tactic is a temporary placeholder for an incomplete tactic proof,\nclosing the main goal using `exact sorry`.\n\nThis is intended for stubbing-out incomplete parts of a proof while still having a syntactically correct proof skeleton.\nLean will give a warning whenever a proof uses `sorry`, so you aren't likely to miss it,\nbut you can double check if a theorem depends on `sorry` by looking for `sorryAx` in the output\nof the `#print axioms my_thm` command, the axiom used by the implementation of `sorry`.\n", "kind": "markdown"}}
